{
  "version": "3.2",
  "log": [
    {
      "SafeMath": {
        "src": "@openzeppelin/contracts/math/SafeMath.sol:18",
        "version": {
          "withMetadata": "12f8b63975cec359166dc714be4e684b4fcf7c0497b2176e313e78b0f08171f8",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "dd15e04a1561397fbc7c3ae3ad394763be5dadec2c60082138bbf64746f457f8",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/introspection/ERC165.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165",
            "src": "@openzeppelin/contracts/introspection/ERC165.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC165",
              "label": "_supportedInterfaces",
              "type": "t_mapping(t_bytes4,t_bool)",
              "src": "@openzeppelin/contracts/introspection/ERC165.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "contracts/library/IERC165.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155": {
        "src": "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "allowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol:18",
        "version": {
          "withMetadata": "10a52c46544715323267b8e67cca17ce42639d6bd2e476fc622d6a4377dbf696",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:21",
        "version": {
          "withMetadata": "62052799441c0dcf8058c573a13b8b924a798ec2ea4df49279b68c8896d7c4a2",
          "withoutMetadata": "18d541cb26777a08c1ed8f9643d08d5785f4fea296dc4c5d78607982f0442a11",
          "linkedWithoutMetadata": "18d541cb26777a08c1ed8f9643d08d5785f4fea296dc4c5d78607982f0442a11"
        },
        "inherit": [
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address",
          "EnumerableSet",
          "EnumerableMap",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "baseURI()",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:93"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_holderTokens",
              "type": "t_mapping(t_address,t_struct(UintSet)4582_storage)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenOwners",
              "type": "t_struct(UintToAddressMap)3959_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:42"
            },
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:45"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:48"
            },
            {
              "contract": "ERC721",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:51"
            },
            {
              "contract": "ERC721",
              "label": "_baseURI",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(UintSet)4582_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UintSet)4582_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4196_storage"
                }
              ]
            },
            "t_struct(Set)4196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(UintToAddressMap)3959_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)3641_storage"
                }
              ]
            },
            "t_struct(Map)3641_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)3633_storage)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_struct(MapEntry)3633_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]"
            },
            "t_struct(MapEntry)3633_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:118",
        "version": {
          "withMetadata": "0e7bc261592f1476fa65c5b6e7b543d3a082a9ddd4faad3d9aeb695e6b7bde4b",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableMap": {
        "src": "@openzeppelin/contracts/utils/EnumerableMap.sol:29",
        "version": {
          "withMetadata": "73725cbf9d2d1b2137d29a8a838af6227094ea37e1f8d67c6e200e7ab9da7ddd",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "93c63380dd1aced02757debdc25c8b6a733c4d4148ef735e290102573c76ca93",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "943f736564e78cbe4b2ebc37a12345bea28446ff07a76171b7a8cb7eb81c3c06",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomAddressRegistry": {
        "src": "contracts/FantomAddressRegistry.sol:8",
        "version": {
          "withMetadata": "08d01ea95bd4bce9b83815f7a2bd1d318eeda3aa1f61d89841dd516d7c40bd1d",
          "withoutMetadata": "b8b02879464d53b43faa6a13553775a50f3ff1f589f7790ee632b882717bb59f",
          "linkedWithoutMetadata": "b8b02879464d53b43faa6a13553775a50f3ff1f589f7790ee632b882717bb59f"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "updateArtion(address)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateNFTFactory(address)",
          "updateNFTFactoryPrivate(address)",
          "updateArtFactory(address)",
          "updateArtFactoryPrivate(address)",
          "updateTokenRegistry(address)",
          "updatePriceFeed(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAddressRegistry",
              "label": "artion",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:12"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:15"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:18"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:21"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:24"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateFactory",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:27"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "artFactory",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:30"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateArtFactory",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:33"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "tokenRegistry",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:36"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "priceFeed",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactory": {
        "src": "contracts/FantomArtFactory.sol:8",
        "version": {
          "withMetadata": "bce312772d852965c25687ba59043f2c07199fb72336adce8d7027b511254c2f",
          "withoutMetadata": "8e1c297e22a5bcef43fe01d30f0c3f0262c8a902b2d5ee87decdd1df2fb03316",
          "linkedWithoutMetadata": "8e1c297e22a5bcef43fe01d30f0c3f0262c8a902b2d5ee87decdd1df2fb03316"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactory",
            "src": "contracts/FantomArtFactory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomArtFactory.sol:14"
            },
            {
              "contract": "FantomArtFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomArtFactory.sol:17"
            },
            {
              "contract": "FantomArtFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtFactory.sol:20"
            },
            {
              "contract": "FantomArtFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtFactory.sol:23"
            },
            {
              "contract": "FantomArtFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtFactory.sol:26"
            },
            {
              "contract": "FantomArtFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomArtFactory.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactoryPrivate": {
        "src": "contracts/FantomArtFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "529438c93406e8e1be843021feee3e51dd119631ebd8ba12aba967931427b75c",
          "withoutMetadata": "877f94d2bd7a84d2f1c6afc8d4245ec2ef0bcf5eadfd6216274f2035783fca8c",
          "linkedWithoutMetadata": "877f94d2bd7a84d2f1c6afc8d4245ec2ef0bcf5eadfd6216274f2035783fca8c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactoryPrivate",
            "src": "contracts/FantomArtFactoryPrivate.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomArtFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomArtFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomArtFactoryPrivate.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradable": {
        "src": "contracts/FantomArtTradable.sol:22",
        "version": {
          "withMetadata": "6845ed2b31f000dfa5c8581dcf71edef7a33a726a14aa789f7c137806bf07dd0",
          "withoutMetadata": "f33b5082790284cfcfe598c9b5f69a0ce350cda1bd7a36032d7877bbb65b2b8b",
          "linkedWithoutMetadata": "f33b5082790284cfcfe598c9b5f69a0ce350cda1bd7a36032d7877bbb65b2b8b"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradable",
            "src": "contracts/FantomArtTradable.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts/FantomArtTradable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradable",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts/FantomArtTradable.sol:28"
            },
            {
              "contract": "FantomArtTradable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts/FantomArtTradable.sol:31"
            },
            {
              "contract": "FantomArtTradable",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/FantomArtTradable.sol:33"
            },
            {
              "contract": "FantomArtTradable",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/FantomArtTradable.sol:34"
            },
            {
              "contract": "FantomArtTradable",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/FantomArtTradable.sol:37"
            },
            {
              "contract": "FantomArtTradable",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/FantomArtTradable.sol:39"
            },
            {
              "contract": "FantomArtTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtTradable.sol:41"
            },
            {
              "contract": "FantomArtTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtTradable.sol:43"
            },
            {
              "contract": "FantomArtTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomArtTradable.sol:45"
            },
            {
              "contract": "FantomArtTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomArtTradable.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "OwnableDelegateProxy": {
        "src": "contracts/FantomArtTradablePrivate.sol:10",
        "version": {
          "withMetadata": "4c93e9e5faf5bc6c47f4948076e45228df6b94b965bc454d6b5eabf54037cf51",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyRegistry": {
        "src": "contracts/FantomArtTradablePrivate.sol:12",
        "version": {
          "withMetadata": "806d3778c07ab1e992c08bf9ba312148b40b6af096eb65e38c1dc7c6991ce71b",
          "withoutMetadata": "aa5f7868673867df9c21749320a6e16e4ca5f9990a18e1a55b0cff496ccd615d",
          "linkedWithoutMetadata": "aa5f7868673867df9c21749320a6e16e4ca5f9990a18e1a55b0cff496ccd615d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ProxyRegistry",
              "label": "proxies",
              "type": "t_mapping(t_address,t_contract(OwnableDelegateProxy)5826)",
              "src": "contracts/FantomArtTradablePrivate.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_contract(OwnableDelegateProxy)5826)": {
              "label": "mapping(address => contract OwnableDelegateProxy)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(OwnableDelegateProxy)5826": {
              "label": "contract OwnableDelegateProxy"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradablePrivate": {
        "src": "contracts/FantomArtTradablePrivate.sol:22",
        "version": {
          "withMetadata": "c8de9ef9dfc8c04550c444bd72ad1e905642be1e3dc9c3858addd42455a20f97",
          "withoutMetadata": "fdea5c874e471cd342851d70953bc34544f3144ebc53c9d7992b435f3b02e5a9",
          "linkedWithoutMetadata": "fdea5c874e471cd342851d70953bc34544f3144ebc53c9d7992b435f3b02e5a9"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradablePrivate",
            "src": "contracts/FantomArtTradablePrivate.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts/FantomArtTradablePrivate.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts/FantomArtTradablePrivate.sol:28"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts/FantomArtTradablePrivate.sol:31"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/FantomArtTradablePrivate.sol:33"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/FantomArtTradablePrivate.sol:34"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/FantomArtTradablePrivate.sol:37"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/FantomArtTradablePrivate.sol:39"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtTradablePrivate.sol:41"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtTradablePrivate.sol:43"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomArtTradablePrivate.sol:45"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomArtTradablePrivate.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Artion": {
        "src": "contracts/FantomArtion.sol:9",
        "version": {
          "withMetadata": "c80c541048cb1037d3695d8897823125fb4efac63351cfbef0bd972b9e178ed6",
          "withoutMetadata": "bbe75e04fac2b1d74f61d8873f2d2f23bbe343afd3f2e28c71015fbf71dc7950",
          "linkedWithoutMetadata": "bbe75e04fac2b1d74f61d8873f2d2f23bbe343afd3f2e28c71015fbf71dc7950"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable,uint256)",
          "mint(address,string)",
          "burn(uint256)",
          "exists(uint256)",
          "isApproved(uint256,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Artion",
            "src": "contracts/FantomArtion.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Artion",
              "label": "tokenIdPointer",
              "type": "t_uint256",
              "src": "contracts/FantomArtion.sol:26"
            },
            {
              "contract": "Artion",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/FantomArtion.sol:29"
            },
            {
              "contract": "Artion",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtion.sol:32"
            },
            {
              "contract": "Artion",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtion.sol:35"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuction": {
        "src": "contracts/FantomAuction.sol:55",
        "version": {
          "withMetadata": "680dd9418a3039b8fd27161ce68e40f9a54ed7d7974efdcd02efeb67f4d50f96",
          "withoutMetadata": "644663d63c2fc928180dce2c3bf2e3a84391bba64f4c954950be39a1799ac729",
          "linkedWithoutMetadata": "644663d63c2fc928180dce2c3bf2e3a84391bba64f4c954950be39a1799ac729"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable)",
          "createAuction(address,uint256,address,uint256,uint256,bool,uint256)",
          "placeBid(address,uint256)",
          "placeBid(address,uint256,uint256)",
          "withdrawBid(address,uint256)",
          "resultAuction(address,uint256)",
          "cancelAuction(address,uint256)",
          "toggleIsPaused()",
          "updateMinBidIncrement(uint256)",
          "updateBidWithdrawalLockTime(uint256)",
          "updateAuctionReservePrice(address,uint256,uint256)",
          "updateAuctionStartTime(address,uint256,uint256)",
          "updateAuctionEndTime(address,uint256,uint256)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "getAuction(address,uint256)",
          "getHighestBidder(address,uint256)",
          "reclaimERC20(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "minBidIncrement",
            "src": "contracts/FantomAuction.sol:156"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bidWithdrawalLockTime",
            "src": "contracts/FantomAuction.sol:159"
          },
          {
            "kind": "state-variable-assignment",
            "name": "platformFee",
            "src": "contracts/FantomAuction.sol:162"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuction",
              "label": "auctions",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6635_storage))",
              "src": "contracts/FantomAuction.sol:150"
            },
            {
              "contract": "FantomAuction",
              "label": "highestBids",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6642_storage))",
              "src": "contracts/FantomAuction.sol:153"
            },
            {
              "contract": "FantomAuction",
              "label": "minBidIncrement",
              "type": "t_uint256",
              "src": "contracts/FantomAuction.sol:156"
            },
            {
              "contract": "FantomAuction",
              "label": "bidWithdrawalLockTime",
              "type": "t_uint256",
              "src": "contracts/FantomAuction.sol:159"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomAuction.sol:162"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFeeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomAuction.sol:165"
            },
            {
              "contract": "FantomAuction",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)6442",
              "src": "contracts/FantomAuction.sol:168"
            },
            {
              "contract": "FantomAuction",
              "label": "isPaused",
              "type": "t_bool",
              "src": "contracts/FantomAuction.sol:171"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6635_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.Auction))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(Auction)6635_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.Auction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Auction)6635_storage": {
              "label": "struct FantomAuction.Auction",
              "members": [
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "minBid",
                  "type": "t_uint256"
                },
                {
                  "label": "reservePrice",
                  "type": "t_uint256"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256"
                },
                {
                  "label": "resulted",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6642_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.HighestBid))"
            },
            "t_mapping(t_uint256,t_struct(HighestBid)6642_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.HighestBid)"
            },
            "t_struct(HighestBid)6642_storage": {
              "label": "struct FantomAuction.HighestBid",
              "members": [
                {
                  "label": "bidder",
                  "type": "t_address_payable"
                },
                {
                  "label": "bid",
                  "type": "t_uint256"
                },
                {
                  "label": "lastBidTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)6442": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAddressRegistry": {
        "src": "contracts/FantomPriceFeed.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenRegistry()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomBundleMarketplace": {
        "src": "contracts/FantomMarketplace.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomMarketplace": {
        "src": "contracts/FantomBundleMarketplace.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,address,address)",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomTokenRegistry": {
        "src": "contracts/FantomPriceFeed.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enabled(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomBundleMarketplace": {
        "src": "contracts/FantomBundleMarketplace.sol:39",
        "version": {
          "withMetadata": "29f3c0f5fbe21197205e2892f5d0b681bb6c74093e365c200c8064107587c1a9",
          "withoutMetadata": "7860dbd10f3f96ed1c062acd20c3a5bb37880ee3dc52df6caa0920e329c333cd",
          "linkedWithoutMetadata": "7860dbd10f3f96ed1c062acd20c3a5bb37880ee3dc52df6caa0920e329c333cd"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20",
          "EnumerableSet"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "getListing(address,string)",
          "listItem(string,address[],uint256[],uint256[],address,uint256,uint256)",
          "cancelListing(string)",
          "updateListing(string,address,uint256)",
          "buyItem(string)",
          "buyItem(string,address)",
          "createOffer(string,address,uint256,uint256)",
          "cancelOffer(string)",
          "acceptOffer(string,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomBundleMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8539_storage))",
              "src": "contracts/FantomBundleMarketplace.sol:106"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "owners",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/FantomBundleMarketplace.sol:109"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIdsPerItem",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4376_storage))",
              "src": "contracts/FantomBundleMarketplace.sol:111"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "nftIndexes",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))",
              "src": "contracts/FantomBundleMarketplace.sol:113"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIds",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "src": "contracts/FantomBundleMarketplace.sol:115"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "offers",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8546_storage))",
              "src": "contracts/FantomBundleMarketplace.sol:118"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomBundleMarketplace.sol:121"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomBundleMarketplace.sol:124"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)8402",
              "src": "contracts/FantomBundleMarketplace.sol:127"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8539_storage))": {
              "label": "mapping(address => mapping(bytes32 => struct FantomBundleMarketplace.Listing))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_struct(Listing)8539_storage)": {
              "label": "mapping(bytes32 => struct FantomBundleMarketplace.Listing)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Listing)8539_storage": {
              "label": "struct FantomBundleMarketplace.Listing",
              "members": [
                {
                  "label": "nfts",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "tokenIds",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "quantities",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4376_storage))": {
              "label": "mapping(address => mapping(uint256 => struct EnumerableSet.Bytes32Set))"
            },
            "t_mapping(t_uint256,t_struct(Bytes32Set)4376_storage)": {
              "label": "mapping(uint256 => struct EnumerableSet.Bytes32Set)"
            },
            "t_struct(Bytes32Set)4376_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4196_storage"
                }
              ]
            },
            "t_struct(Set)4196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
              "label": "mapping(bytes32 => mapping(address => mapping(uint256 => uint256)))"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8546_storage))": {
              "label": "mapping(bytes32 => mapping(address => struct FantomBundleMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)8546_storage)": {
              "label": "mapping(address => struct FantomBundleMarketplace.Offer)"
            },
            "t_struct(Offer)8546_storage": {
              "label": "struct FantomBundleMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)8402": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomMarketplace": {
        "src": "contracts/FantomMarketplace.sol:71",
        "version": {
          "withMetadata": "4ed0ed88e85a946ce1b26312b80cff6bf622f810344d32af21356d7e00fcc498",
          "withoutMetadata": "35c91cef661f61f014620f03f44dbb661611ad3a97af453ade557659325ae472",
          "linkedWithoutMetadata": "35c91cef661f61f014620f03f44dbb661611ad3a97af453ade557659325ae472"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable,uint16)",
          "listItem(address,uint256,uint256,address,uint256,uint256)",
          "cancelListing(address,uint256)",
          "updateListing(address,uint256,address,uint256)",
          "buyItem(address,uint256,address,address)",
          "createOffer(address,uint256,address,uint256,uint256,uint256)",
          "cancelOffer(address,uint256)",
          "acceptOffer(address,uint256,address)",
          "registerRoyalty(address,uint256,uint16)",
          "registerCollectionRoyalty(address,address,uint16,address)",
          "getPrice(address)",
          "updatePlatformFee(uint16)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomMarketplace",
              "label": "minters",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
              "src": "contracts/FantomMarketplace.sol:151"
            },
            {
              "contract": "FantomMarketplace",
              "label": "royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint16))",
              "src": "contracts/FantomMarketplace.sol:154"
            },
            {
              "contract": "FantomMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10743_storage)))",
              "src": "contracts/FantomMarketplace.sol:157"
            },
            {
              "contract": "FantomMarketplace",
              "label": "offers",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10752_storage)))",
              "src": "contracts/FantomMarketplace.sol:161"
            },
            {
              "contract": "FantomMarketplace",
              "label": "platformFee",
              "type": "t_uint16",
              "src": "contracts/FantomMarketplace.sol:165"
            },
            {
              "contract": "FantomMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomMarketplace.sol:168"
            },
            {
              "contract": "FantomMarketplace",
              "label": "collectionRoyalties",
              "type": "t_mapping(t_address,t_struct(CollectionRoyalty)10759_storage)",
              "src": "contracts/FantomMarketplace.sol:171"
            },
            {
              "contract": "FantomMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)10573",
              "src": "contracts/FantomMarketplace.sol:174"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
              "label": "mapping(address => mapping(uint256 => address))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint16))": {
              "label": "mapping(address => mapping(uint256 => uint16))"
            },
            "t_mapping(t_uint256,t_uint16)": {
              "label": "mapping(uint256 => uint16)"
            },
            "t_uint16": {
              "label": "uint16"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10743_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Listing)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10743_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Listing))"
            },
            "t_mapping(t_address,t_struct(Listing)10743_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Listing)"
            },
            "t_struct(Listing)10743_storage": {
              "label": "struct FantomMarketplace.Listing",
              "members": [
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10752_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Offer)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10752_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)10752_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Offer)"
            },
            "t_struct(Offer)10752_storage": {
              "label": "struct FantomMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_struct(CollectionRoyalty)10759_storage)": {
              "label": "mapping(address => struct FantomMarketplace.CollectionRoyalty)"
            },
            "t_struct(CollectionRoyalty)10759_storage": {
              "label": "struct FantomMarketplace.CollectionRoyalty",
              "members": [
                {
                  "label": "royalty",
                  "type": "t_uint16"
                },
                {
                  "label": "creator",
                  "type": "t_address"
                },
                {
                  "label": "feeRecipient",
                  "type": "t_address"
                }
              ]
            },
            "t_contract(IFantomAddressRegistry)10573": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAuction": {
        "src": "contracts/FantomMarketplace.sol:35",
        "inherit": [],
        "libraries": [],
        "methods": [
          "auctions(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomNFTFactory": {
        "src": "contracts/FantomMarketplace.sol:57",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exists(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomPriceFeed": {
        "src": "contracts/FantomMarketplace.sol:65",
        "inherit": [],
        "libraries": [],
        "methods": [
          "wFTM()",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactory": {
        "src": "contracts/FantomNFTFactory.sol:8",
        "version": {
          "withMetadata": "3d32c9f4e9893ee773e71525bb7924fc900fbb93e2b8ffbdca620d69542125f0",
          "withoutMetadata": "765cb3ecd3c2c1f5af1255fe88c1d8e71e929ddbab2767cbf8ab2b7cd6a3f020",
          "linkedWithoutMetadata": "765cb3ecd3c2c1f5af1255fe88c1d8e71e929ddbab2767cbf8ab2b7cd6a3f020"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactory",
            "src": "contracts/FantomNFTFactory.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactory",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomNFTFactory.sol:14"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTFactory.sol:17"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTFactory.sol:20"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTFactory.sol:23"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTFactory.sol:26"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomNFTFactory.sol:29"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomNFTFactory.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactoryPrivate": {
        "src": "contracts/FantomNFTFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "3da65c0cc001e1b40ff35be7506f81659d8d7619dd8da8bdda7ef4c8beb5c8d0",
          "withoutMetadata": "9a461fe6e36db2875cbc9d6832f5c87cbb4fab145706f67e5b1c4ba20fac3c2f",
          "linkedWithoutMetadata": "9a461fe6e36db2875cbc9d6832f5c87cbb4fab145706f67e5b1c4ba20fac3c2f"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactoryPrivate",
            "src": "contracts/FantomNFTFactoryPrivate.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomNFTFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomNFTFactoryPrivate.sol:29"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomNFTFactoryPrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradable": {
        "src": "contracts/FantomNFTTradable.sol:12",
        "version": {
          "withMetadata": "6ae9b60afebe02822d243987adc14bc595f17e36bd4805eec5113e8f97291854",
          "withoutMetadata": "0ebd906133d9405cb4fe84f0e78f37fe84bdf36a7500c108b1bb10d99102166e",
          "linkedWithoutMetadata": "0ebd906133d9405cb4fe84f0e78f37fe84bdf36a7500c108b1bb10d99102166e"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradable",
            "src": "contracts/FantomNFTTradable.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts/FantomNFTTradable.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradable",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomNFTTradable.sol:27"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTTradable.sol:28"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTTradable.sol:29"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts/FantomNFTTradable.sol:30"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTTradable.sol:33"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomNFTTradable.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradablePrivate": {
        "src": "contracts/FantomNFTTradablePrivate.sol:12",
        "version": {
          "withMetadata": "9040c9c7f3876f38933c162d3e655412f54d6ae83e9a6d720a26c209dd9454ad",
          "withoutMetadata": "e14c1419ada91d47d0982cdb940d0e3c385c5e6aed7cd561b5870897fc9ccd46",
          "linkedWithoutMetadata": "e14c1419ada91d47d0982cdb940d0e3c385c5e6aed7cd561b5870897fc9ccd46"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradablePrivate",
            "src": "contracts/FantomNFTTradablePrivate.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts/FantomNFTTradablePrivate.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomNFTTradablePrivate.sol:27"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTTradablePrivate.sol:28"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTTradablePrivate.sol:29"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts/FantomNFTTradablePrivate.sol:30"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTTradablePrivate.sol:33"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomNFTTradablePrivate.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomPriceFeed": {
        "src": "contracts/FantomPriceFeed.sol:21",
        "version": {
          "withMetadata": "af605438c22fa5564a75d491d7c92533ffbecee3e5c5afa3d6959cc64d7fcdf2",
          "withoutMetadata": "a9e82cc54a14fd3bc58dbaa79b4045b14b4c9b290321beb8d121cfd1e034c6b7",
          "linkedWithoutMetadata": "a9e82cc54a14fd3bc58dbaa79b4045b14b4c9b290321beb8d121cfd1e034c6b7"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerOracle(address,address)",
          "updateOracle(address,address)",
          "getPrice(address)",
          "updateAddressRegistry(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomPriceFeed",
            "src": "contracts/FantomPriceFeed.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomPriceFeed",
              "label": "oracles",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FantomPriceFeed.sol:23"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "addressRegistry",
              "type": "t_address",
              "src": "contracts/FantomPriceFeed.sol:26"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "wFTM",
              "type": "t_address",
              "src": "contracts/FantomPriceFeed.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IOracle": {
        "src": "contracts/FantomPriceFeed.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestAnswer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomTokenRegistry": {
        "src": "contracts/FantomTokenRegistry.sol:7",
        "version": {
          "withMetadata": "0e477047e964af6bd542425ce348f4b48ab40344e00e3a767e8f9b66b360e68f",
          "withoutMetadata": "8d79c556bc9bb807b68178115ba5454cbf257f09ac10f8108786804cc2b2ce86",
          "linkedWithoutMetadata": "8d79c556bc9bb807b68178115ba5454cbf257f09ac10f8108786804cc2b2ce86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "add(address)",
          "remove(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomTokenRegistry",
              "label": "enabled",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomTokenRegistry.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155": {
        "src": "contracts/library/ERC1155.sol:11",
        "version": {
          "withMetadata": "cbc126418da9582c4b2faca449feca9c12d7510ca9a904e3826f2d1c8a076490",
          "withoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c",
          "linkedWithoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c"
        },
        "inherit": [
          "IERC165"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155",
              "label": "balances",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/library/ERC1155.sol:25"
            },
            {
              "contract": "ERC1155",
              "label": "operators",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts/library/ERC1155.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155Metadata": {
        "src": "contracts/library/ERC1155Metadata.sol:9",
        "version": {
          "withMetadata": "94aac9ad7d8415f3fcb755d64229ec7fcd33f0e875681e0258d75c1a5ce5f44f",
          "withoutMetadata": "e6daebc392a1105a55ecdc42deea5d1e0d27078a64ec91c306dbb0b833545021",
          "linkedWithoutMetadata": "e6daebc392a1105a55ecdc42deea5d1e0d27078a64ec91c306dbb0b833545021"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155Metadata",
              "label": "baseMetadataURI",
              "type": "t_string_storage",
              "src": "contracts/library/ERC1155Metadata.sol:12"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155MintBurn": {
        "src": "contracts/library/ERC1155MintBurn.sol:9",
        "version": {
          "withMetadata": "aefa6d236acc23d09c041a03bcccf41d167cad4c19e9308d4d2b357288873ecf",
          "withoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c",
          "linkedWithoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c"
        },
        "inherit": [
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155TokenReceiver": {
        "src": "contracts/library/IERC1155TokenReceiver.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BiddingContractMock": {
        "src": "contracts/mock/BiddingContractMock.sol:7",
        "version": {
          "withMetadata": "737048d717c39f0d9669a6a4b2ba7c142c8fc1df3f93cb613635064226c827b8",
          "withoutMetadata": "bb0412333928df554dd3ad72cd3a6e7881eb495118185c1adbf9bb85451157a0",
          "linkedWithoutMetadata": "bb0412333928df554dd3ad72cd3a6e7881eb495118185c1adbf9bb85451157a0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "bid(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BiddingContractMock",
            "src": "contracts/mock/BiddingContractMock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BiddingContractMock",
              "label": "auctionContract",
              "type": "t_contract(FantomAuction)8374",
              "src": "contracts/mock/BiddingContractMock.sol:8"
            }
          ],
          "types": {
            "t_contract(FantomAuction)8374": {
              "label": "contract FantomAuction"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuctionMock": {
        "src": "contracts/mock/FantomAuctionMock.sol:7",
        "version": {
          "withMetadata": "d0a4719912568c57fc08efd3c2bacd6bc3dfa1aa8596981cdfaf2261555afeb9",
          "withoutMetadata": "70fe49cb82152c83e5a756b3f483b7104b22541d78dd0bd4bcf114a9bdf2d822",
          "linkedWithoutMetadata": "70fe49cb82152c83e5a756b3f483b7104b22541d78dd0bd4bcf114a9bdf2d822"
        },
        "inherit": [
          "FantomAuction",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "setNowOverride(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuctionMock",
              "label": "nowOverride",
              "type": "t_uint256",
              "src": "contracts/mock/FantomAuctionMock.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts/mock/MockERC20.sol:7",
        "version": {
          "withMetadata": "9d333d6c892c8452c229962e238814161263bc21530c89efd5214cf2aca2caf3",
          "withoutMetadata": "fdf7012d757f3885a979b8d5e8de23eaa8f27d3d57b8b133ad305739a8277957",
          "linkedWithoutMetadata": "fdf7012d757f3885a979b8d5e8de23eaa8f27d3d57b8b133ad305739a8277957"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/mock/MockERC20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeabilityProxy": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:340",
        "version": {
          "withMetadata": "d8ed75f6e9cd9e5acef8cfd1f5645768c1773fbfcecc1a30db2162abda5bbb76",
          "withoutMetadata": "d8ed75f6e9cd9e5acef8cfd1f5645768c1773fbfcecc1a30db2162abda5bbb76",
          "linkedWithoutMetadata": "d8ed75f6e9cd9e5acef8cfd1f5645768c1773fbfcecc1a30db2162abda5bbb76"
        },
        "inherit": [
          "UpgradeabilityProxy",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AdminUpgradeabilityProxy",
            "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:350"
          },
          {
            "kind": "delegatecall",
            "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:428"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:46",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UpgradeabilityProxy": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:264",
        "version": {
          "withMetadata": "51a56cc80b90e509dd4b0fc5bde154cc8d3300781d16fb91b3650aacad8af820",
          "withoutMetadata": "51a56cc80b90e509dd4b0fc5bde154cc8d3300781d16fb91b3650aacad8af820",
          "linkedWithoutMetadata": "51a56cc80b90e509dd4b0fc5bde154cc8d3300781d16fb91b3650aacad8af820"
        },
        "inherit": [
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeabilityProxy",
            "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:273"
          },
          {
            "kind": "delegatecall",
            "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:277"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyAdmin": {
        "src": "contracts/proxy/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "c0e9d1c0134ca2126a6ed1f5ff439a84674b9be10e8b17a3db1e93864715b20b",
          "withoutMetadata": "ed1aee2f0dae262982d214e10fdee51b42af8a6317158eebffb1d3b96186cd72",
          "linkedWithoutMetadata": "ed1aee2f0dae262982d214e10fdee51b42af8a6317158eebffb1d3b96186cd72"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "@openzeppelin/contracts/math/SafeMath.sol:18",
        "version": {
          "withMetadata": "12f8b63975cec359166dc714be4e684b4fcf7c0497b2176e313e78b0f08171f8",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "dd15e04a1561397fbc7c3ae3ad394763be5dadec2c60082138bbf64746f457f8",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/introspection/ERC165.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165",
            "src": "@openzeppelin/contracts/introspection/ERC165.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC165",
              "label": "_supportedInterfaces",
              "type": "t_mapping(t_bytes4,t_bool)",
              "src": "@openzeppelin/contracts/introspection/ERC165.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "contracts/library/IERC165.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155": {
        "src": "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "allowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol:18",
        "version": {
          "withMetadata": "10a52c46544715323267b8e67cca17ce42639d6bd2e476fc622d6a4377dbf696",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:21",
        "version": {
          "withMetadata": "62052799441c0dcf8058c573a13b8b924a798ec2ea4df49279b68c8896d7c4a2",
          "withoutMetadata": "18d541cb26777a08c1ed8f9643d08d5785f4fea296dc4c5d78607982f0442a11",
          "linkedWithoutMetadata": "18d541cb26777a08c1ed8f9643d08d5785f4fea296dc4c5d78607982f0442a11"
        },
        "inherit": [
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address",
          "EnumerableSet",
          "EnumerableMap",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "baseURI()",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:93"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_holderTokens",
              "type": "t_mapping(t_address,t_struct(UintSet)4582_storage)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenOwners",
              "type": "t_struct(UintToAddressMap)3959_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:42"
            },
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:45"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:48"
            },
            {
              "contract": "ERC721",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:51"
            },
            {
              "contract": "ERC721",
              "label": "_baseURI",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(UintSet)4582_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UintSet)4582_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4196_storage"
                }
              ]
            },
            "t_struct(Set)4196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(UintToAddressMap)3959_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)3641_storage"
                }
              ]
            },
            "t_struct(Map)3641_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)3633_storage)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_struct(MapEntry)3633_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]"
            },
            "t_struct(MapEntry)3633_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:118",
        "version": {
          "withMetadata": "0e7bc261592f1476fa65c5b6e7b543d3a082a9ddd4faad3d9aeb695e6b7bde4b",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableMap": {
        "src": "@openzeppelin/contracts/utils/EnumerableMap.sol:29",
        "version": {
          "withMetadata": "73725cbf9d2d1b2137d29a8a838af6227094ea37e1f8d67c6e200e7ab9da7ddd",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "93c63380dd1aced02757debdc25c8b6a733c4d4148ef735e290102573c76ca93",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "943f736564e78cbe4b2ebc37a12345bea28446ff07a76171b7a8cb7eb81c3c06",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomAddressRegistry": {
        "src": "contracts/FantomAddressRegistry.sol:8",
        "version": {
          "withMetadata": "08d01ea95bd4bce9b83815f7a2bd1d318eeda3aa1f61d89841dd516d7c40bd1d",
          "withoutMetadata": "b8b02879464d53b43faa6a13553775a50f3ff1f589f7790ee632b882717bb59f",
          "linkedWithoutMetadata": "b8b02879464d53b43faa6a13553775a50f3ff1f589f7790ee632b882717bb59f"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "updateArtion(address)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateNFTFactory(address)",
          "updateNFTFactoryPrivate(address)",
          "updateArtFactory(address)",
          "updateArtFactoryPrivate(address)",
          "updateTokenRegistry(address)",
          "updatePriceFeed(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAddressRegistry",
              "label": "artion",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:12"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:15"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:18"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:21"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:24"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateFactory",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:27"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "artFactory",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:30"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateArtFactory",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:33"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "tokenRegistry",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:36"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "priceFeed",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactory": {
        "src": "contracts/FantomArtFactory.sol:8",
        "version": {
          "withMetadata": "bce312772d852965c25687ba59043f2c07199fb72336adce8d7027b511254c2f",
          "withoutMetadata": "8e1c297e22a5bcef43fe01d30f0c3f0262c8a902b2d5ee87decdd1df2fb03316",
          "linkedWithoutMetadata": "8e1c297e22a5bcef43fe01d30f0c3f0262c8a902b2d5ee87decdd1df2fb03316"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactory",
            "src": "contracts/FantomArtFactory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomArtFactory.sol:14"
            },
            {
              "contract": "FantomArtFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomArtFactory.sol:17"
            },
            {
              "contract": "FantomArtFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtFactory.sol:20"
            },
            {
              "contract": "FantomArtFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtFactory.sol:23"
            },
            {
              "contract": "FantomArtFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtFactory.sol:26"
            },
            {
              "contract": "FantomArtFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomArtFactory.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactoryPrivate": {
        "src": "contracts/FantomArtFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "529438c93406e8e1be843021feee3e51dd119631ebd8ba12aba967931427b75c",
          "withoutMetadata": "877f94d2bd7a84d2f1c6afc8d4245ec2ef0bcf5eadfd6216274f2035783fca8c",
          "linkedWithoutMetadata": "877f94d2bd7a84d2f1c6afc8d4245ec2ef0bcf5eadfd6216274f2035783fca8c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactoryPrivate",
            "src": "contracts/FantomArtFactoryPrivate.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomArtFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomArtFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomArtFactoryPrivate.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradable": {
        "src": "contracts/FantomArtTradable.sol:22",
        "version": {
          "withMetadata": "6845ed2b31f000dfa5c8581dcf71edef7a33a726a14aa789f7c137806bf07dd0",
          "withoutMetadata": "f33b5082790284cfcfe598c9b5f69a0ce350cda1bd7a36032d7877bbb65b2b8b",
          "linkedWithoutMetadata": "f33b5082790284cfcfe598c9b5f69a0ce350cda1bd7a36032d7877bbb65b2b8b"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradable",
            "src": "contracts/FantomArtTradable.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts/FantomArtTradable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradable",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts/FantomArtTradable.sol:28"
            },
            {
              "contract": "FantomArtTradable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts/FantomArtTradable.sol:31"
            },
            {
              "contract": "FantomArtTradable",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/FantomArtTradable.sol:33"
            },
            {
              "contract": "FantomArtTradable",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/FantomArtTradable.sol:34"
            },
            {
              "contract": "FantomArtTradable",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/FantomArtTradable.sol:37"
            },
            {
              "contract": "FantomArtTradable",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/FantomArtTradable.sol:39"
            },
            {
              "contract": "FantomArtTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtTradable.sol:41"
            },
            {
              "contract": "FantomArtTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtTradable.sol:43"
            },
            {
              "contract": "FantomArtTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomArtTradable.sol:45"
            },
            {
              "contract": "FantomArtTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomArtTradable.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "OwnableDelegateProxy": {
        "src": "contracts/FantomArtTradablePrivate.sol:10",
        "version": {
          "withMetadata": "4c93e9e5faf5bc6c47f4948076e45228df6b94b965bc454d6b5eabf54037cf51",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyRegistry": {
        "src": "contracts/FantomArtTradablePrivate.sol:12",
        "version": {
          "withMetadata": "806d3778c07ab1e992c08bf9ba312148b40b6af096eb65e38c1dc7c6991ce71b",
          "withoutMetadata": "aa5f7868673867df9c21749320a6e16e4ca5f9990a18e1a55b0cff496ccd615d",
          "linkedWithoutMetadata": "aa5f7868673867df9c21749320a6e16e4ca5f9990a18e1a55b0cff496ccd615d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ProxyRegistry",
              "label": "proxies",
              "type": "t_mapping(t_address,t_contract(OwnableDelegateProxy)5826)",
              "src": "contracts/FantomArtTradablePrivate.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_contract(OwnableDelegateProxy)5826)": {
              "label": "mapping(address => contract OwnableDelegateProxy)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(OwnableDelegateProxy)5826": {
              "label": "contract OwnableDelegateProxy"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradablePrivate": {
        "src": "contracts/FantomArtTradablePrivate.sol:22",
        "version": {
          "withMetadata": "c8de9ef9dfc8c04550c444bd72ad1e905642be1e3dc9c3858addd42455a20f97",
          "withoutMetadata": "fdea5c874e471cd342851d70953bc34544f3144ebc53c9d7992b435f3b02e5a9",
          "linkedWithoutMetadata": "fdea5c874e471cd342851d70953bc34544f3144ebc53c9d7992b435f3b02e5a9"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradablePrivate",
            "src": "contracts/FantomArtTradablePrivate.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts/FantomArtTradablePrivate.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts/FantomArtTradablePrivate.sol:28"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts/FantomArtTradablePrivate.sol:31"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/FantomArtTradablePrivate.sol:33"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/FantomArtTradablePrivate.sol:34"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/FantomArtTradablePrivate.sol:37"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/FantomArtTradablePrivate.sol:39"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtTradablePrivate.sol:41"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtTradablePrivate.sol:43"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomArtTradablePrivate.sol:45"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomArtTradablePrivate.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Artion": {
        "src": "contracts/FantomArtion.sol:9",
        "version": {
          "withMetadata": "c80c541048cb1037d3695d8897823125fb4efac63351cfbef0bd972b9e178ed6",
          "withoutMetadata": "bbe75e04fac2b1d74f61d8873f2d2f23bbe343afd3f2e28c71015fbf71dc7950",
          "linkedWithoutMetadata": "bbe75e04fac2b1d74f61d8873f2d2f23bbe343afd3f2e28c71015fbf71dc7950"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable,uint256)",
          "mint(address,string)",
          "burn(uint256)",
          "exists(uint256)",
          "isApproved(uint256,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Artion",
            "src": "contracts/FantomArtion.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Artion",
              "label": "tokenIdPointer",
              "type": "t_uint256",
              "src": "contracts/FantomArtion.sol:26"
            },
            {
              "contract": "Artion",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/FantomArtion.sol:29"
            },
            {
              "contract": "Artion",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtion.sol:32"
            },
            {
              "contract": "Artion",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtion.sol:35"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuction": {
        "src": "contracts/FantomAuction.sol:55",
        "version": {
          "withMetadata": "680dd9418a3039b8fd27161ce68e40f9a54ed7d7974efdcd02efeb67f4d50f96",
          "withoutMetadata": "644663d63c2fc928180dce2c3bf2e3a84391bba64f4c954950be39a1799ac729",
          "linkedWithoutMetadata": "644663d63c2fc928180dce2c3bf2e3a84391bba64f4c954950be39a1799ac729"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable)",
          "createAuction(address,uint256,address,uint256,uint256,bool,uint256)",
          "placeBid(address,uint256)",
          "placeBid(address,uint256,uint256)",
          "withdrawBid(address,uint256)",
          "resultAuction(address,uint256)",
          "cancelAuction(address,uint256)",
          "toggleIsPaused()",
          "updateMinBidIncrement(uint256)",
          "updateBidWithdrawalLockTime(uint256)",
          "updateAuctionReservePrice(address,uint256,uint256)",
          "updateAuctionStartTime(address,uint256,uint256)",
          "updateAuctionEndTime(address,uint256,uint256)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "getAuction(address,uint256)",
          "getHighestBidder(address,uint256)",
          "reclaimERC20(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "minBidIncrement",
            "src": "contracts/FantomAuction.sol:156"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bidWithdrawalLockTime",
            "src": "contracts/FantomAuction.sol:159"
          },
          {
            "kind": "state-variable-assignment",
            "name": "platformFee",
            "src": "contracts/FantomAuction.sol:162"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuction",
              "label": "auctions",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6635_storage))",
              "src": "contracts/FantomAuction.sol:150"
            },
            {
              "contract": "FantomAuction",
              "label": "highestBids",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6642_storage))",
              "src": "contracts/FantomAuction.sol:153"
            },
            {
              "contract": "FantomAuction",
              "label": "minBidIncrement",
              "type": "t_uint256",
              "src": "contracts/FantomAuction.sol:156"
            },
            {
              "contract": "FantomAuction",
              "label": "bidWithdrawalLockTime",
              "type": "t_uint256",
              "src": "contracts/FantomAuction.sol:159"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomAuction.sol:162"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFeeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomAuction.sol:165"
            },
            {
              "contract": "FantomAuction",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)6442",
              "src": "contracts/FantomAuction.sol:168"
            },
            {
              "contract": "FantomAuction",
              "label": "isPaused",
              "type": "t_bool",
              "src": "contracts/FantomAuction.sol:171"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6635_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.Auction))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(Auction)6635_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.Auction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Auction)6635_storage": {
              "label": "struct FantomAuction.Auction",
              "members": [
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "minBid",
                  "type": "t_uint256"
                },
                {
                  "label": "reservePrice",
                  "type": "t_uint256"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256"
                },
                {
                  "label": "resulted",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6642_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.HighestBid))"
            },
            "t_mapping(t_uint256,t_struct(HighestBid)6642_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.HighestBid)"
            },
            "t_struct(HighestBid)6642_storage": {
              "label": "struct FantomAuction.HighestBid",
              "members": [
                {
                  "label": "bidder",
                  "type": "t_address_payable"
                },
                {
                  "label": "bid",
                  "type": "t_uint256"
                },
                {
                  "label": "lastBidTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)6442": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAddressRegistry": {
        "src": "contracts/FantomPriceFeed.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenRegistry()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomBundleMarketplace": {
        "src": "contracts/FantomMarketplace.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomMarketplace": {
        "src": "contracts/FantomBundleMarketplace.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,address,address)",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomTokenRegistry": {
        "src": "contracts/FantomPriceFeed.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enabled(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomBundleMarketplace": {
        "src": "contracts/FantomBundleMarketplace.sol:39",
        "version": {
          "withMetadata": "29f3c0f5fbe21197205e2892f5d0b681bb6c74093e365c200c8064107587c1a9",
          "withoutMetadata": "7860dbd10f3f96ed1c062acd20c3a5bb37880ee3dc52df6caa0920e329c333cd",
          "linkedWithoutMetadata": "7860dbd10f3f96ed1c062acd20c3a5bb37880ee3dc52df6caa0920e329c333cd"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20",
          "EnumerableSet"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "getListing(address,string)",
          "listItem(string,address[],uint256[],uint256[],address,uint256,uint256)",
          "cancelListing(string)",
          "updateListing(string,address,uint256)",
          "buyItem(string)",
          "buyItem(string,address)",
          "createOffer(string,address,uint256,uint256)",
          "cancelOffer(string)",
          "acceptOffer(string,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomBundleMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8539_storage))",
              "src": "contracts/FantomBundleMarketplace.sol:106"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "owners",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/FantomBundleMarketplace.sol:109"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIdsPerItem",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4376_storage))",
              "src": "contracts/FantomBundleMarketplace.sol:111"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "nftIndexes",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))",
              "src": "contracts/FantomBundleMarketplace.sol:113"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIds",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "src": "contracts/FantomBundleMarketplace.sol:115"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "offers",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8546_storage))",
              "src": "contracts/FantomBundleMarketplace.sol:118"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomBundleMarketplace.sol:121"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomBundleMarketplace.sol:124"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)8402",
              "src": "contracts/FantomBundleMarketplace.sol:127"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8539_storage))": {
              "label": "mapping(address => mapping(bytes32 => struct FantomBundleMarketplace.Listing))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_struct(Listing)8539_storage)": {
              "label": "mapping(bytes32 => struct FantomBundleMarketplace.Listing)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Listing)8539_storage": {
              "label": "struct FantomBundleMarketplace.Listing",
              "members": [
                {
                  "label": "nfts",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "tokenIds",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "quantities",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4376_storage))": {
              "label": "mapping(address => mapping(uint256 => struct EnumerableSet.Bytes32Set))"
            },
            "t_mapping(t_uint256,t_struct(Bytes32Set)4376_storage)": {
              "label": "mapping(uint256 => struct EnumerableSet.Bytes32Set)"
            },
            "t_struct(Bytes32Set)4376_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4196_storage"
                }
              ]
            },
            "t_struct(Set)4196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
              "label": "mapping(bytes32 => mapping(address => mapping(uint256 => uint256)))"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8546_storage))": {
              "label": "mapping(bytes32 => mapping(address => struct FantomBundleMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)8546_storage)": {
              "label": "mapping(address => struct FantomBundleMarketplace.Offer)"
            },
            "t_struct(Offer)8546_storage": {
              "label": "struct FantomBundleMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)8402": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomMarketplace": {
        "src": "contracts/FantomMarketplace.sol:71",
        "version": {
          "withMetadata": "ecbd8360e1f633c6eaafef4184de74c216e65d6467d35148f490ef547e898cfe",
          "withoutMetadata": "d8c8dc9698a645dc446106f7105b3c49b71649495bd1bab2909c3504c716eafe",
          "linkedWithoutMetadata": "d8c8dc9698a645dc446106f7105b3c49b71649495bd1bab2909c3504c716eafe"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable,uint16)",
          "listItem(address,uint256,uint256,address,uint256,uint256)",
          "cancelListing(address,uint256)",
          "updateListing(address,uint256,address,uint256)",
          "buyItem(address,uint256,address,address)",
          "createOffer(address,uint256,address,uint256,uint256,uint256)",
          "cancelOffer(address,uint256)",
          "acceptOffer(address,uint256,address)",
          "registerRoyalty(address,uint256,uint16)",
          "registerCollectionRoyalty(address,address,uint16,address)",
          "getPrice(address)",
          "updatePlatformFee(uint16)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomMarketplace",
              "label": "minters",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
              "src": "contracts/FantomMarketplace.sol:151"
            },
            {
              "contract": "FantomMarketplace",
              "label": "royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint16))",
              "src": "contracts/FantomMarketplace.sol:154"
            },
            {
              "contract": "FantomMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10743_storage)))",
              "src": "contracts/FantomMarketplace.sol:157"
            },
            {
              "contract": "FantomMarketplace",
              "label": "offers",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10752_storage)))",
              "src": "contracts/FantomMarketplace.sol:161"
            },
            {
              "contract": "FantomMarketplace",
              "label": "platformFee",
              "type": "t_uint16",
              "src": "contracts/FantomMarketplace.sol:165"
            },
            {
              "contract": "FantomMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomMarketplace.sol:168"
            },
            {
              "contract": "FantomMarketplace",
              "label": "collectionRoyalties",
              "type": "t_mapping(t_address,t_struct(CollectionRoyalty)10759_storage)",
              "src": "contracts/FantomMarketplace.sol:171"
            },
            {
              "contract": "FantomMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)10573",
              "src": "contracts/FantomMarketplace.sol:174"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
              "label": "mapping(address => mapping(uint256 => address))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint16))": {
              "label": "mapping(address => mapping(uint256 => uint16))"
            },
            "t_mapping(t_uint256,t_uint16)": {
              "label": "mapping(uint256 => uint16)"
            },
            "t_uint16": {
              "label": "uint16"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10743_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Listing)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10743_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Listing))"
            },
            "t_mapping(t_address,t_struct(Listing)10743_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Listing)"
            },
            "t_struct(Listing)10743_storage": {
              "label": "struct FantomMarketplace.Listing",
              "members": [
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10752_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Offer)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10752_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)10752_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Offer)"
            },
            "t_struct(Offer)10752_storage": {
              "label": "struct FantomMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_struct(CollectionRoyalty)10759_storage)": {
              "label": "mapping(address => struct FantomMarketplace.CollectionRoyalty)"
            },
            "t_struct(CollectionRoyalty)10759_storage": {
              "label": "struct FantomMarketplace.CollectionRoyalty",
              "members": [
                {
                  "label": "royalty",
                  "type": "t_uint16"
                },
                {
                  "label": "creator",
                  "type": "t_address"
                },
                {
                  "label": "feeRecipient",
                  "type": "t_address"
                }
              ]
            },
            "t_contract(IFantomAddressRegistry)10573": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAuction": {
        "src": "contracts/FantomMarketplace.sol:35",
        "inherit": [],
        "libraries": [],
        "methods": [
          "auctions(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomNFTFactory": {
        "src": "contracts/FantomMarketplace.sol:57",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exists(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomPriceFeed": {
        "src": "contracts/FantomMarketplace.sol:65",
        "inherit": [],
        "libraries": [],
        "methods": [
          "wFTM()",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactory": {
        "src": "contracts/FantomNFTFactory.sol:8",
        "version": {
          "withMetadata": "3d32c9f4e9893ee773e71525bb7924fc900fbb93e2b8ffbdca620d69542125f0",
          "withoutMetadata": "765cb3ecd3c2c1f5af1255fe88c1d8e71e929ddbab2767cbf8ab2b7cd6a3f020",
          "linkedWithoutMetadata": "765cb3ecd3c2c1f5af1255fe88c1d8e71e929ddbab2767cbf8ab2b7cd6a3f020"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactory",
            "src": "contracts/FantomNFTFactory.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactory",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomNFTFactory.sol:14"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTFactory.sol:17"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTFactory.sol:20"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTFactory.sol:23"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTFactory.sol:26"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomNFTFactory.sol:29"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomNFTFactory.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactoryPrivate": {
        "src": "contracts/FantomNFTFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "3da65c0cc001e1b40ff35be7506f81659d8d7619dd8da8bdda7ef4c8beb5c8d0",
          "withoutMetadata": "9a461fe6e36db2875cbc9d6832f5c87cbb4fab145706f67e5b1c4ba20fac3c2f",
          "linkedWithoutMetadata": "9a461fe6e36db2875cbc9d6832f5c87cbb4fab145706f67e5b1c4ba20fac3c2f"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactoryPrivate",
            "src": "contracts/FantomNFTFactoryPrivate.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomNFTFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomNFTFactoryPrivate.sol:29"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomNFTFactoryPrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradable": {
        "src": "contracts/FantomNFTTradable.sol:12",
        "version": {
          "withMetadata": "6ae9b60afebe02822d243987adc14bc595f17e36bd4805eec5113e8f97291854",
          "withoutMetadata": "0ebd906133d9405cb4fe84f0e78f37fe84bdf36a7500c108b1bb10d99102166e",
          "linkedWithoutMetadata": "0ebd906133d9405cb4fe84f0e78f37fe84bdf36a7500c108b1bb10d99102166e"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradable",
            "src": "contracts/FantomNFTTradable.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts/FantomNFTTradable.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradable",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomNFTTradable.sol:27"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTTradable.sol:28"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTTradable.sol:29"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts/FantomNFTTradable.sol:30"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTTradable.sol:33"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomNFTTradable.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradablePrivate": {
        "src": "contracts/FantomNFTTradablePrivate.sol:12",
        "version": {
          "withMetadata": "9040c9c7f3876f38933c162d3e655412f54d6ae83e9a6d720a26c209dd9454ad",
          "withoutMetadata": "e14c1419ada91d47d0982cdb940d0e3c385c5e6aed7cd561b5870897fc9ccd46",
          "linkedWithoutMetadata": "e14c1419ada91d47d0982cdb940d0e3c385c5e6aed7cd561b5870897fc9ccd46"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradablePrivate",
            "src": "contracts/FantomNFTTradablePrivate.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts/FantomNFTTradablePrivate.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomNFTTradablePrivate.sol:27"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTTradablePrivate.sol:28"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTTradablePrivate.sol:29"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts/FantomNFTTradablePrivate.sol:30"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTTradablePrivate.sol:33"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomNFTTradablePrivate.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomPriceFeed": {
        "src": "contracts/FantomPriceFeed.sol:21",
        "version": {
          "withMetadata": "af605438c22fa5564a75d491d7c92533ffbecee3e5c5afa3d6959cc64d7fcdf2",
          "withoutMetadata": "a9e82cc54a14fd3bc58dbaa79b4045b14b4c9b290321beb8d121cfd1e034c6b7",
          "linkedWithoutMetadata": "a9e82cc54a14fd3bc58dbaa79b4045b14b4c9b290321beb8d121cfd1e034c6b7"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerOracle(address,address)",
          "updateOracle(address,address)",
          "getPrice(address)",
          "updateAddressRegistry(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomPriceFeed",
            "src": "contracts/FantomPriceFeed.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomPriceFeed",
              "label": "oracles",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FantomPriceFeed.sol:23"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "addressRegistry",
              "type": "t_address",
              "src": "contracts/FantomPriceFeed.sol:26"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "wFTM",
              "type": "t_address",
              "src": "contracts/FantomPriceFeed.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IOracle": {
        "src": "contracts/FantomPriceFeed.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestAnswer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomTokenRegistry": {
        "src": "contracts/FantomTokenRegistry.sol:7",
        "version": {
          "withMetadata": "0e477047e964af6bd542425ce348f4b48ab40344e00e3a767e8f9b66b360e68f",
          "withoutMetadata": "8d79c556bc9bb807b68178115ba5454cbf257f09ac10f8108786804cc2b2ce86",
          "linkedWithoutMetadata": "8d79c556bc9bb807b68178115ba5454cbf257f09ac10f8108786804cc2b2ce86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "add(address)",
          "remove(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomTokenRegistry",
              "label": "enabled",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomTokenRegistry.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155": {
        "src": "contracts/library/ERC1155.sol:11",
        "version": {
          "withMetadata": "cbc126418da9582c4b2faca449feca9c12d7510ca9a904e3826f2d1c8a076490",
          "withoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c",
          "linkedWithoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c"
        },
        "inherit": [
          "IERC165"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155",
              "label": "balances",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/library/ERC1155.sol:25"
            },
            {
              "contract": "ERC1155",
              "label": "operators",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts/library/ERC1155.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155Metadata": {
        "src": "contracts/library/ERC1155Metadata.sol:9",
        "version": {
          "withMetadata": "94aac9ad7d8415f3fcb755d64229ec7fcd33f0e875681e0258d75c1a5ce5f44f",
          "withoutMetadata": "e6daebc392a1105a55ecdc42deea5d1e0d27078a64ec91c306dbb0b833545021",
          "linkedWithoutMetadata": "e6daebc392a1105a55ecdc42deea5d1e0d27078a64ec91c306dbb0b833545021"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155Metadata",
              "label": "baseMetadataURI",
              "type": "t_string_storage",
              "src": "contracts/library/ERC1155Metadata.sol:12"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155MintBurn": {
        "src": "contracts/library/ERC1155MintBurn.sol:9",
        "version": {
          "withMetadata": "aefa6d236acc23d09c041a03bcccf41d167cad4c19e9308d4d2b357288873ecf",
          "withoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c",
          "linkedWithoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c"
        },
        "inherit": [
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155TokenReceiver": {
        "src": "contracts/library/IERC1155TokenReceiver.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BiddingContractMock": {
        "src": "contracts/mock/BiddingContractMock.sol:7",
        "version": {
          "withMetadata": "737048d717c39f0d9669a6a4b2ba7c142c8fc1df3f93cb613635064226c827b8",
          "withoutMetadata": "bb0412333928df554dd3ad72cd3a6e7881eb495118185c1adbf9bb85451157a0",
          "linkedWithoutMetadata": "bb0412333928df554dd3ad72cd3a6e7881eb495118185c1adbf9bb85451157a0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "bid(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BiddingContractMock",
            "src": "contracts/mock/BiddingContractMock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BiddingContractMock",
              "label": "auctionContract",
              "type": "t_contract(FantomAuction)8374",
              "src": "contracts/mock/BiddingContractMock.sol:8"
            }
          ],
          "types": {
            "t_contract(FantomAuction)8374": {
              "label": "contract FantomAuction"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuctionMock": {
        "src": "contracts/mock/FantomAuctionMock.sol:7",
        "version": {
          "withMetadata": "d0a4719912568c57fc08efd3c2bacd6bc3dfa1aa8596981cdfaf2261555afeb9",
          "withoutMetadata": "70fe49cb82152c83e5a756b3f483b7104b22541d78dd0bd4bcf114a9bdf2d822",
          "linkedWithoutMetadata": "70fe49cb82152c83e5a756b3f483b7104b22541d78dd0bd4bcf114a9bdf2d822"
        },
        "inherit": [
          "FantomAuction",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "setNowOverride(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuctionMock",
              "label": "nowOverride",
              "type": "t_uint256",
              "src": "contracts/mock/FantomAuctionMock.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts/mock/MockERC20.sol:7",
        "version": {
          "withMetadata": "9d333d6c892c8452c229962e238814161263bc21530c89efd5214cf2aca2caf3",
          "withoutMetadata": "fdf7012d757f3885a979b8d5e8de23eaa8f27d3d57b8b133ad305739a8277957",
          "linkedWithoutMetadata": "fdf7012d757f3885a979b8d5e8de23eaa8f27d3d57b8b133ad305739a8277957"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/mock/MockERC20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeabilityProxy": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:340",
        "version": {
          "withMetadata": "d8ed75f6e9cd9e5acef8cfd1f5645768c1773fbfcecc1a30db2162abda5bbb76",
          "withoutMetadata": "d8ed75f6e9cd9e5acef8cfd1f5645768c1773fbfcecc1a30db2162abda5bbb76",
          "linkedWithoutMetadata": "d8ed75f6e9cd9e5acef8cfd1f5645768c1773fbfcecc1a30db2162abda5bbb76"
        },
        "inherit": [
          "UpgradeabilityProxy",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AdminUpgradeabilityProxy",
            "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:350"
          },
          {
            "kind": "delegatecall",
            "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:428"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:46",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UpgradeabilityProxy": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:264",
        "version": {
          "withMetadata": "51a56cc80b90e509dd4b0fc5bde154cc8d3300781d16fb91b3650aacad8af820",
          "withoutMetadata": "51a56cc80b90e509dd4b0fc5bde154cc8d3300781d16fb91b3650aacad8af820",
          "linkedWithoutMetadata": "51a56cc80b90e509dd4b0fc5bde154cc8d3300781d16fb91b3650aacad8af820"
        },
        "inherit": [
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeabilityProxy",
            "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:273"
          },
          {
            "kind": "delegatecall",
            "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:277"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyAdmin": {
        "src": "contracts/proxy/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "c0e9d1c0134ca2126a6ed1f5ff439a84674b9be10e8b17a3db1e93864715b20b",
          "withoutMetadata": "ed1aee2f0dae262982d214e10fdee51b42af8a6317158eebffb1d3b96186cd72",
          "linkedWithoutMetadata": "ed1aee2f0dae262982d214e10fdee51b42af8a6317158eebffb1d3b96186cd72"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "@openzeppelin/contracts/math/SafeMath.sol:18",
        "version": {
          "withMetadata": "12f8b63975cec359166dc714be4e684b4fcf7c0497b2176e313e78b0f08171f8",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "dd15e04a1561397fbc7c3ae3ad394763be5dadec2c60082138bbf64746f457f8",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/introspection/ERC165.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165",
            "src": "@openzeppelin/contracts/introspection/ERC165.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC165",
              "label": "_supportedInterfaces",
              "type": "t_mapping(t_bytes4,t_bool)",
              "src": "@openzeppelin/contracts/introspection/ERC165.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "contracts/library/IERC165.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155": {
        "src": "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "5385d8f9a2a6008fecc420942e644bf860ccc5a0a87536e3a478b41bdad43db8",
          "withoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393",
          "linkedWithoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol:18",
        "version": {
          "withMetadata": "ac490452d006a298fecb47eab43f8b56fc24a8af6c1e9589be882f66b71dcf29",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:21",
        "version": {
          "withMetadata": "1263ec9c299b38623bf2ed229b22524a9cd8778d2d7177950a88882c93ac2d47",
          "withoutMetadata": "3b9603e3ba8de701bdbd85fd5e78921e81db89f785601570458c066456264033",
          "linkedWithoutMetadata": "3b9603e3ba8de701bdbd85fd5e78921e81db89f785601570458c066456264033"
        },
        "inherit": [
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address",
          "EnumerableSet",
          "EnumerableMap",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "baseURI()",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:93"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_holderTokens",
              "type": "t_mapping(t_address,t_struct(UintSet)4604_storage)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenOwners",
              "type": "t_struct(UintToAddressMap)3981_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:42"
            },
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:45"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:48"
            },
            {
              "contract": "ERC721",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:51"
            },
            {
              "contract": "ERC721",
              "label": "_baseURI",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(UintSet)4604_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UintSet)4604_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4218_storage"
                }
              ]
            },
            "t_struct(Set)4218_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(UintToAddressMap)3981_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)3663_storage"
                }
              ]
            },
            "t_struct(Map)3663_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)3655_storage)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_struct(MapEntry)3655_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]"
            },
            "t_struct(MapEntry)3655_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:84",
        "version": {
          "withMetadata": "861187ebdd0428fe37a2932c86e59daf006ce793a28836e8deb6a71b08fc1f05",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableMap": {
        "src": "@openzeppelin/contracts/utils/EnumerableMap.sol:29",
        "version": {
          "withMetadata": "73725cbf9d2d1b2137d29a8a838af6227094ea37e1f8d67c6e200e7ab9da7ddd",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "93c63380dd1aced02757debdc25c8b6a733c4d4148ef735e290102573c76ca93",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "943f736564e78cbe4b2ebc37a12345bea28446ff07a76171b7a8cb7eb81c3c06",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomAddressRegistry": {
        "src": "contracts/FantomAddressRegistry.sol:8",
        "version": {
          "withMetadata": "08d01ea95bd4bce9b83815f7a2bd1d318eeda3aa1f61d89841dd516d7c40bd1d",
          "withoutMetadata": "b8b02879464d53b43faa6a13553775a50f3ff1f589f7790ee632b882717bb59f",
          "linkedWithoutMetadata": "b8b02879464d53b43faa6a13553775a50f3ff1f589f7790ee632b882717bb59f"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "updateArtion(address)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateNFTFactory(address)",
          "updateNFTFactoryPrivate(address)",
          "updateArtFactory(address)",
          "updateArtFactoryPrivate(address)",
          "updateTokenRegistry(address)",
          "updatePriceFeed(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAddressRegistry",
              "label": "artion",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:12"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:15"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:18"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:21"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:24"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateFactory",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:27"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "artFactory",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:30"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateArtFactory",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:33"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "tokenRegistry",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:36"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "priceFeed",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactory": {
        "src": "contracts/FantomArtFactory.sol:8",
        "version": {
          "withMetadata": "b180a0f83d946c286eb25e4170caf8e15959da6906f4bd9a9bdfb954923f304e",
          "withoutMetadata": "d91ba6feb2c5e2a1621a47214411c415562edcf4c70397c70d0a8554cb0a76c8",
          "linkedWithoutMetadata": "d91ba6feb2c5e2a1621a47214411c415562edcf4c70397c70d0a8554cb0a76c8"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactory",
            "src": "contracts/FantomArtFactory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomArtFactory.sol:14"
            },
            {
              "contract": "FantomArtFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomArtFactory.sol:17"
            },
            {
              "contract": "FantomArtFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtFactory.sol:20"
            },
            {
              "contract": "FantomArtFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtFactory.sol:23"
            },
            {
              "contract": "FantomArtFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtFactory.sol:26"
            },
            {
              "contract": "FantomArtFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomArtFactory.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactoryPrivate": {
        "src": "contracts/FantomArtFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "a1ebabe5958d7e1d039451b07027cd4d1a646a03f97e54930c1f5a2ba5a0f871",
          "withoutMetadata": "9e8fd85c46a0daf57704ad03228cb7ad9dab516f6da15c57f219fe8424d5397a",
          "linkedWithoutMetadata": "9e8fd85c46a0daf57704ad03228cb7ad9dab516f6da15c57f219fe8424d5397a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactoryPrivate",
            "src": "contracts/FantomArtFactoryPrivate.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomArtFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomArtFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomArtFactoryPrivate.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradable": {
        "src": "contracts/FantomArtTradable.sol:22",
        "version": {
          "withMetadata": "89ab3d9bef79e820479614d3c39528a55b35547734c740b658fa894d53712d6e",
          "withoutMetadata": "f33b5082790284cfcfe598c9b5f69a0ce350cda1bd7a36032d7877bbb65b2b8b",
          "linkedWithoutMetadata": "f33b5082790284cfcfe598c9b5f69a0ce350cda1bd7a36032d7877bbb65b2b8b"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradable",
            "src": "contracts/FantomArtTradable.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts/FantomArtTradable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradable",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts/FantomArtTradable.sol:28"
            },
            {
              "contract": "FantomArtTradable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts/FantomArtTradable.sol:31"
            },
            {
              "contract": "FantomArtTradable",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/FantomArtTradable.sol:33"
            },
            {
              "contract": "FantomArtTradable",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/FantomArtTradable.sol:34"
            },
            {
              "contract": "FantomArtTradable",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/FantomArtTradable.sol:37"
            },
            {
              "contract": "FantomArtTradable",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/FantomArtTradable.sol:39"
            },
            {
              "contract": "FantomArtTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtTradable.sol:41"
            },
            {
              "contract": "FantomArtTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtTradable.sol:43"
            },
            {
              "contract": "FantomArtTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomArtTradable.sol:45"
            },
            {
              "contract": "FantomArtTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomArtTradable.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "OwnableDelegateProxy": {
        "src": "contracts/FantomArtTradablePrivate.sol:10",
        "version": {
          "withMetadata": "bb1be473f50c2f9721395c22b7a85032e76e00f6f576eb236340fcef2e607c31",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyRegistry": {
        "src": "contracts/FantomArtTradablePrivate.sol:12",
        "version": {
          "withMetadata": "4572fbbd2d99afdb44745f040c90d5001f95e3073be1fd406cca815eb5271fc7",
          "withoutMetadata": "aa5f7868673867df9c21749320a6e16e4ca5f9990a18e1a55b0cff496ccd615d",
          "linkedWithoutMetadata": "aa5f7868673867df9c21749320a6e16e4ca5f9990a18e1a55b0cff496ccd615d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ProxyRegistry",
              "label": "proxies",
              "type": "t_mapping(t_address,t_contract(OwnableDelegateProxy)5848)",
              "src": "contracts/FantomArtTradablePrivate.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_contract(OwnableDelegateProxy)5848)": {
              "label": "mapping(address => contract OwnableDelegateProxy)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(OwnableDelegateProxy)5848": {
              "label": "contract OwnableDelegateProxy"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradablePrivate": {
        "src": "contracts/FantomArtTradablePrivate.sol:22",
        "version": {
          "withMetadata": "4253c03f4e720489c387756ae17f5b7330bba39d48df4dd6a043737956411a76",
          "withoutMetadata": "fdea5c874e471cd342851d70953bc34544f3144ebc53c9d7992b435f3b02e5a9",
          "linkedWithoutMetadata": "fdea5c874e471cd342851d70953bc34544f3144ebc53c9d7992b435f3b02e5a9"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradablePrivate",
            "src": "contracts/FantomArtTradablePrivate.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts/FantomArtTradablePrivate.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts/FantomArtTradablePrivate.sol:28"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts/FantomArtTradablePrivate.sol:31"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/FantomArtTradablePrivate.sol:33"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/FantomArtTradablePrivate.sol:34"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/FantomArtTradablePrivate.sol:37"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/FantomArtTradablePrivate.sol:39"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtTradablePrivate.sol:41"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtTradablePrivate.sol:43"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomArtTradablePrivate.sol:45"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomArtTradablePrivate.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Artion": {
        "src": "contracts/FantomArtion.sol:9",
        "version": {
          "withMetadata": "85ec3f7750633773b2ecdbaaea042061bce3d27e24477072ece6257a0e20cc3f",
          "withoutMetadata": "c7781e9281a75bfb606f9859098482b2385eb20c5bdc7c98ff2a8b56ff11f70e",
          "linkedWithoutMetadata": "c7781e9281a75bfb606f9859098482b2385eb20c5bdc7c98ff2a8b56ff11f70e"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable,uint256)",
          "mint(address,string)",
          "burn(uint256)",
          "exists(uint256)",
          "isApproved(uint256,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Artion",
            "src": "contracts/FantomArtion.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Artion",
              "label": "tokenIdPointer",
              "type": "t_uint256",
              "src": "contracts/FantomArtion.sol:26"
            },
            {
              "contract": "Artion",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/FantomArtion.sol:29"
            },
            {
              "contract": "Artion",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtion.sol:32"
            },
            {
              "contract": "Artion",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtion.sol:35"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuction": {
        "src": "contracts/FantomAuction.sol:55",
        "version": {
          "withMetadata": "add5ebe8090f84e020eb0f2f8d27a475aefafd43556f7773a04f4dedfead960a",
          "withoutMetadata": "644663d63c2fc928180dce2c3bf2e3a84391bba64f4c954950be39a1799ac729",
          "linkedWithoutMetadata": "644663d63c2fc928180dce2c3bf2e3a84391bba64f4c954950be39a1799ac729"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable)",
          "createAuction(address,uint256,address,uint256,uint256,bool,uint256)",
          "placeBid(address,uint256)",
          "placeBid(address,uint256,uint256)",
          "withdrawBid(address,uint256)",
          "resultAuction(address,uint256)",
          "cancelAuction(address,uint256)",
          "toggleIsPaused()",
          "updateMinBidIncrement(uint256)",
          "updateBidWithdrawalLockTime(uint256)",
          "updateAuctionReservePrice(address,uint256,uint256)",
          "updateAuctionStartTime(address,uint256,uint256)",
          "updateAuctionEndTime(address,uint256,uint256)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "getAuction(address,uint256)",
          "getHighestBidder(address,uint256)",
          "reclaimERC20(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "minBidIncrement",
            "src": "contracts/FantomAuction.sol:156"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bidWithdrawalLockTime",
            "src": "contracts/FantomAuction.sol:159"
          },
          {
            "kind": "state-variable-assignment",
            "name": "platformFee",
            "src": "contracts/FantomAuction.sol:162"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuction",
              "label": "auctions",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6657_storage))",
              "src": "contracts/FantomAuction.sol:150"
            },
            {
              "contract": "FantomAuction",
              "label": "highestBids",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6664_storage))",
              "src": "contracts/FantomAuction.sol:153"
            },
            {
              "contract": "FantomAuction",
              "label": "minBidIncrement",
              "type": "t_uint256",
              "src": "contracts/FantomAuction.sol:156"
            },
            {
              "contract": "FantomAuction",
              "label": "bidWithdrawalLockTime",
              "type": "t_uint256",
              "src": "contracts/FantomAuction.sol:159"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomAuction.sol:162"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFeeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomAuction.sol:165"
            },
            {
              "contract": "FantomAuction",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)6464",
              "src": "contracts/FantomAuction.sol:168"
            },
            {
              "contract": "FantomAuction",
              "label": "isPaused",
              "type": "t_bool",
              "src": "contracts/FantomAuction.sol:171"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6657_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.Auction))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(Auction)6657_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.Auction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Auction)6657_storage": {
              "label": "struct FantomAuction.Auction",
              "members": [
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "minBid",
                  "type": "t_uint256"
                },
                {
                  "label": "reservePrice",
                  "type": "t_uint256"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256"
                },
                {
                  "label": "resulted",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6664_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.HighestBid))"
            },
            "t_mapping(t_uint256,t_struct(HighestBid)6664_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.HighestBid)"
            },
            "t_struct(HighestBid)6664_storage": {
              "label": "struct FantomAuction.HighestBid",
              "members": [
                {
                  "label": "bidder",
                  "type": "t_address_payable"
                },
                {
                  "label": "bid",
                  "type": "t_uint256"
                },
                {
                  "label": "lastBidTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)6464": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAddressRegistry": {
        "src": "contracts/FantomPriceFeed.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenRegistry()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomBundleMarketplace": {
        "src": "contracts/FantomMarketplace.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomMarketplace": {
        "src": "contracts/FantomBundleMarketplace.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,address,address)",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomTokenRegistry": {
        "src": "contracts/FantomPriceFeed.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enabled(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomBundleMarketplace": {
        "src": "contracts/FantomBundleMarketplace.sol:39",
        "version": {
          "withMetadata": "5252f0ceddb373a16bc643841a12bd5f53aea1edd92c92ee24e01b36ec43b018",
          "withoutMetadata": "502f551b2fe6abf60d80cb7297a245f718e2b638dd364e32410507ea23faab1b",
          "linkedWithoutMetadata": "502f551b2fe6abf60d80cb7297a245f718e2b638dd364e32410507ea23faab1b"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20",
          "EnumerableSet"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "getListing(address,string)",
          "listItem(string,address[],uint256[],uint256[],address,uint256,uint256)",
          "cancelListing(string)",
          "updateListing(string,address,uint256)",
          "buyItem(string)",
          "buyItem(string,address)",
          "createOffer(string,address,uint256,uint256)",
          "cancelOffer(string)",
          "acceptOffer(string,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomBundleMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8561_storage))",
              "src": "contracts/FantomBundleMarketplace.sol:106"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "owners",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/FantomBundleMarketplace.sol:109"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIdsPerItem",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4398_storage))",
              "src": "contracts/FantomBundleMarketplace.sol:111"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "nftIndexes",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))",
              "src": "contracts/FantomBundleMarketplace.sol:113"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIds",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "src": "contracts/FantomBundleMarketplace.sol:115"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "offers",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8568_storage))",
              "src": "contracts/FantomBundleMarketplace.sol:118"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomBundleMarketplace.sol:121"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomBundleMarketplace.sol:124"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)8424",
              "src": "contracts/FantomBundleMarketplace.sol:127"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8561_storage))": {
              "label": "mapping(address => mapping(bytes32 => struct FantomBundleMarketplace.Listing))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_struct(Listing)8561_storage)": {
              "label": "mapping(bytes32 => struct FantomBundleMarketplace.Listing)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Listing)8561_storage": {
              "label": "struct FantomBundleMarketplace.Listing",
              "members": [
                {
                  "label": "nfts",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "tokenIds",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "quantities",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4398_storage))": {
              "label": "mapping(address => mapping(uint256 => struct EnumerableSet.Bytes32Set))"
            },
            "t_mapping(t_uint256,t_struct(Bytes32Set)4398_storage)": {
              "label": "mapping(uint256 => struct EnumerableSet.Bytes32Set)"
            },
            "t_struct(Bytes32Set)4398_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4218_storage"
                }
              ]
            },
            "t_struct(Set)4218_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
              "label": "mapping(bytes32 => mapping(address => mapping(uint256 => uint256)))"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8568_storage))": {
              "label": "mapping(bytes32 => mapping(address => struct FantomBundleMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)8568_storage)": {
              "label": "mapping(address => struct FantomBundleMarketplace.Offer)"
            },
            "t_struct(Offer)8568_storage": {
              "label": "struct FantomBundleMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)8424": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomMarketplace": {
        "src": "contracts/FantomMarketplace.sol:71",
        "version": {
          "withMetadata": "92ca32800d34ce6f60d0abe42618cfb5733fac6ae2ab1d01eeed60418e4789da",
          "withoutMetadata": "4e364af37af1744caf6985a4cfa41fee3731eaa02c06535aba79b3619959167c",
          "linkedWithoutMetadata": "4e364af37af1744caf6985a4cfa41fee3731eaa02c06535aba79b3619959167c"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable,uint16)",
          "listItem(address,uint256,uint256,address,uint256,uint256)",
          "cancelListing(address,uint256)",
          "updateListing(address,uint256,address,uint256)",
          "buyItem(address,uint256,address,address)",
          "createOffer(address,uint256,address,uint256,uint256,uint256)",
          "cancelOffer(address,uint256)",
          "acceptOffer(address,uint256,address)",
          "registerRoyalty(address,uint256,uint16)",
          "registerCollectionRoyalty(address,address,uint16,address)",
          "getPrice(address)",
          "updatePlatformFee(uint16)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomMarketplace",
              "label": "minters",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
              "src": "contracts/FantomMarketplace.sol:151"
            },
            {
              "contract": "FantomMarketplace",
              "label": "royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint16))",
              "src": "contracts/FantomMarketplace.sol:154"
            },
            {
              "contract": "FantomMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10765_storage)))",
              "src": "contracts/FantomMarketplace.sol:157"
            },
            {
              "contract": "FantomMarketplace",
              "label": "offers",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10774_storage)))",
              "src": "contracts/FantomMarketplace.sol:161"
            },
            {
              "contract": "FantomMarketplace",
              "label": "platformFee",
              "type": "t_uint16",
              "src": "contracts/FantomMarketplace.sol:165"
            },
            {
              "contract": "FantomMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomMarketplace.sol:168"
            },
            {
              "contract": "FantomMarketplace",
              "label": "collectionRoyalties",
              "type": "t_mapping(t_address,t_struct(CollectionRoyalty)10781_storage)",
              "src": "contracts/FantomMarketplace.sol:171"
            },
            {
              "contract": "FantomMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)10595",
              "src": "contracts/FantomMarketplace.sol:174"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
              "label": "mapping(address => mapping(uint256 => address))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint16))": {
              "label": "mapping(address => mapping(uint256 => uint16))"
            },
            "t_mapping(t_uint256,t_uint16)": {
              "label": "mapping(uint256 => uint16)"
            },
            "t_uint16": {
              "label": "uint16"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10765_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Listing)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10765_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Listing))"
            },
            "t_mapping(t_address,t_struct(Listing)10765_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Listing)"
            },
            "t_struct(Listing)10765_storage": {
              "label": "struct FantomMarketplace.Listing",
              "members": [
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10774_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Offer)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10774_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)10774_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Offer)"
            },
            "t_struct(Offer)10774_storage": {
              "label": "struct FantomMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_struct(CollectionRoyalty)10781_storage)": {
              "label": "mapping(address => struct FantomMarketplace.CollectionRoyalty)"
            },
            "t_struct(CollectionRoyalty)10781_storage": {
              "label": "struct FantomMarketplace.CollectionRoyalty",
              "members": [
                {
                  "label": "royalty",
                  "type": "t_uint16"
                },
                {
                  "label": "creator",
                  "type": "t_address"
                },
                {
                  "label": "feeRecipient",
                  "type": "t_address"
                }
              ]
            },
            "t_contract(IFantomAddressRegistry)10595": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAuction": {
        "src": "contracts/FantomMarketplace.sol:35",
        "inherit": [],
        "libraries": [],
        "methods": [
          "auctions(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomNFTFactory": {
        "src": "contracts/FantomMarketplace.sol:57",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exists(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomPriceFeed": {
        "src": "contracts/FantomMarketplace.sol:65",
        "inherit": [],
        "libraries": [],
        "methods": [
          "wFTM()",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactory": {
        "src": "contracts/FantomNFTFactory.sol:8",
        "version": {
          "withMetadata": "481e818000c364c5003ba0eee7aed5533bbe637fced980520d2bbe7449ef12bc",
          "withoutMetadata": "7bb39be5cd6df143cfff9a48ef3894cc7a5429862584570c69b1a32ec8116ba8",
          "linkedWithoutMetadata": "7bb39be5cd6df143cfff9a48ef3894cc7a5429862584570c69b1a32ec8116ba8"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactory",
            "src": "contracts/FantomNFTFactory.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactory",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomNFTFactory.sol:14"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTFactory.sol:17"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTFactory.sol:20"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTFactory.sol:23"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTFactory.sol:26"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomNFTFactory.sol:29"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomNFTFactory.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactoryPrivate": {
        "src": "contracts/FantomNFTFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "35c7efaa3d753c2e69bed570cfdb647c79fbfaf449ccef5d4cc8e35e59dc56ee",
          "withoutMetadata": "06f7f0f3413b88ee1819dd8997745065b35886985ada8bbaaf9c4cb14062447a",
          "linkedWithoutMetadata": "06f7f0f3413b88ee1819dd8997745065b35886985ada8bbaaf9c4cb14062447a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactoryPrivate",
            "src": "contracts/FantomNFTFactoryPrivate.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomNFTFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomNFTFactoryPrivate.sol:29"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomNFTFactoryPrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradable": {
        "src": "contracts/FantomNFTTradable.sol:12",
        "version": {
          "withMetadata": "ac952cf948fe0d19417a49de614ad95f178af1f308b0cac9721ab5f85af6fc21",
          "withoutMetadata": "b715fc2696419c35653e85f48809a39e29cce31ebdd023855f0f9b84bfb96f4b",
          "linkedWithoutMetadata": "b715fc2696419c35653e85f48809a39e29cce31ebdd023855f0f9b84bfb96f4b"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradable",
            "src": "contracts/FantomNFTTradable.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts/FantomNFTTradable.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradable",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomNFTTradable.sol:27"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTTradable.sol:28"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTTradable.sol:29"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts/FantomNFTTradable.sol:30"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTTradable.sol:33"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomNFTTradable.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradablePrivate": {
        "src": "contracts/FantomNFTTradablePrivate.sol:12",
        "version": {
          "withMetadata": "9535dff16137b960889223fba59e43eadb12d449b04e0148da0a5a8c90d00aa4",
          "withoutMetadata": "961408c66908a1ebfa2cdf7158b1c8a10ea70a213cf353d662b9ffea3b5d64e9",
          "linkedWithoutMetadata": "961408c66908a1ebfa2cdf7158b1c8a10ea70a213cf353d662b9ffea3b5d64e9"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradablePrivate",
            "src": "contracts/FantomNFTTradablePrivate.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts/FantomNFTTradablePrivate.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomNFTTradablePrivate.sol:27"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTTradablePrivate.sol:28"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTTradablePrivate.sol:29"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts/FantomNFTTradablePrivate.sol:30"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTTradablePrivate.sol:33"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomNFTTradablePrivate.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomPriceFeed": {
        "src": "contracts/FantomPriceFeed.sol:21",
        "version": {
          "withMetadata": "af605438c22fa5564a75d491d7c92533ffbecee3e5c5afa3d6959cc64d7fcdf2",
          "withoutMetadata": "a9e82cc54a14fd3bc58dbaa79b4045b14b4c9b290321beb8d121cfd1e034c6b7",
          "linkedWithoutMetadata": "a9e82cc54a14fd3bc58dbaa79b4045b14b4c9b290321beb8d121cfd1e034c6b7"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerOracle(address,address)",
          "updateOracle(address,address)",
          "getPrice(address)",
          "updateAddressRegistry(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomPriceFeed",
            "src": "contracts/FantomPriceFeed.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomPriceFeed",
              "label": "oracles",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FantomPriceFeed.sol:23"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "addressRegistry",
              "type": "t_address",
              "src": "contracts/FantomPriceFeed.sol:26"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "wFTM",
              "type": "t_address",
              "src": "contracts/FantomPriceFeed.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IOracle": {
        "src": "contracts/FantomPriceFeed.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestAnswer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomTokenRegistry": {
        "src": "contracts/FantomTokenRegistry.sol:7",
        "version": {
          "withMetadata": "0e477047e964af6bd542425ce348f4b48ab40344e00e3a767e8f9b66b360e68f",
          "withoutMetadata": "8d79c556bc9bb807b68178115ba5454cbf257f09ac10f8108786804cc2b2ce86",
          "linkedWithoutMetadata": "8d79c556bc9bb807b68178115ba5454cbf257f09ac10f8108786804cc2b2ce86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "add(address)",
          "remove(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomTokenRegistry",
              "label": "enabled",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomTokenRegistry.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155": {
        "src": "contracts/library/ERC1155.sol:11",
        "version": {
          "withMetadata": "4de8db746979d168769e26437365beefd085ffbaca644a05ead037d5d1a211d5",
          "withoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c",
          "linkedWithoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c"
        },
        "inherit": [
          "IERC165"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155",
              "label": "balances",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/library/ERC1155.sol:25"
            },
            {
              "contract": "ERC1155",
              "label": "operators",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts/library/ERC1155.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155Metadata": {
        "src": "contracts/library/ERC1155Metadata.sol:9",
        "version": {
          "withMetadata": "94aac9ad7d8415f3fcb755d64229ec7fcd33f0e875681e0258d75c1a5ce5f44f",
          "withoutMetadata": "e6daebc392a1105a55ecdc42deea5d1e0d27078a64ec91c306dbb0b833545021",
          "linkedWithoutMetadata": "e6daebc392a1105a55ecdc42deea5d1e0d27078a64ec91c306dbb0b833545021"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155Metadata",
              "label": "baseMetadataURI",
              "type": "t_string_storage",
              "src": "contracts/library/ERC1155Metadata.sol:12"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155MintBurn": {
        "src": "contracts/library/ERC1155MintBurn.sol:9",
        "version": {
          "withMetadata": "9a2ba0507da9c79e787a96d59a2159dc4c0ffbe038228f4d3ff69592978fc43d",
          "withoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c",
          "linkedWithoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c"
        },
        "inherit": [
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155TokenReceiver": {
        "src": "contracts/library/IERC1155TokenReceiver.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BiddingContractMock": {
        "src": "contracts/mock/BiddingContractMock.sol:7",
        "version": {
          "withMetadata": "e61c85e839c3bd9cd8db9a890fa12ac3486c5fc4861b3675a91065a406e2805b",
          "withoutMetadata": "bb0412333928df554dd3ad72cd3a6e7881eb495118185c1adbf9bb85451157a0",
          "linkedWithoutMetadata": "bb0412333928df554dd3ad72cd3a6e7881eb495118185c1adbf9bb85451157a0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "bid(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BiddingContractMock",
            "src": "contracts/mock/BiddingContractMock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BiddingContractMock",
              "label": "auctionContract",
              "type": "t_contract(FantomAuction)8396",
              "src": "contracts/mock/BiddingContractMock.sol:8"
            }
          ],
          "types": {
            "t_contract(FantomAuction)8396": {
              "label": "contract FantomAuction"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuctionMock": {
        "src": "contracts/mock/FantomAuctionMock.sol:7",
        "version": {
          "withMetadata": "3c473688bd6059af367c82baea02a1d8c81077f50407bef6b375e241621f2e21",
          "withoutMetadata": "70fe49cb82152c83e5a756b3f483b7104b22541d78dd0bd4bcf114a9bdf2d822",
          "linkedWithoutMetadata": "70fe49cb82152c83e5a756b3f483b7104b22541d78dd0bd4bcf114a9bdf2d822"
        },
        "inherit": [
          "FantomAuction",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "setNowOverride(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuctionMock",
              "label": "nowOverride",
              "type": "t_uint256",
              "src": "contracts/mock/FantomAuctionMock.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts/mock/MockERC20.sol:7",
        "version": {
          "withMetadata": "9d333d6c892c8452c229962e238814161263bc21530c89efd5214cf2aca2caf3",
          "withoutMetadata": "fdf7012d757f3885a979b8d5e8de23eaa8f27d3d57b8b133ad305739a8277957",
          "linkedWithoutMetadata": "fdf7012d757f3885a979b8d5e8de23eaa8f27d3d57b8b133ad305739a8277957"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/mock/MockERC20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeabilityProxy": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:304",
        "version": {
          "withMetadata": "1c8731490f713ef73925313dfbbb75a2f3fa82984296c7855d66ef61c2e2213c",
          "withoutMetadata": "1c8731490f713ef73925313dfbbb75a2f3fa82984296c7855d66ef61c2e2213c",
          "linkedWithoutMetadata": "1c8731490f713ef73925313dfbbb75a2f3fa82984296c7855d66ef61c2e2213c"
        },
        "inherit": [
          "UpgradeabilityProxy",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AdminUpgradeabilityProxy",
            "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:314"
          },
          {
            "kind": "delegatecall",
            "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:392"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UpgradeabilityProxy": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:228",
        "version": {
          "withMetadata": "8c8fbafc0bf5487195f76a94813b04c77d6ceb62b4e20723f63e13abc2e8d3e7",
          "withoutMetadata": "8c8fbafc0bf5487195f76a94813b04c77d6ceb62b4e20723f63e13abc2e8d3e7",
          "linkedWithoutMetadata": "8c8fbafc0bf5487195f76a94813b04c77d6ceb62b4e20723f63e13abc2e8d3e7"
        },
        "inherit": [
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeabilityProxy",
            "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:237"
          },
          {
            "kind": "delegatecall",
            "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:241"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyAdmin": {
        "src": "contracts/proxy/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "1e01f88b2866f4a774f875a86b6d567a4120e8dfda23aa3ddd5868cb948e10e2",
          "withoutMetadata": "ed1aee2f0dae262982d214e10fdee51b42af8a6317158eebffb1d3b96186cd72",
          "linkedWithoutMetadata": "ed1aee2f0dae262982d214e10fdee51b42af8a6317158eebffb1d3b96186cd72"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\math\\SafeMath.sol:18",
        "version": {
          "withMetadata": "12f8b63975cec359166dc714be4e684b4fcf7c0497b2176e313e78b0f08171f8",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "dd15e04a1561397fbc7c3ae3ad394763be5dadec2c60082138bbf64746f457f8",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165",
            "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC165",
              "label": "_supportedInterfaces",
              "type": "t_mapping(t_bytes4,t_bool)",
              "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "contracts\\library\\IERC165.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155": {
        "src": "@openzeppelin\\contracts\\token\\ERC1155\\IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:33",
        "version": {
          "withMetadata": "5385d8f9a2a6008fecc420942e644bf860ccc5a0a87536e3a478b41bdad43db8",
          "withoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393",
          "linkedWithoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:44"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\SafeERC20.sol:18",
        "version": {
          "withMetadata": "ac490452d006a298fecb47eab43f8b56fc24a8af6c1e9589be882f66b71dcf29",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:21",
        "version": {
          "withMetadata": "1263ec9c299b38623bf2ed229b22524a9cd8778d2d7177950a88882c93ac2d47",
          "withoutMetadata": "3b9603e3ba8de701bdbd85fd5e78921e81db89f785601570458c066456264033",
          "linkedWithoutMetadata": "3b9603e3ba8de701bdbd85fd5e78921e81db89f785601570458c066456264033"
        },
        "inherit": [
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address",
          "EnumerableSet",
          "EnumerableMap",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "baseURI()",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:93"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_holderTokens",
              "type": "t_mapping(t_address,t_struct(UintSet)4604_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenOwners",
              "type": "t_struct(UintToAddressMap)3981_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:42"
            },
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:45"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:48"
            },
            {
              "contract": "ERC721",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:51"
            },
            {
              "contract": "ERC721",
              "label": "_baseURI",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(UintSet)4604_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UintSet)4604_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4218_storage"
                }
              ]
            },
            "t_struct(Set)4218_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(UintToAddressMap)3981_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)3663_storage"
                }
              ]
            },
            "t_struct(Map)3663_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)3655_storage)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_struct(MapEntry)3655_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]"
            },
            "t_struct(MapEntry)3655_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Enumerable.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:84",
        "version": {
          "withMetadata": "6ebc18947215038323b426a12b02cef514b75866073c7c96e534ed8d50616f7d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableMap": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableMap.sol:29",
        "version": {
          "withMetadata": "73725cbf9d2d1b2137d29a8a838af6227094ea37e1f8d67c6e200e7ab9da7ddd",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableSet.sol:29",
        "version": {
          "withMetadata": "93c63380dd1aced02757debdc25c8b6a733c4d4148ef735e290102573c76ca93",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:8",
        "version": {
          "withMetadata": "943f736564e78cbe4b2ebc37a12345bea28446ff07a76171b7a8cb7eb81c3c06",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomAddressRegistry": {
        "src": "contracts\\FantomAddressRegistry.sol:8",
        "version": {
          "withMetadata": "10371c20d9f79786b299a3538aac34802c3978b59299fd4651d14a15d73cd69a",
          "withoutMetadata": "b8b02879464d53b43faa6a13553775a50f3ff1f589f7790ee632b882717bb59f",
          "linkedWithoutMetadata": "b8b02879464d53b43faa6a13553775a50f3ff1f589f7790ee632b882717bb59f"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "updateArtion(address)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateNFTFactory(address)",
          "updateNFTFactoryPrivate(address)",
          "updateArtFactory(address)",
          "updateArtFactoryPrivate(address)",
          "updateTokenRegistry(address)",
          "updatePriceFeed(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAddressRegistry",
              "label": "artion",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:12"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:15"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:18"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:21"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "factory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:24"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:27"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "artFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:30"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateArtFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:33"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "tokenRegistry",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:36"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "priceFeed",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactory": {
        "src": "contracts\\FantomArtFactory.sol:8",
        "version": {
          "withMetadata": "355607f8ae94b3c82b3ecc50c1c4141fe70a0c0ae5a8b3d768c1c191c7e5ae1a",
          "withoutMetadata": "961f82515b65d228025a56be522ac6169b7ed4194d3236e06c0203f57e9b3eb1",
          "linkedWithoutMetadata": "961f82515b65d228025a56be522ac6169b7ed4194d3236e06c0203f57e9b3eb1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactory",
            "src": "contracts\\FantomArtFactory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactory.sol:14"
            },
            {
              "contract": "FantomArtFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactory.sol:17"
            },
            {
              "contract": "FantomArtFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactory.sol:20"
            },
            {
              "contract": "FantomArtFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactory.sol:23"
            },
            {
              "contract": "FantomArtFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtFactory.sol:26"
            },
            {
              "contract": "FantomArtFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomArtFactory.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactoryPrivate": {
        "src": "contracts\\FantomArtFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "e0aa82818a543e72845eee46f1f1cfb05795043a745c7f9f7e92fe97b62baa01",
          "withoutMetadata": "fc94fc833777fcae854637835b8783ac9eb36ceceadb309dcb1ab3f5b2d280e4",
          "linkedWithoutMetadata": "fc94fc833777fcae854637835b8783ac9eb36ceceadb309dcb1ab3f5b2d280e4"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactoryPrivate",
            "src": "contracts\\FantomArtFactoryPrivate.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomArtFactoryPrivate.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradable": {
        "src": "contracts\\FantomArtTradable.sol:22",
        "version": {
          "withMetadata": "f76e651d5d8916ae004d7071ff3f03096a9091c3105905fd006c9467899496d3",
          "withoutMetadata": "f33b5082790284cfcfe598c9b5f69a0ce350cda1bd7a36032d7877bbb65b2b8b",
          "linkedWithoutMetadata": "f33b5082790284cfcfe598c9b5f69a0ce350cda1bd7a36032d7877bbb65b2b8b"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradable",
            "src": "contracts\\FantomArtTradable.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts\\FantomArtTradable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradable",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradable.sol:28"
            },
            {
              "contract": "FantomArtTradable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts\\FantomArtTradable.sol:31"
            },
            {
              "contract": "FantomArtTradable",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtTradable.sol:33"
            },
            {
              "contract": "FantomArtTradable",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\FantomArtTradable.sol:34"
            },
            {
              "contract": "FantomArtTradable",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradable.sol:37"
            },
            {
              "contract": "FantomArtTradable",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradable.sol:39"
            },
            {
              "contract": "FantomArtTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradable.sol:41"
            },
            {
              "contract": "FantomArtTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtTradable.sol:43"
            },
            {
              "contract": "FantomArtTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradable.sol:45"
            },
            {
              "contract": "FantomArtTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradable.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "OwnableDelegateProxy": {
        "src": "contracts\\FantomArtTradablePrivate.sol:10",
        "version": {
          "withMetadata": "8c3f61a738262e24601afe3e747ea55777ff62b53a9f990d99bef091891ab8fc",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyRegistry": {
        "src": "contracts\\FantomArtTradablePrivate.sol:12",
        "version": {
          "withMetadata": "58da28d11247b3be8d35479bccdae623f77c10513ed165c826e8963dc6812924",
          "withoutMetadata": "aa5f7868673867df9c21749320a6e16e4ca5f9990a18e1a55b0cff496ccd615d",
          "linkedWithoutMetadata": "aa5f7868673867df9c21749320a6e16e4ca5f9990a18e1a55b0cff496ccd615d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ProxyRegistry",
              "label": "proxies",
              "type": "t_mapping(t_address,t_contract(OwnableDelegateProxy)5848)",
              "src": "contracts\\FantomArtTradablePrivate.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_contract(OwnableDelegateProxy)5848)": {
              "label": "mapping(address => contract OwnableDelegateProxy)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(OwnableDelegateProxy)5848": {
              "label": "contract OwnableDelegateProxy"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradablePrivate": {
        "src": "contracts\\FantomArtTradablePrivate.sol:22",
        "version": {
          "withMetadata": "d3e55bf7fab9e0783dc2a9984de9a5b42fa18a06540abaee046f6793e0a0d966",
          "withoutMetadata": "fdea5c874e471cd342851d70953bc34544f3144ebc53c9d7992b435f3b02e5a9",
          "linkedWithoutMetadata": "fdea5c874e471cd342851d70953bc34544f3144ebc53c9d7992b435f3b02e5a9"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradablePrivate",
            "src": "contracts\\FantomArtTradablePrivate.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts\\FantomArtTradablePrivate.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradablePrivate.sol:28"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts\\FantomArtTradablePrivate.sol:31"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtTradablePrivate.sol:33"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\FantomArtTradablePrivate.sol:34"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradablePrivate.sol:37"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradablePrivate.sol:39"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradablePrivate.sol:41"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtTradablePrivate.sol:43"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradablePrivate.sol:45"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradablePrivate.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Artion": {
        "src": "contracts\\FantomArtion.sol:9",
        "version": {
          "withMetadata": "09aaeeabbb5ef323460cc3def838b7fb804ad4fc95452df904e23ba6dc037224",
          "withoutMetadata": "c7781e9281a75bfb606f9859098482b2385eb20c5bdc7c98ff2a8b56ff11f70e",
          "linkedWithoutMetadata": "c7781e9281a75bfb606f9859098482b2385eb20c5bdc7c98ff2a8b56ff11f70e"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable,uint256)",
          "mint(address,string)",
          "burn(uint256)",
          "exists(uint256)",
          "isApproved(uint256,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Artion",
            "src": "contracts\\FantomArtion.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Artion",
              "label": "tokenIdPointer",
              "type": "t_uint256",
              "src": "contracts\\FantomArtion.sol:26"
            },
            {
              "contract": "Artion",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtion.sol:29"
            },
            {
              "contract": "Artion",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtion.sol:32"
            },
            {
              "contract": "Artion",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtion.sol:35"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuction": {
        "src": "contracts\\FantomAuction.sol:55",
        "version": {
          "withMetadata": "b8cb50c3033fec7f2c09b8b267a94b613bcb0ea529a8d86e71a72c34448f4528",
          "withoutMetadata": "644663d63c2fc928180dce2c3bf2e3a84391bba64f4c954950be39a1799ac729",
          "linkedWithoutMetadata": "644663d63c2fc928180dce2c3bf2e3a84391bba64f4c954950be39a1799ac729"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable)",
          "createAuction(address,uint256,address,uint256,uint256,bool,uint256)",
          "placeBid(address,uint256)",
          "placeBid(address,uint256,uint256)",
          "withdrawBid(address,uint256)",
          "resultAuction(address,uint256)",
          "cancelAuction(address,uint256)",
          "toggleIsPaused()",
          "updateMinBidIncrement(uint256)",
          "updateBidWithdrawalLockTime(uint256)",
          "updateAuctionReservePrice(address,uint256,uint256)",
          "updateAuctionStartTime(address,uint256,uint256)",
          "updateAuctionEndTime(address,uint256,uint256)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "getAuction(address,uint256)",
          "getHighestBidder(address,uint256)",
          "reclaimERC20(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "minBidIncrement",
            "src": "contracts\\FantomAuction.sol:156"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bidWithdrawalLockTime",
            "src": "contracts\\FantomAuction.sol:159"
          },
          {
            "kind": "state-variable-assignment",
            "name": "platformFee",
            "src": "contracts\\FantomAuction.sol:162"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuction",
              "label": "auctions",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6657_storage))",
              "src": "contracts\\FantomAuction.sol:150"
            },
            {
              "contract": "FantomAuction",
              "label": "highestBids",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6664_storage))",
              "src": "contracts\\FantomAuction.sol:153"
            },
            {
              "contract": "FantomAuction",
              "label": "minBidIncrement",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:156"
            },
            {
              "contract": "FantomAuction",
              "label": "bidWithdrawalLockTime",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:159"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:162"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFeeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomAuction.sol:165"
            },
            {
              "contract": "FantomAuction",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)6464",
              "src": "contracts\\FantomAuction.sol:168"
            },
            {
              "contract": "FantomAuction",
              "label": "isPaused",
              "type": "t_bool",
              "src": "contracts\\FantomAuction.sol:171"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6657_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.Auction))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(Auction)6657_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.Auction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Auction)6657_storage": {
              "label": "struct FantomAuction.Auction",
              "members": [
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "minBid",
                  "type": "t_uint256"
                },
                {
                  "label": "reservePrice",
                  "type": "t_uint256"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256"
                },
                {
                  "label": "resulted",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6664_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.HighestBid))"
            },
            "t_mapping(t_uint256,t_struct(HighestBid)6664_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.HighestBid)"
            },
            "t_struct(HighestBid)6664_storage": {
              "label": "struct FantomAuction.HighestBid",
              "members": [
                {
                  "label": "bidder",
                  "type": "t_address_payable"
                },
                {
                  "label": "bid",
                  "type": "t_uint256"
                },
                {
                  "label": "lastBidTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)6464": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAddressRegistry": {
        "src": "contracts\\FantomPriceFeed.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenRegistry()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomBundleMarketplace": {
        "src": "contracts\\FantomMarketplace.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,address,address)",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomTokenRegistry": {
        "src": "contracts\\FantomPriceFeed.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enabled(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomBundleMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:39",
        "version": {
          "withMetadata": "5e21dcd219c3bbb2e975620b3b96076f7452327bcfedf68dafd35fe61d3f3852",
          "withoutMetadata": "502f551b2fe6abf60d80cb7297a245f718e2b638dd364e32410507ea23faab1b",
          "linkedWithoutMetadata": "502f551b2fe6abf60d80cb7297a245f718e2b638dd364e32410507ea23faab1b"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20",
          "EnumerableSet"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "getListing(address,string)",
          "listItem(string,address[],uint256[],uint256[],address,uint256,uint256)",
          "cancelListing(string)",
          "updateListing(string,address,uint256)",
          "buyItem(string)",
          "buyItem(string,address)",
          "createOffer(string,address,uint256,uint256)",
          "cancelOffer(string)",
          "acceptOffer(string,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomBundleMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8561_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:106"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "owners",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts\\FantomBundleMarketplace.sol:109"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIdsPerItem",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4398_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:111"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "nftIndexes",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))",
              "src": "contracts\\FantomBundleMarketplace.sol:113"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIds",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "src": "contracts\\FantomBundleMarketplace.sol:115"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "offers",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8568_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:118"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomBundleMarketplace.sol:121"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomBundleMarketplace.sol:124"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)8424",
              "src": "contracts\\FantomBundleMarketplace.sol:127"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8561_storage))": {
              "label": "mapping(address => mapping(bytes32 => struct FantomBundleMarketplace.Listing))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_struct(Listing)8561_storage)": {
              "label": "mapping(bytes32 => struct FantomBundleMarketplace.Listing)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Listing)8561_storage": {
              "label": "struct FantomBundleMarketplace.Listing",
              "members": [
                {
                  "label": "nfts",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "tokenIds",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "quantities",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4398_storage))": {
              "label": "mapping(address => mapping(uint256 => struct EnumerableSet.Bytes32Set))"
            },
            "t_mapping(t_uint256,t_struct(Bytes32Set)4398_storage)": {
              "label": "mapping(uint256 => struct EnumerableSet.Bytes32Set)"
            },
            "t_struct(Bytes32Set)4398_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4218_storage"
                }
              ]
            },
            "t_struct(Set)4218_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
              "label": "mapping(bytes32 => mapping(address => mapping(uint256 => uint256)))"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8568_storage))": {
              "label": "mapping(bytes32 => mapping(address => struct FantomBundleMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)8568_storage)": {
              "label": "mapping(address => struct FantomBundleMarketplace.Offer)"
            },
            "t_struct(Offer)8568_storage": {
              "label": "struct FantomBundleMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)8424": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomMarketplace": {
        "src": "contracts\\FantomMarketplace.sol:71",
        "version": {
          "withMetadata": "bcc509148f47ca9bcecc45e0c1a4b7c6b9f3318b8f5a86cfb92afe2cbc2eed4b",
          "withoutMetadata": "4e364af37af1744caf6985a4cfa41fee3731eaa02c06535aba79b3619959167c",
          "linkedWithoutMetadata": "4e364af37af1744caf6985a4cfa41fee3731eaa02c06535aba79b3619959167c"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable,uint16)",
          "listItem(address,uint256,uint256,address,uint256,uint256)",
          "cancelListing(address,uint256)",
          "updateListing(address,uint256,address,uint256)",
          "buyItem(address,uint256,address,address)",
          "createOffer(address,uint256,address,uint256,uint256,uint256)",
          "cancelOffer(address,uint256)",
          "acceptOffer(address,uint256,address)",
          "registerRoyalty(address,uint256,uint16)",
          "registerCollectionRoyalty(address,address,uint16,address)",
          "getPrice(address)",
          "updatePlatformFee(uint16)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomMarketplace",
              "label": "minters",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
              "src": "contracts\\FantomMarketplace.sol:151"
            },
            {
              "contract": "FantomMarketplace",
              "label": "royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint16))",
              "src": "contracts\\FantomMarketplace.sol:154"
            },
            {
              "contract": "FantomMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10765_storage)))",
              "src": "contracts\\FantomMarketplace.sol:157"
            },
            {
              "contract": "FantomMarketplace",
              "label": "offers",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10774_storage)))",
              "src": "contracts\\FantomMarketplace.sol:161"
            },
            {
              "contract": "FantomMarketplace",
              "label": "platformFee",
              "type": "t_uint16",
              "src": "contracts\\FantomMarketplace.sol:165"
            },
            {
              "contract": "FantomMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomMarketplace.sol:168"
            },
            {
              "contract": "FantomMarketplace",
              "label": "collectionRoyalties",
              "type": "t_mapping(t_address,t_struct(CollectionRoyalty)10781_storage)",
              "src": "contracts\\FantomMarketplace.sol:171"
            },
            {
              "contract": "FantomMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)10595",
              "src": "contracts\\FantomMarketplace.sol:174"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
              "label": "mapping(address => mapping(uint256 => address))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint16))": {
              "label": "mapping(address => mapping(uint256 => uint16))"
            },
            "t_mapping(t_uint256,t_uint16)": {
              "label": "mapping(uint256 => uint16)"
            },
            "t_uint16": {
              "label": "uint16"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10765_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Listing)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10765_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Listing))"
            },
            "t_mapping(t_address,t_struct(Listing)10765_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Listing)"
            },
            "t_struct(Listing)10765_storage": {
              "label": "struct FantomMarketplace.Listing",
              "members": [
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10774_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Offer)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10774_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)10774_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Offer)"
            },
            "t_struct(Offer)10774_storage": {
              "label": "struct FantomMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_struct(CollectionRoyalty)10781_storage)": {
              "label": "mapping(address => struct FantomMarketplace.CollectionRoyalty)"
            },
            "t_struct(CollectionRoyalty)10781_storage": {
              "label": "struct FantomMarketplace.CollectionRoyalty",
              "members": [
                {
                  "label": "royalty",
                  "type": "t_uint16"
                },
                {
                  "label": "creator",
                  "type": "t_address"
                },
                {
                  "label": "feeRecipient",
                  "type": "t_address"
                }
              ]
            },
            "t_contract(IFantomAddressRegistry)10595": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAuction": {
        "src": "contracts\\FantomMarketplace.sol:35",
        "inherit": [],
        "libraries": [],
        "methods": [
          "auctions(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomNFTFactory": {
        "src": "contracts\\FantomMarketplace.sol:57",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exists(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomPriceFeed": {
        "src": "contracts\\FantomMarketplace.sol:65",
        "inherit": [],
        "libraries": [],
        "methods": [
          "wFTM()",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactory": {
        "src": "contracts\\FantomNFTFactory.sol:8",
        "version": {
          "withMetadata": "a3d19cad134d00c2bd0320f0f376080deb0bf2f7d47944479836c856256d2252",
          "withoutMetadata": "cf477a4133942204c4b570215c71e15f133c398758afd27c29c25e048f380ab2",
          "linkedWithoutMetadata": "cf477a4133942204c4b570215c71e15f133c398758afd27c29c25e048f380ab2"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactory",
            "src": "contracts\\FantomNFTFactory.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactory",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:14"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:17"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:20"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactory.sol:23"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactory.sol:26"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTFactory.sol:29"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomNFTFactory.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactoryPrivate": {
        "src": "contracts\\FantomNFTFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "47bb67aeb6416610e568e6a78cc4d09eea37178af19ee24610042495d6bbb1f2",
          "withoutMetadata": "792bd5bb899b2c89a3a205154ad88282e8e7392f844f84c10aadef541ce049d8",
          "linkedWithoutMetadata": "792bd5bb899b2c89a3a205154ad88282e8e7392f844f84c10aadef541ce049d8"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactoryPrivate",
            "src": "contracts\\FantomNFTFactoryPrivate.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:29"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradable": {
        "src": "contracts\\FantomNFTTradable.sol:12",
        "version": {
          "withMetadata": "dcdaa7d4dd2c549389ad6b21a23ccfbd526c9b63735c02dc5cc618dc53dbef4c",
          "withoutMetadata": "b715fc2696419c35653e85f48809a39e29cce31ebdd023855f0f9b84bfb96f4b",
          "linkedWithoutMetadata": "b715fc2696419c35653e85f48809a39e29cce31ebdd023855f0f9b84bfb96f4b"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradable",
            "src": "contracts\\FantomNFTTradable.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts\\FantomNFTTradable.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradable",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:27"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:28"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:29"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradable.sol:30"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradable.sol:33"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTTradable.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradablePrivate": {
        "src": "contracts\\FantomNFTTradablePrivate.sol:12",
        "version": {
          "withMetadata": "d8ab60c2bc623353d0c1f652d43f08b3a45029fd184c2d36b8205020f52ad007",
          "withoutMetadata": "961408c66908a1ebfa2cdf7158b1c8a10ea70a213cf353d662b9ffea3b5d64e9",
          "linkedWithoutMetadata": "961408c66908a1ebfa2cdf7158b1c8a10ea70a213cf353d662b9ffea3b5d64e9"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradablePrivate",
            "src": "contracts\\FantomNFTTradablePrivate.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts\\FantomNFTTradablePrivate.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:27"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:28"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:29"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradablePrivate.sol:30"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradablePrivate.sol:33"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTTradablePrivate.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomPriceFeed": {
        "src": "contracts\\FantomPriceFeed.sol:21",
        "version": {
          "withMetadata": "a658a0a13f9184fc0b0f5d665c35d690edc7398782cbefd01c937b2bb18dcc48",
          "withoutMetadata": "a9e82cc54a14fd3bc58dbaa79b4045b14b4c9b290321beb8d121cfd1e034c6b7",
          "linkedWithoutMetadata": "a9e82cc54a14fd3bc58dbaa79b4045b14b4c9b290321beb8d121cfd1e034c6b7"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerOracle(address,address)",
          "updateOracle(address,address)",
          "getPrice(address)",
          "updateAddressRegistry(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomPriceFeed",
            "src": "contracts\\FantomPriceFeed.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomPriceFeed",
              "label": "oracles",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts\\FantomPriceFeed.sol:23"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "addressRegistry",
              "type": "t_address",
              "src": "contracts\\FantomPriceFeed.sol:26"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "wFTM",
              "type": "t_address",
              "src": "contracts\\FantomPriceFeed.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IOracle": {
        "src": "contracts\\FantomPriceFeed.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestAnswer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomTokenRegistry": {
        "src": "contracts\\FantomTokenRegistry.sol:7",
        "version": {
          "withMetadata": "8c38d27bdcb299edad68d09abde598ab7ff156407e293303f4f331832d552950",
          "withoutMetadata": "8d79c556bc9bb807b68178115ba5454cbf257f09ac10f8108786804cc2b2ce86",
          "linkedWithoutMetadata": "8d79c556bc9bb807b68178115ba5454cbf257f09ac10f8108786804cc2b2ce86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "add(address)",
          "remove(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomTokenRegistry",
              "label": "enabled",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomTokenRegistry.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155": {
        "src": "contracts\\library\\ERC1155.sol:11",
        "version": {
          "withMetadata": "e38675e88b1255c14bafbddea2fb3de4064da952960a5df5479549948b078eb9",
          "withoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c",
          "linkedWithoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c"
        },
        "inherit": [
          "IERC165"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155",
              "label": "balances",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts\\library\\ERC1155.sol:25"
            },
            {
              "contract": "ERC1155",
              "label": "operators",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts\\library\\ERC1155.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155Metadata": {
        "src": "contracts\\library\\ERC1155Metadata.sol:9",
        "version": {
          "withMetadata": "2d06782b92683f552c11c8c60edf4fda8a9a35cebcc57eb7114a6942e6331208",
          "withoutMetadata": "e6daebc392a1105a55ecdc42deea5d1e0d27078a64ec91c306dbb0b833545021",
          "linkedWithoutMetadata": "e6daebc392a1105a55ecdc42deea5d1e0d27078a64ec91c306dbb0b833545021"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155Metadata",
              "label": "baseMetadataURI",
              "type": "t_string_storage",
              "src": "contracts\\library\\ERC1155Metadata.sol:12"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155MintBurn": {
        "src": "contracts\\library\\ERC1155MintBurn.sol:9",
        "version": {
          "withMetadata": "1170e1b7b28b6ea67df85423aded03db6d14ef6a2a823e423b9cc6d6206eca1d",
          "withoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c",
          "linkedWithoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c"
        },
        "inherit": [
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155TokenReceiver": {
        "src": "contracts\\library\\IERC1155TokenReceiver.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BiddingContractMock": {
        "src": "contracts\\mock\\BiddingContractMock.sol:7",
        "version": {
          "withMetadata": "a4aa5ca1a58be6268a2828c35432f90663cdf4282b984992d1a261bb4fe8d464",
          "withoutMetadata": "bb0412333928df554dd3ad72cd3a6e7881eb495118185c1adbf9bb85451157a0",
          "linkedWithoutMetadata": "bb0412333928df554dd3ad72cd3a6e7881eb495118185c1adbf9bb85451157a0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "bid(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BiddingContractMock",
            "src": "contracts\\mock\\BiddingContractMock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BiddingContractMock",
              "label": "auctionContract",
              "type": "t_contract(FantomAuction)8396",
              "src": "contracts\\mock\\BiddingContractMock.sol:8"
            }
          ],
          "types": {
            "t_contract(FantomAuction)8396": {
              "label": "contract FantomAuction"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuctionMock": {
        "src": "contracts\\mock\\FantomAuctionMock.sol:7",
        "version": {
          "withMetadata": "cb10a6c053895c6e7dc028e53da72104ed6e4d0a18c925b8661031d9f28a7a09",
          "withoutMetadata": "70fe49cb82152c83e5a756b3f483b7104b22541d78dd0bd4bcf114a9bdf2d822",
          "linkedWithoutMetadata": "70fe49cb82152c83e5a756b3f483b7104b22541d78dd0bd4bcf114a9bdf2d822"
        },
        "inherit": [
          "FantomAuction",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "setNowOverride(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuctionMock",
              "label": "nowOverride",
              "type": "t_uint256",
              "src": "contracts\\mock\\FantomAuctionMock.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts\\mock\\MockERC20.sol:7",
        "version": {
          "withMetadata": "8a957e21c0b0d32c06b62f1e2bcfcf3fa08852c238eabeb9d5a0b12ab9a133b4",
          "withoutMetadata": "fdf7012d757f3885a979b8d5e8de23eaa8f27d3d57b8b133ad305739a8277957",
          "linkedWithoutMetadata": "fdf7012d757f3885a979b8d5e8de23eaa8f27d3d57b8b133ad305739a8277957"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts\\mock\\MockERC20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:304",
        "version": {
          "withMetadata": "953a5a25df22a6c1b394fa5bfb572b8b89e51eff28531c242f981a4d7a42de91",
          "withoutMetadata": "953a5a25df22a6c1b394fa5bfb572b8b89e51eff28531c242f981a4d7a42de91",
          "linkedWithoutMetadata": "953a5a25df22a6c1b394fa5bfb572b8b89e51eff28531c242f981a4d7a42de91"
        },
        "inherit": [
          "UpgradeabilityProxy",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AdminUpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:314"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:392"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:228",
        "version": {
          "withMetadata": "d8b876ebcdbed2da609ce8db823c306dfa79caa8d013c2b03bf3293bb3a0679b",
          "withoutMetadata": "d8b876ebcdbed2da609ce8db823c306dfa79caa8d013c2b03bf3293bb3a0679b",
          "linkedWithoutMetadata": "d8b876ebcdbed2da609ce8db823c306dfa79caa8d013c2b03bf3293bb3a0679b"
        },
        "inherit": [
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:237"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:241"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyAdmin": {
        "src": "contracts\\proxy\\ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "52c58b4224d04fcb69bbb9fcb76036691b4b609722815d0adeda9452838787d7",
          "withoutMetadata": "ed1aee2f0dae262982d214e10fdee51b42af8a6317158eebffb1d3b96186cd72",
          "linkedWithoutMetadata": "ed1aee2f0dae262982d214e10fdee51b42af8a6317158eebffb1d3b96186cd72"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\math\\SafeMath.sol:18",
        "version": {
          "withMetadata": "12f8b63975cec359166dc714be4e684b4fcf7c0497b2176e313e78b0f08171f8",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "dd15e04a1561397fbc7c3ae3ad394763be5dadec2c60082138bbf64746f457f8",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165",
            "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC165",
              "label": "_supportedInterfaces",
              "type": "t_mapping(t_bytes4,t_bool)",
              "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "contracts\\library\\IERC165.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155": {
        "src": "@openzeppelin\\contracts\\token\\ERC1155\\IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:33",
        "version": {
          "withMetadata": "5385d8f9a2a6008fecc420942e644bf860ccc5a0a87536e3a478b41bdad43db8",
          "withoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393",
          "linkedWithoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:44"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\SafeERC20.sol:18",
        "version": {
          "withMetadata": "ac490452d006a298fecb47eab43f8b56fc24a8af6c1e9589be882f66b71dcf29",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:21",
        "version": {
          "withMetadata": "1263ec9c299b38623bf2ed229b22524a9cd8778d2d7177950a88882c93ac2d47",
          "withoutMetadata": "3b9603e3ba8de701bdbd85fd5e78921e81db89f785601570458c066456264033",
          "linkedWithoutMetadata": "3b9603e3ba8de701bdbd85fd5e78921e81db89f785601570458c066456264033"
        },
        "inherit": [
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address",
          "EnumerableSet",
          "EnumerableMap",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "baseURI()",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:93"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_holderTokens",
              "type": "t_mapping(t_address,t_struct(UintSet)4604_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenOwners",
              "type": "t_struct(UintToAddressMap)3981_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:42"
            },
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:45"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:48"
            },
            {
              "contract": "ERC721",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:51"
            },
            {
              "contract": "ERC721",
              "label": "_baseURI",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(UintSet)4604_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UintSet)4604_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4218_storage"
                }
              ]
            },
            "t_struct(Set)4218_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(UintToAddressMap)3981_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)3663_storage"
                }
              ]
            },
            "t_struct(Map)3663_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)3655_storage)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_struct(MapEntry)3655_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]"
            },
            "t_struct(MapEntry)3655_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Enumerable.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:84",
        "version": {
          "withMetadata": "6ebc18947215038323b426a12b02cef514b75866073c7c96e534ed8d50616f7d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableMap": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableMap.sol:29",
        "version": {
          "withMetadata": "73725cbf9d2d1b2137d29a8a838af6227094ea37e1f8d67c6e200e7ab9da7ddd",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableSet.sol:29",
        "version": {
          "withMetadata": "93c63380dd1aced02757debdc25c8b6a733c4d4148ef735e290102573c76ca93",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:8",
        "version": {
          "withMetadata": "943f736564e78cbe4b2ebc37a12345bea28446ff07a76171b7a8cb7eb81c3c06",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomAddressRegistry": {
        "src": "contracts\\FantomAddressRegistry.sol:8",
        "version": {
          "withMetadata": "10371c20d9f79786b299a3538aac34802c3978b59299fd4651d14a15d73cd69a",
          "withoutMetadata": "b8b02879464d53b43faa6a13553775a50f3ff1f589f7790ee632b882717bb59f",
          "linkedWithoutMetadata": "b8b02879464d53b43faa6a13553775a50f3ff1f589f7790ee632b882717bb59f"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "updateArtion(address)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateNFTFactory(address)",
          "updateNFTFactoryPrivate(address)",
          "updateArtFactory(address)",
          "updateArtFactoryPrivate(address)",
          "updateTokenRegistry(address)",
          "updatePriceFeed(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAddressRegistry",
              "label": "artion",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:12"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:15"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:18"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:21"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "factory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:24"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:27"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "artFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:30"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateArtFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:33"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "tokenRegistry",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:36"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "priceFeed",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactory": {
        "src": "contracts\\FantomArtFactory.sol:8",
        "version": {
          "withMetadata": "355607f8ae94b3c82b3ecc50c1c4141fe70a0c0ae5a8b3d768c1c191c7e5ae1a",
          "withoutMetadata": "961f82515b65d228025a56be522ac6169b7ed4194d3236e06c0203f57e9b3eb1",
          "linkedWithoutMetadata": "961f82515b65d228025a56be522ac6169b7ed4194d3236e06c0203f57e9b3eb1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactory",
            "src": "contracts\\FantomArtFactory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactory.sol:14"
            },
            {
              "contract": "FantomArtFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactory.sol:17"
            },
            {
              "contract": "FantomArtFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactory.sol:20"
            },
            {
              "contract": "FantomArtFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactory.sol:23"
            },
            {
              "contract": "FantomArtFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtFactory.sol:26"
            },
            {
              "contract": "FantomArtFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomArtFactory.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactoryPrivate": {
        "src": "contracts\\FantomArtFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "e0aa82818a543e72845eee46f1f1cfb05795043a745c7f9f7e92fe97b62baa01",
          "withoutMetadata": "fc94fc833777fcae854637835b8783ac9eb36ceceadb309dcb1ab3f5b2d280e4",
          "linkedWithoutMetadata": "fc94fc833777fcae854637835b8783ac9eb36ceceadb309dcb1ab3f5b2d280e4"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactoryPrivate",
            "src": "contracts\\FantomArtFactoryPrivate.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomArtFactoryPrivate.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradable": {
        "src": "contracts\\FantomArtTradable.sol:22",
        "version": {
          "withMetadata": "f76e651d5d8916ae004d7071ff3f03096a9091c3105905fd006c9467899496d3",
          "withoutMetadata": "f33b5082790284cfcfe598c9b5f69a0ce350cda1bd7a36032d7877bbb65b2b8b",
          "linkedWithoutMetadata": "f33b5082790284cfcfe598c9b5f69a0ce350cda1bd7a36032d7877bbb65b2b8b"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradable",
            "src": "contracts\\FantomArtTradable.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts\\FantomArtTradable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradable",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradable.sol:28"
            },
            {
              "contract": "FantomArtTradable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts\\FantomArtTradable.sol:31"
            },
            {
              "contract": "FantomArtTradable",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtTradable.sol:33"
            },
            {
              "contract": "FantomArtTradable",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\FantomArtTradable.sol:34"
            },
            {
              "contract": "FantomArtTradable",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradable.sol:37"
            },
            {
              "contract": "FantomArtTradable",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradable.sol:39"
            },
            {
              "contract": "FantomArtTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradable.sol:41"
            },
            {
              "contract": "FantomArtTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtTradable.sol:43"
            },
            {
              "contract": "FantomArtTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradable.sol:45"
            },
            {
              "contract": "FantomArtTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradable.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "OwnableDelegateProxy": {
        "src": "contracts\\FantomArtTradablePrivate.sol:10",
        "version": {
          "withMetadata": "8c3f61a738262e24601afe3e747ea55777ff62b53a9f990d99bef091891ab8fc",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyRegistry": {
        "src": "contracts\\FantomArtTradablePrivate.sol:12",
        "version": {
          "withMetadata": "58da28d11247b3be8d35479bccdae623f77c10513ed165c826e8963dc6812924",
          "withoutMetadata": "aa5f7868673867df9c21749320a6e16e4ca5f9990a18e1a55b0cff496ccd615d",
          "linkedWithoutMetadata": "aa5f7868673867df9c21749320a6e16e4ca5f9990a18e1a55b0cff496ccd615d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ProxyRegistry",
              "label": "proxies",
              "type": "t_mapping(t_address,t_contract(OwnableDelegateProxy)5848)",
              "src": "contracts\\FantomArtTradablePrivate.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_contract(OwnableDelegateProxy)5848)": {
              "label": "mapping(address => contract OwnableDelegateProxy)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(OwnableDelegateProxy)5848": {
              "label": "contract OwnableDelegateProxy"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradablePrivate": {
        "src": "contracts\\FantomArtTradablePrivate.sol:22",
        "version": {
          "withMetadata": "d3e55bf7fab9e0783dc2a9984de9a5b42fa18a06540abaee046f6793e0a0d966",
          "withoutMetadata": "fdea5c874e471cd342851d70953bc34544f3144ebc53c9d7992b435f3b02e5a9",
          "linkedWithoutMetadata": "fdea5c874e471cd342851d70953bc34544f3144ebc53c9d7992b435f3b02e5a9"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradablePrivate",
            "src": "contracts\\FantomArtTradablePrivate.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts\\FantomArtTradablePrivate.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradablePrivate.sol:28"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts\\FantomArtTradablePrivate.sol:31"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtTradablePrivate.sol:33"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\FantomArtTradablePrivate.sol:34"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradablePrivate.sol:37"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradablePrivate.sol:39"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradablePrivate.sol:41"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtTradablePrivate.sol:43"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradablePrivate.sol:45"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradablePrivate.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Artion": {
        "src": "contracts\\FantomArtion.sol:9",
        "version": {
          "withMetadata": "09aaeeabbb5ef323460cc3def838b7fb804ad4fc95452df904e23ba6dc037224",
          "withoutMetadata": "c7781e9281a75bfb606f9859098482b2385eb20c5bdc7c98ff2a8b56ff11f70e",
          "linkedWithoutMetadata": "c7781e9281a75bfb606f9859098482b2385eb20c5bdc7c98ff2a8b56ff11f70e"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable,uint256)",
          "mint(address,string)",
          "burn(uint256)",
          "exists(uint256)",
          "isApproved(uint256,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Artion",
            "src": "contracts\\FantomArtion.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Artion",
              "label": "tokenIdPointer",
              "type": "t_uint256",
              "src": "contracts\\FantomArtion.sol:26"
            },
            {
              "contract": "Artion",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtion.sol:29"
            },
            {
              "contract": "Artion",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtion.sol:32"
            },
            {
              "contract": "Artion",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtion.sol:35"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuction": {
        "src": "contracts\\FantomAuction.sol:55",
        "version": {
          "withMetadata": "454bb90e673aa7b3096a080ad347d03c078beb40562563e38be29c8dc40f69f3",
          "withoutMetadata": "42b08f90c6323dd0b4ab7ce9ced9b8cf3f49168258bb8c313fe889af714aa662",
          "linkedWithoutMetadata": "42b08f90c6323dd0b4ab7ce9ced9b8cf3f49168258bb8c313fe889af714aa662"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable)",
          "createAuction(address,uint256,address,uint256,uint256,uint256)",
          "placeBid(address,uint256)",
          "placeBid(address,uint256,uint256)",
          "withdrawBid(address,uint256)",
          "resultAuction(address,uint256)",
          "cancelAuction(address,uint256)",
          "toggleIsPaused()",
          "updateMinBidIncrement(uint256)",
          "updateBidWithdrawalLockTime(uint256)",
          "updateAuctionReservePrice(address,uint256,uint256)",
          "updateAuctionStartTime(address,uint256,uint256)",
          "updateAuctionEndTime(address,uint256,uint256)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "getAuction(address,uint256)",
          "getHighestBidder(address,uint256)",
          "reclaimERC20(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "minBidIncrement",
            "src": "contracts\\FantomAuction.sol:155"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bidWithdrawalLockTime",
            "src": "contracts\\FantomAuction.sol:158"
          },
          {
            "kind": "state-variable-assignment",
            "name": "platformFee",
            "src": "contracts\\FantomAuction.sol:161"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuction",
              "label": "auctions",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6655_storage))",
              "src": "contracts\\FantomAuction.sol:149"
            },
            {
              "contract": "FantomAuction",
              "label": "highestBids",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6662_storage))",
              "src": "contracts\\FantomAuction.sol:152"
            },
            {
              "contract": "FantomAuction",
              "label": "minBidIncrement",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:155"
            },
            {
              "contract": "FantomAuction",
              "label": "bidWithdrawalLockTime",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:158"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:161"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFeeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomAuction.sol:164"
            },
            {
              "contract": "FantomAuction",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)6464",
              "src": "contracts\\FantomAuction.sol:167"
            },
            {
              "contract": "FantomAuction",
              "label": "isPaused",
              "type": "t_bool",
              "src": "contracts\\FantomAuction.sol:170"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6655_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.Auction))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(Auction)6655_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.Auction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Auction)6655_storage": {
              "label": "struct FantomAuction.Auction",
              "members": [
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "reservePrice",
                  "type": "t_uint256"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256"
                },
                {
                  "label": "resulted",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6662_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.HighestBid))"
            },
            "t_mapping(t_uint256,t_struct(HighestBid)6662_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.HighestBid)"
            },
            "t_struct(HighestBid)6662_storage": {
              "label": "struct FantomAuction.HighestBid",
              "members": [
                {
                  "label": "bidder",
                  "type": "t_address_payable"
                },
                {
                  "label": "bid",
                  "type": "t_uint256"
                },
                {
                  "label": "lastBidTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)6464": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAddressRegistry": {
        "src": "contracts\\FantomPriceFeed.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenRegistry()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomBundleMarketplace": {
        "src": "contracts\\FantomMarketplace.sol:33",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,address,address)",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomTokenRegistry": {
        "src": "contracts\\FantomPriceFeed.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enabled(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomBundleMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:39",
        "version": {
          "withMetadata": "fd9e14d185949b78981a2aca15f5e70ffe8cf726bad43387c4eb9cd8e472619f",
          "withoutMetadata": "502f551b2fe6abf60d80cb7297a245f718e2b638dd364e32410507ea23faab1b",
          "linkedWithoutMetadata": "502f551b2fe6abf60d80cb7297a245f718e2b638dd364e32410507ea23faab1b"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20",
          "EnumerableSet"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "getListing(address,string)",
          "listItem(string,address[],uint256[],uint256[],address,uint256,uint256)",
          "cancelListing(string)",
          "updateListing(string,address,uint256)",
          "buyItem(string)",
          "buyItem(string,address)",
          "createOffer(string,address,uint256,uint256)",
          "cancelOffer(string)",
          "acceptOffer(string,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomBundleMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8523_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:106"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "owners",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts\\FantomBundleMarketplace.sol:109"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIdsPerItem",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4398_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:111"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "nftIndexes",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))",
              "src": "contracts\\FantomBundleMarketplace.sol:113"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIds",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "src": "contracts\\FantomBundleMarketplace.sol:115"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "offers",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8530_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:118"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomBundleMarketplace.sol:121"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomBundleMarketplace.sol:124"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)8386",
              "src": "contracts\\FantomBundleMarketplace.sol:127"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8523_storage))": {
              "label": "mapping(address => mapping(bytes32 => struct FantomBundleMarketplace.Listing))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_struct(Listing)8523_storage)": {
              "label": "mapping(bytes32 => struct FantomBundleMarketplace.Listing)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Listing)8523_storage": {
              "label": "struct FantomBundleMarketplace.Listing",
              "members": [
                {
                  "label": "nfts",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "tokenIds",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "quantities",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4398_storage))": {
              "label": "mapping(address => mapping(uint256 => struct EnumerableSet.Bytes32Set))"
            },
            "t_mapping(t_uint256,t_struct(Bytes32Set)4398_storage)": {
              "label": "mapping(uint256 => struct EnumerableSet.Bytes32Set)"
            },
            "t_struct(Bytes32Set)4398_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4218_storage"
                }
              ]
            },
            "t_struct(Set)4218_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
              "label": "mapping(bytes32 => mapping(address => mapping(uint256 => uint256)))"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8530_storage))": {
              "label": "mapping(bytes32 => mapping(address => struct FantomBundleMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)8530_storage)": {
              "label": "mapping(address => struct FantomBundleMarketplace.Offer)"
            },
            "t_struct(Offer)8530_storage": {
              "label": "struct FantomBundleMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)8386": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomMarketplace": {
        "src": "contracts\\FantomMarketplace.sol:55",
        "version": {
          "withMetadata": "49ba9d9d3fc3d89e1acca70b1d955be9506bd3d32dcd712d064ea26e2727a84b",
          "withoutMetadata": "cc57551ec19e66dda0f63b628cd4222293299bc1a85baec7d809f311950b146b",
          "linkedWithoutMetadata": "cc57551ec19e66dda0f63b628cd4222293299bc1a85baec7d809f311950b146b"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable,uint16)",
          "listItem(address,uint256,uint256,address,uint256,uint256)",
          "cancelListing(address,uint256)",
          "updateListing(address,uint256,address,uint256)",
          "buyItem(address,uint256,address payable)",
          "buyItem(address,uint256,address,address)",
          "createOffer(address,uint256,address,uint256,uint256,uint256)",
          "cancelOffer(address,uint256)",
          "acceptOffer(address,uint256,address)",
          "registerRoyalty(address,uint256,uint16)",
          "registerCollectionRoyalty(address,address,uint16,address)",
          "getPrice(address)",
          "updatePlatformFee(uint16)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomMarketplace",
              "label": "minters",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
              "src": "contracts\\FantomMarketplace.sol:135"
            },
            {
              "contract": "FantomMarketplace",
              "label": "royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint16))",
              "src": "contracts\\FantomMarketplace.sol:138"
            },
            {
              "contract": "FantomMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10702_storage)))",
              "src": "contracts\\FantomMarketplace.sol:141"
            },
            {
              "contract": "FantomMarketplace",
              "label": "offers",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10711_storage)))",
              "src": "contracts\\FantomMarketplace.sol:145"
            },
            {
              "contract": "FantomMarketplace",
              "label": "platformFee",
              "type": "t_uint16",
              "src": "contracts\\FantomMarketplace.sol:149"
            },
            {
              "contract": "FantomMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomMarketplace.sol:152"
            },
            {
              "contract": "FantomMarketplace",
              "label": "collectionRoyalties",
              "type": "t_mapping(t_address,t_struct(CollectionRoyalty)10718_storage)",
              "src": "contracts\\FantomMarketplace.sol:155"
            },
            {
              "contract": "FantomMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)10552",
              "src": "contracts\\FantomMarketplace.sol:158"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
              "label": "mapping(address => mapping(uint256 => address))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint16))": {
              "label": "mapping(address => mapping(uint256 => uint16))"
            },
            "t_mapping(t_uint256,t_uint16)": {
              "label": "mapping(uint256 => uint16)"
            },
            "t_uint16": {
              "label": "uint16"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10702_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Listing)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10702_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Listing))"
            },
            "t_mapping(t_address,t_struct(Listing)10702_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Listing)"
            },
            "t_struct(Listing)10702_storage": {
              "label": "struct FantomMarketplace.Listing",
              "members": [
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10711_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Offer)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10711_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)10711_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Offer)"
            },
            "t_struct(Offer)10711_storage": {
              "label": "struct FantomMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_struct(CollectionRoyalty)10718_storage)": {
              "label": "mapping(address => struct FantomMarketplace.CollectionRoyalty)"
            },
            "t_struct(CollectionRoyalty)10718_storage": {
              "label": "struct FantomMarketplace.CollectionRoyalty",
              "members": [
                {
                  "label": "royalty",
                  "type": "t_uint16"
                },
                {
                  "label": "creator",
                  "type": "t_address"
                },
                {
                  "label": "feeRecipient",
                  "type": "t_address"
                }
              ]
            },
            "t_contract(IFantomAddressRegistry)10552": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomNFTFactory": {
        "src": "contracts\\FantomMarketplace.sol:41",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exists(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomPriceFeed": {
        "src": "contracts\\FantomMarketplace.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "wFTM()",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactory": {
        "src": "contracts\\FantomNFTFactory.sol:8",
        "version": {
          "withMetadata": "a3d19cad134d00c2bd0320f0f376080deb0bf2f7d47944479836c856256d2252",
          "withoutMetadata": "cf477a4133942204c4b570215c71e15f133c398758afd27c29c25e048f380ab2",
          "linkedWithoutMetadata": "cf477a4133942204c4b570215c71e15f133c398758afd27c29c25e048f380ab2"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactory",
            "src": "contracts\\FantomNFTFactory.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactory",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:14"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:17"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:20"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactory.sol:23"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactory.sol:26"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTFactory.sol:29"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomNFTFactory.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactoryPrivate": {
        "src": "contracts\\FantomNFTFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "47bb67aeb6416610e568e6a78cc4d09eea37178af19ee24610042495d6bbb1f2",
          "withoutMetadata": "792bd5bb899b2c89a3a205154ad88282e8e7392f844f84c10aadef541ce049d8",
          "linkedWithoutMetadata": "792bd5bb899b2c89a3a205154ad88282e8e7392f844f84c10aadef541ce049d8"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactoryPrivate",
            "src": "contracts\\FantomNFTFactoryPrivate.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:29"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradable": {
        "src": "contracts\\FantomNFTTradable.sol:12",
        "version": {
          "withMetadata": "dcdaa7d4dd2c549389ad6b21a23ccfbd526c9b63735c02dc5cc618dc53dbef4c",
          "withoutMetadata": "b715fc2696419c35653e85f48809a39e29cce31ebdd023855f0f9b84bfb96f4b",
          "linkedWithoutMetadata": "b715fc2696419c35653e85f48809a39e29cce31ebdd023855f0f9b84bfb96f4b"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradable",
            "src": "contracts\\FantomNFTTradable.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts\\FantomNFTTradable.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradable",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:27"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:28"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:29"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradable.sol:30"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradable.sol:33"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTTradable.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradablePrivate": {
        "src": "contracts\\FantomNFTTradablePrivate.sol:12",
        "version": {
          "withMetadata": "d8ab60c2bc623353d0c1f652d43f08b3a45029fd184c2d36b8205020f52ad007",
          "withoutMetadata": "961408c66908a1ebfa2cdf7158b1c8a10ea70a213cf353d662b9ffea3b5d64e9",
          "linkedWithoutMetadata": "961408c66908a1ebfa2cdf7158b1c8a10ea70a213cf353d662b9ffea3b5d64e9"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradablePrivate",
            "src": "contracts\\FantomNFTTradablePrivate.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts\\FantomNFTTradablePrivate.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:27"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:28"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:29"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradablePrivate.sol:30"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradablePrivate.sol:33"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTTradablePrivate.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomPriceFeed": {
        "src": "contracts\\FantomPriceFeed.sol:21",
        "version": {
          "withMetadata": "a658a0a13f9184fc0b0f5d665c35d690edc7398782cbefd01c937b2bb18dcc48",
          "withoutMetadata": "a9e82cc54a14fd3bc58dbaa79b4045b14b4c9b290321beb8d121cfd1e034c6b7",
          "linkedWithoutMetadata": "a9e82cc54a14fd3bc58dbaa79b4045b14b4c9b290321beb8d121cfd1e034c6b7"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerOracle(address,address)",
          "updateOracle(address,address)",
          "getPrice(address)",
          "updateAddressRegistry(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomPriceFeed",
            "src": "contracts\\FantomPriceFeed.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomPriceFeed",
              "label": "oracles",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts\\FantomPriceFeed.sol:23"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "addressRegistry",
              "type": "t_address",
              "src": "contracts\\FantomPriceFeed.sol:26"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "wFTM",
              "type": "t_address",
              "src": "contracts\\FantomPriceFeed.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IOracle": {
        "src": "contracts\\FantomPriceFeed.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestAnswer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomTokenRegistry": {
        "src": "contracts\\FantomTokenRegistry.sol:7",
        "version": {
          "withMetadata": "8c38d27bdcb299edad68d09abde598ab7ff156407e293303f4f331832d552950",
          "withoutMetadata": "8d79c556bc9bb807b68178115ba5454cbf257f09ac10f8108786804cc2b2ce86",
          "linkedWithoutMetadata": "8d79c556bc9bb807b68178115ba5454cbf257f09ac10f8108786804cc2b2ce86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "add(address)",
          "remove(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomTokenRegistry",
              "label": "enabled",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomTokenRegistry.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155": {
        "src": "contracts\\library\\ERC1155.sol:11",
        "version": {
          "withMetadata": "e38675e88b1255c14bafbddea2fb3de4064da952960a5df5479549948b078eb9",
          "withoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c",
          "linkedWithoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c"
        },
        "inherit": [
          "IERC165"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155",
              "label": "balances",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts\\library\\ERC1155.sol:25"
            },
            {
              "contract": "ERC1155",
              "label": "operators",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts\\library\\ERC1155.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155Metadata": {
        "src": "contracts\\library\\ERC1155Metadata.sol:9",
        "version": {
          "withMetadata": "2d06782b92683f552c11c8c60edf4fda8a9a35cebcc57eb7114a6942e6331208",
          "withoutMetadata": "e6daebc392a1105a55ecdc42deea5d1e0d27078a64ec91c306dbb0b833545021",
          "linkedWithoutMetadata": "e6daebc392a1105a55ecdc42deea5d1e0d27078a64ec91c306dbb0b833545021"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155Metadata",
              "label": "baseMetadataURI",
              "type": "t_string_storage",
              "src": "contracts\\library\\ERC1155Metadata.sol:12"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155MintBurn": {
        "src": "contracts\\library\\ERC1155MintBurn.sol:9",
        "version": {
          "withMetadata": "1170e1b7b28b6ea67df85423aded03db6d14ef6a2a823e423b9cc6d6206eca1d",
          "withoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c",
          "linkedWithoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c"
        },
        "inherit": [
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155TokenReceiver": {
        "src": "contracts\\library\\IERC1155TokenReceiver.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BiddingContractMock": {
        "src": "contracts\\mock\\BiddingContractMock.sol:7",
        "version": {
          "withMetadata": "2ddf868488a4bb607b11f15064150516d236a964086bda8cf47679a877d2e0d3",
          "withoutMetadata": "bb0412333928df554dd3ad72cd3a6e7881eb495118185c1adbf9bb85451157a0",
          "linkedWithoutMetadata": "bb0412333928df554dd3ad72cd3a6e7881eb495118185c1adbf9bb85451157a0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "bid(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BiddingContractMock",
            "src": "contracts\\mock\\BiddingContractMock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BiddingContractMock",
              "label": "auctionContract",
              "type": "t_contract(FantomAuction)8358",
              "src": "contracts\\mock\\BiddingContractMock.sol:8"
            }
          ],
          "types": {
            "t_contract(FantomAuction)8358": {
              "label": "contract FantomAuction"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuctionMock": {
        "src": "contracts\\mock\\FantomAuctionMock.sol:7",
        "version": {
          "withMetadata": "4c158721ad2654576d19eef31dad969f85ac8baf99dc2005f6d8b3262006b6f1",
          "withoutMetadata": "0726a5554392e799019d614e42a300530b01ff2efd5e1c203e4de3d2215341b7",
          "linkedWithoutMetadata": "0726a5554392e799019d614e42a300530b01ff2efd5e1c203e4de3d2215341b7"
        },
        "inherit": [
          "FantomAuction",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "setNowOverride(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuctionMock",
              "label": "nowOverride",
              "type": "t_uint256",
              "src": "contracts\\mock\\FantomAuctionMock.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts\\mock\\MockERC20.sol:7",
        "version": {
          "withMetadata": "8a957e21c0b0d32c06b62f1e2bcfcf3fa08852c238eabeb9d5a0b12ab9a133b4",
          "withoutMetadata": "fdf7012d757f3885a979b8d5e8de23eaa8f27d3d57b8b133ad305739a8277957",
          "linkedWithoutMetadata": "fdf7012d757f3885a979b8d5e8de23eaa8f27d3d57b8b133ad305739a8277957"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts\\mock\\MockERC20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:304",
        "version": {
          "withMetadata": "953a5a25df22a6c1b394fa5bfb572b8b89e51eff28531c242f981a4d7a42de91",
          "withoutMetadata": "953a5a25df22a6c1b394fa5bfb572b8b89e51eff28531c242f981a4d7a42de91",
          "linkedWithoutMetadata": "953a5a25df22a6c1b394fa5bfb572b8b89e51eff28531c242f981a4d7a42de91"
        },
        "inherit": [
          "UpgradeabilityProxy",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AdminUpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:314"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:392"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:228",
        "version": {
          "withMetadata": "d8b876ebcdbed2da609ce8db823c306dfa79caa8d013c2b03bf3293bb3a0679b",
          "withoutMetadata": "d8b876ebcdbed2da609ce8db823c306dfa79caa8d013c2b03bf3293bb3a0679b",
          "linkedWithoutMetadata": "d8b876ebcdbed2da609ce8db823c306dfa79caa8d013c2b03bf3293bb3a0679b"
        },
        "inherit": [
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:237"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:241"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyAdmin": {
        "src": "contracts\\proxy\\ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "52c58b4224d04fcb69bbb9fcb76036691b4b609722815d0adeda9452838787d7",
          "withoutMetadata": "ed1aee2f0dae262982d214e10fdee51b42af8a6317158eebffb1d3b96186cd72",
          "linkedWithoutMetadata": "ed1aee2f0dae262982d214e10fdee51b42af8a6317158eebffb1d3b96186cd72"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\math\\SafeMath.sol:18",
        "version": {
          "withMetadata": "12f8b63975cec359166dc714be4e684b4fcf7c0497b2176e313e78b0f08171f8",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "dd15e04a1561397fbc7c3ae3ad394763be5dadec2c60082138bbf64746f457f8",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165",
            "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC165",
              "label": "_supportedInterfaces",
              "type": "t_mapping(t_bytes4,t_bool)",
              "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "contracts\\library\\IERC165.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155": {
        "src": "@openzeppelin\\contracts\\token\\ERC1155\\IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:33",
        "version": {
          "withMetadata": "5385d8f9a2a6008fecc420942e644bf860ccc5a0a87536e3a478b41bdad43db8",
          "withoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393",
          "linkedWithoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:44"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\SafeERC20.sol:18",
        "version": {
          "withMetadata": "ac490452d006a298fecb47eab43f8b56fc24a8af6c1e9589be882f66b71dcf29",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:21",
        "version": {
          "withMetadata": "1263ec9c299b38623bf2ed229b22524a9cd8778d2d7177950a88882c93ac2d47",
          "withoutMetadata": "3b9603e3ba8de701bdbd85fd5e78921e81db89f785601570458c066456264033",
          "linkedWithoutMetadata": "3b9603e3ba8de701bdbd85fd5e78921e81db89f785601570458c066456264033"
        },
        "inherit": [
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address",
          "EnumerableSet",
          "EnumerableMap",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "baseURI()",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:93"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_holderTokens",
              "type": "t_mapping(t_address,t_struct(UintSet)4604_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenOwners",
              "type": "t_struct(UintToAddressMap)3981_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:42"
            },
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:45"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:48"
            },
            {
              "contract": "ERC721",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:51"
            },
            {
              "contract": "ERC721",
              "label": "_baseURI",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(UintSet)4604_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UintSet)4604_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4218_storage"
                }
              ]
            },
            "t_struct(Set)4218_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(UintToAddressMap)3981_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)3663_storage"
                }
              ]
            },
            "t_struct(Map)3663_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)3655_storage)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_struct(MapEntry)3655_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]"
            },
            "t_struct(MapEntry)3655_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Enumerable.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:84",
        "version": {
          "withMetadata": "6ebc18947215038323b426a12b02cef514b75866073c7c96e534ed8d50616f7d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableMap": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableMap.sol:29",
        "version": {
          "withMetadata": "73725cbf9d2d1b2137d29a8a838af6227094ea37e1f8d67c6e200e7ab9da7ddd",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableSet.sol:29",
        "version": {
          "withMetadata": "93c63380dd1aced02757debdc25c8b6a733c4d4148ef735e290102573c76ca93",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:8",
        "version": {
          "withMetadata": "943f736564e78cbe4b2ebc37a12345bea28446ff07a76171b7a8cb7eb81c3c06",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomAddressRegistry": {
        "src": "contracts\\FantomAddressRegistry.sol:8",
        "version": {
          "withMetadata": "10371c20d9f79786b299a3538aac34802c3978b59299fd4651d14a15d73cd69a",
          "withoutMetadata": "b8b02879464d53b43faa6a13553775a50f3ff1f589f7790ee632b882717bb59f",
          "linkedWithoutMetadata": "b8b02879464d53b43faa6a13553775a50f3ff1f589f7790ee632b882717bb59f"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "updateArtion(address)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateNFTFactory(address)",
          "updateNFTFactoryPrivate(address)",
          "updateArtFactory(address)",
          "updateArtFactoryPrivate(address)",
          "updateTokenRegistry(address)",
          "updatePriceFeed(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAddressRegistry",
              "label": "artion",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:12"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:15"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:18"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:21"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "factory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:24"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:27"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "artFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:30"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateArtFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:33"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "tokenRegistry",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:36"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "priceFeed",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactory": {
        "src": "contracts\\FantomArtFactory.sol:8",
        "version": {
          "withMetadata": "355607f8ae94b3c82b3ecc50c1c4141fe70a0c0ae5a8b3d768c1c191c7e5ae1a",
          "withoutMetadata": "961f82515b65d228025a56be522ac6169b7ed4194d3236e06c0203f57e9b3eb1",
          "linkedWithoutMetadata": "961f82515b65d228025a56be522ac6169b7ed4194d3236e06c0203f57e9b3eb1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactory",
            "src": "contracts\\FantomArtFactory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactory.sol:14"
            },
            {
              "contract": "FantomArtFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactory.sol:17"
            },
            {
              "contract": "FantomArtFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactory.sol:20"
            },
            {
              "contract": "FantomArtFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactory.sol:23"
            },
            {
              "contract": "FantomArtFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtFactory.sol:26"
            },
            {
              "contract": "FantomArtFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomArtFactory.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactoryPrivate": {
        "src": "contracts\\FantomArtFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "e0aa82818a543e72845eee46f1f1cfb05795043a745c7f9f7e92fe97b62baa01",
          "withoutMetadata": "fc94fc833777fcae854637835b8783ac9eb36ceceadb309dcb1ab3f5b2d280e4",
          "linkedWithoutMetadata": "fc94fc833777fcae854637835b8783ac9eb36ceceadb309dcb1ab3f5b2d280e4"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactoryPrivate",
            "src": "contracts\\FantomArtFactoryPrivate.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomArtFactoryPrivate.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradable": {
        "src": "contracts\\FantomArtTradable.sol:22",
        "version": {
          "withMetadata": "f76e651d5d8916ae004d7071ff3f03096a9091c3105905fd006c9467899496d3",
          "withoutMetadata": "f33b5082790284cfcfe598c9b5f69a0ce350cda1bd7a36032d7877bbb65b2b8b",
          "linkedWithoutMetadata": "f33b5082790284cfcfe598c9b5f69a0ce350cda1bd7a36032d7877bbb65b2b8b"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradable",
            "src": "contracts\\FantomArtTradable.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts\\FantomArtTradable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradable",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradable.sol:28"
            },
            {
              "contract": "FantomArtTradable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts\\FantomArtTradable.sol:31"
            },
            {
              "contract": "FantomArtTradable",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtTradable.sol:33"
            },
            {
              "contract": "FantomArtTradable",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\FantomArtTradable.sol:34"
            },
            {
              "contract": "FantomArtTradable",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradable.sol:37"
            },
            {
              "contract": "FantomArtTradable",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradable.sol:39"
            },
            {
              "contract": "FantomArtTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradable.sol:41"
            },
            {
              "contract": "FantomArtTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtTradable.sol:43"
            },
            {
              "contract": "FantomArtTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradable.sol:45"
            },
            {
              "contract": "FantomArtTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradable.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "OwnableDelegateProxy": {
        "src": "contracts\\FantomArtTradablePrivate.sol:10",
        "version": {
          "withMetadata": "8c3f61a738262e24601afe3e747ea55777ff62b53a9f990d99bef091891ab8fc",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyRegistry": {
        "src": "contracts\\FantomArtTradablePrivate.sol:12",
        "version": {
          "withMetadata": "58da28d11247b3be8d35479bccdae623f77c10513ed165c826e8963dc6812924",
          "withoutMetadata": "aa5f7868673867df9c21749320a6e16e4ca5f9990a18e1a55b0cff496ccd615d",
          "linkedWithoutMetadata": "aa5f7868673867df9c21749320a6e16e4ca5f9990a18e1a55b0cff496ccd615d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ProxyRegistry",
              "label": "proxies",
              "type": "t_mapping(t_address,t_contract(OwnableDelegateProxy)5848)",
              "src": "contracts\\FantomArtTradablePrivate.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_contract(OwnableDelegateProxy)5848)": {
              "label": "mapping(address => contract OwnableDelegateProxy)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(OwnableDelegateProxy)5848": {
              "label": "contract OwnableDelegateProxy"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradablePrivate": {
        "src": "contracts\\FantomArtTradablePrivate.sol:22",
        "version": {
          "withMetadata": "d3e55bf7fab9e0783dc2a9984de9a5b42fa18a06540abaee046f6793e0a0d966",
          "withoutMetadata": "fdea5c874e471cd342851d70953bc34544f3144ebc53c9d7992b435f3b02e5a9",
          "linkedWithoutMetadata": "fdea5c874e471cd342851d70953bc34544f3144ebc53c9d7992b435f3b02e5a9"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradablePrivate",
            "src": "contracts\\FantomArtTradablePrivate.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts\\FantomArtTradablePrivate.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradablePrivate.sol:28"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts\\FantomArtTradablePrivate.sol:31"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtTradablePrivate.sol:33"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\FantomArtTradablePrivate.sol:34"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradablePrivate.sol:37"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradablePrivate.sol:39"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradablePrivate.sol:41"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtTradablePrivate.sol:43"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradablePrivate.sol:45"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradablePrivate.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Artion": {
        "src": "contracts\\FantomArtion.sol:9",
        "version": {
          "withMetadata": "09aaeeabbb5ef323460cc3def838b7fb804ad4fc95452df904e23ba6dc037224",
          "withoutMetadata": "c7781e9281a75bfb606f9859098482b2385eb20c5bdc7c98ff2a8b56ff11f70e",
          "linkedWithoutMetadata": "c7781e9281a75bfb606f9859098482b2385eb20c5bdc7c98ff2a8b56ff11f70e"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable,uint256)",
          "mint(address,string)",
          "burn(uint256)",
          "exists(uint256)",
          "isApproved(uint256,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Artion",
            "src": "contracts\\FantomArtion.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Artion",
              "label": "tokenIdPointer",
              "type": "t_uint256",
              "src": "contracts\\FantomArtion.sol:26"
            },
            {
              "contract": "Artion",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtion.sol:29"
            },
            {
              "contract": "Artion",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtion.sol:32"
            },
            {
              "contract": "Artion",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtion.sol:35"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuction": {
        "src": "contracts\\FantomAuction.sol:55",
        "version": {
          "withMetadata": "454bb90e673aa7b3096a080ad347d03c078beb40562563e38be29c8dc40f69f3",
          "withoutMetadata": "42b08f90c6323dd0b4ab7ce9ced9b8cf3f49168258bb8c313fe889af714aa662",
          "linkedWithoutMetadata": "42b08f90c6323dd0b4ab7ce9ced9b8cf3f49168258bb8c313fe889af714aa662"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable)",
          "createAuction(address,uint256,address,uint256,uint256,uint256)",
          "placeBid(address,uint256)",
          "placeBid(address,uint256,uint256)",
          "withdrawBid(address,uint256)",
          "resultAuction(address,uint256)",
          "cancelAuction(address,uint256)",
          "toggleIsPaused()",
          "updateMinBidIncrement(uint256)",
          "updateBidWithdrawalLockTime(uint256)",
          "updateAuctionReservePrice(address,uint256,uint256)",
          "updateAuctionStartTime(address,uint256,uint256)",
          "updateAuctionEndTime(address,uint256,uint256)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "getAuction(address,uint256)",
          "getHighestBidder(address,uint256)",
          "reclaimERC20(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "minBidIncrement",
            "src": "contracts\\FantomAuction.sol:155"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bidWithdrawalLockTime",
            "src": "contracts\\FantomAuction.sol:158"
          },
          {
            "kind": "state-variable-assignment",
            "name": "platformFee",
            "src": "contracts\\FantomAuction.sol:161"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuction",
              "label": "auctions",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6655_storage))",
              "src": "contracts\\FantomAuction.sol:149"
            },
            {
              "contract": "FantomAuction",
              "label": "highestBids",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6662_storage))",
              "src": "contracts\\FantomAuction.sol:152"
            },
            {
              "contract": "FantomAuction",
              "label": "minBidIncrement",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:155"
            },
            {
              "contract": "FantomAuction",
              "label": "bidWithdrawalLockTime",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:158"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:161"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFeeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomAuction.sol:164"
            },
            {
              "contract": "FantomAuction",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)6464",
              "src": "contracts\\FantomAuction.sol:167"
            },
            {
              "contract": "FantomAuction",
              "label": "isPaused",
              "type": "t_bool",
              "src": "contracts\\FantomAuction.sol:170"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6655_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.Auction))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(Auction)6655_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.Auction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Auction)6655_storage": {
              "label": "struct FantomAuction.Auction",
              "members": [
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "reservePrice",
                  "type": "t_uint256"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256"
                },
                {
                  "label": "resulted",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6662_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.HighestBid))"
            },
            "t_mapping(t_uint256,t_struct(HighestBid)6662_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.HighestBid)"
            },
            "t_struct(HighestBid)6662_storage": {
              "label": "struct FantomAuction.HighestBid",
              "members": [
                {
                  "label": "bidder",
                  "type": "t_address_payable"
                },
                {
                  "label": "bid",
                  "type": "t_uint256"
                },
                {
                  "label": "lastBidTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)6464": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAddressRegistry": {
        "src": "contracts\\FantomPriceFeed.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenRegistry()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomBundleMarketplace": {
        "src": "contracts\\FantomMarketplace.sol:33",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,address,address)",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomTokenRegistry": {
        "src": "contracts\\FantomPriceFeed.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enabled(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomBundleMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:39",
        "version": {
          "withMetadata": "fd9e14d185949b78981a2aca15f5e70ffe8cf726bad43387c4eb9cd8e472619f",
          "withoutMetadata": "502f551b2fe6abf60d80cb7297a245f718e2b638dd364e32410507ea23faab1b",
          "linkedWithoutMetadata": "502f551b2fe6abf60d80cb7297a245f718e2b638dd364e32410507ea23faab1b"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20",
          "EnumerableSet"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "getListing(address,string)",
          "listItem(string,address[],uint256[],uint256[],address,uint256,uint256)",
          "cancelListing(string)",
          "updateListing(string,address,uint256)",
          "buyItem(string)",
          "buyItem(string,address)",
          "createOffer(string,address,uint256,uint256)",
          "cancelOffer(string)",
          "acceptOffer(string,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomBundleMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8523_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:106"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "owners",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts\\FantomBundleMarketplace.sol:109"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIdsPerItem",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4398_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:111"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "nftIndexes",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))",
              "src": "contracts\\FantomBundleMarketplace.sol:113"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIds",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "src": "contracts\\FantomBundleMarketplace.sol:115"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "offers",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8530_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:118"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomBundleMarketplace.sol:121"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomBundleMarketplace.sol:124"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)8386",
              "src": "contracts\\FantomBundleMarketplace.sol:127"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8523_storage))": {
              "label": "mapping(address => mapping(bytes32 => struct FantomBundleMarketplace.Listing))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_struct(Listing)8523_storage)": {
              "label": "mapping(bytes32 => struct FantomBundleMarketplace.Listing)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Listing)8523_storage": {
              "label": "struct FantomBundleMarketplace.Listing",
              "members": [
                {
                  "label": "nfts",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "tokenIds",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "quantities",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4398_storage))": {
              "label": "mapping(address => mapping(uint256 => struct EnumerableSet.Bytes32Set))"
            },
            "t_mapping(t_uint256,t_struct(Bytes32Set)4398_storage)": {
              "label": "mapping(uint256 => struct EnumerableSet.Bytes32Set)"
            },
            "t_struct(Bytes32Set)4398_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4218_storage"
                }
              ]
            },
            "t_struct(Set)4218_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
              "label": "mapping(bytes32 => mapping(address => mapping(uint256 => uint256)))"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8530_storage))": {
              "label": "mapping(bytes32 => mapping(address => struct FantomBundleMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)8530_storage)": {
              "label": "mapping(address => struct FantomBundleMarketplace.Offer)"
            },
            "t_struct(Offer)8530_storage": {
              "label": "struct FantomBundleMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)8386": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomMarketplace": {
        "src": "contracts\\FantomMarketplace.sol:55",
        "version": {
          "withMetadata": "49ba9d9d3fc3d89e1acca70b1d955be9506bd3d32dcd712d064ea26e2727a84b",
          "withoutMetadata": "cc57551ec19e66dda0f63b628cd4222293299bc1a85baec7d809f311950b146b",
          "linkedWithoutMetadata": "cc57551ec19e66dda0f63b628cd4222293299bc1a85baec7d809f311950b146b"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable,uint16)",
          "listItem(address,uint256,uint256,address,uint256,uint256)",
          "cancelListing(address,uint256)",
          "updateListing(address,uint256,address,uint256)",
          "buyItem(address,uint256,address payable)",
          "buyItem(address,uint256,address,address)",
          "createOffer(address,uint256,address,uint256,uint256,uint256)",
          "cancelOffer(address,uint256)",
          "acceptOffer(address,uint256,address)",
          "registerRoyalty(address,uint256,uint16)",
          "registerCollectionRoyalty(address,address,uint16,address)",
          "getPrice(address)",
          "updatePlatformFee(uint16)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomMarketplace",
              "label": "minters",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
              "src": "contracts\\FantomMarketplace.sol:135"
            },
            {
              "contract": "FantomMarketplace",
              "label": "royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint16))",
              "src": "contracts\\FantomMarketplace.sol:138"
            },
            {
              "contract": "FantomMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10702_storage)))",
              "src": "contracts\\FantomMarketplace.sol:141"
            },
            {
              "contract": "FantomMarketplace",
              "label": "offers",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10711_storage)))",
              "src": "contracts\\FantomMarketplace.sol:145"
            },
            {
              "contract": "FantomMarketplace",
              "label": "platformFee",
              "type": "t_uint16",
              "src": "contracts\\FantomMarketplace.sol:149"
            },
            {
              "contract": "FantomMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomMarketplace.sol:152"
            },
            {
              "contract": "FantomMarketplace",
              "label": "collectionRoyalties",
              "type": "t_mapping(t_address,t_struct(CollectionRoyalty)10718_storage)",
              "src": "contracts\\FantomMarketplace.sol:155"
            },
            {
              "contract": "FantomMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)10552",
              "src": "contracts\\FantomMarketplace.sol:158"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
              "label": "mapping(address => mapping(uint256 => address))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint16))": {
              "label": "mapping(address => mapping(uint256 => uint16))"
            },
            "t_mapping(t_uint256,t_uint16)": {
              "label": "mapping(uint256 => uint16)"
            },
            "t_uint16": {
              "label": "uint16"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10702_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Listing)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10702_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Listing))"
            },
            "t_mapping(t_address,t_struct(Listing)10702_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Listing)"
            },
            "t_struct(Listing)10702_storage": {
              "label": "struct FantomMarketplace.Listing",
              "members": [
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10711_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Offer)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10711_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)10711_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Offer)"
            },
            "t_struct(Offer)10711_storage": {
              "label": "struct FantomMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_struct(CollectionRoyalty)10718_storage)": {
              "label": "mapping(address => struct FantomMarketplace.CollectionRoyalty)"
            },
            "t_struct(CollectionRoyalty)10718_storage": {
              "label": "struct FantomMarketplace.CollectionRoyalty",
              "members": [
                {
                  "label": "royalty",
                  "type": "t_uint16"
                },
                {
                  "label": "creator",
                  "type": "t_address"
                },
                {
                  "label": "feeRecipient",
                  "type": "t_address"
                }
              ]
            },
            "t_contract(IFantomAddressRegistry)10552": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomNFTFactory": {
        "src": "contracts\\FantomMarketplace.sol:41",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exists(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomPriceFeed": {
        "src": "contracts\\FantomMarketplace.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "wFTM()",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactory": {
        "src": "contracts\\FantomNFTFactory.sol:8",
        "version": {
          "withMetadata": "a3d19cad134d00c2bd0320f0f376080deb0bf2f7d47944479836c856256d2252",
          "withoutMetadata": "cf477a4133942204c4b570215c71e15f133c398758afd27c29c25e048f380ab2",
          "linkedWithoutMetadata": "cf477a4133942204c4b570215c71e15f133c398758afd27c29c25e048f380ab2"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactory",
            "src": "contracts\\FantomNFTFactory.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactory",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:14"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:17"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:20"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactory.sol:23"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactory.sol:26"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTFactory.sol:29"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomNFTFactory.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactoryPrivate": {
        "src": "contracts\\FantomNFTFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "a78b4d46ab40fcbbe7764b7ea18c0e85e4a70eaea0ec770d5f25992311f35f19",
          "withoutMetadata": "792bd5bb899b2c89a3a205154ad88282e8e7392f844f84c10aadef541ce049d8",
          "linkedWithoutMetadata": "792bd5bb899b2c89a3a205154ad88282e8e7392f844f84c10aadef541ce049d8"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactoryPrivate",
            "src": "contracts\\FantomNFTFactoryPrivate.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:29"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradable": {
        "src": "contracts\\FantomNFTTradable.sol:12",
        "version": {
          "withMetadata": "dcdaa7d4dd2c549389ad6b21a23ccfbd526c9b63735c02dc5cc618dc53dbef4c",
          "withoutMetadata": "b715fc2696419c35653e85f48809a39e29cce31ebdd023855f0f9b84bfb96f4b",
          "linkedWithoutMetadata": "b715fc2696419c35653e85f48809a39e29cce31ebdd023855f0f9b84bfb96f4b"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradable",
            "src": "contracts\\FantomNFTTradable.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts\\FantomNFTTradable.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradable",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:27"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:28"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:29"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradable.sol:30"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradable.sol:33"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTTradable.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradablePrivate": {
        "src": "contracts\\FantomNFTTradablePrivate.sol:12",
        "version": {
          "withMetadata": "d8ab60c2bc623353d0c1f652d43f08b3a45029fd184c2d36b8205020f52ad007",
          "withoutMetadata": "961408c66908a1ebfa2cdf7158b1c8a10ea70a213cf353d662b9ffea3b5d64e9",
          "linkedWithoutMetadata": "961408c66908a1ebfa2cdf7158b1c8a10ea70a213cf353d662b9ffea3b5d64e9"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradablePrivate",
            "src": "contracts\\FantomNFTTradablePrivate.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts\\FantomNFTTradablePrivate.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:27"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:28"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:29"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradablePrivate.sol:30"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradablePrivate.sol:33"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTTradablePrivate.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomPriceFeed": {
        "src": "contracts\\FantomPriceFeed.sol:21",
        "version": {
          "withMetadata": "a658a0a13f9184fc0b0f5d665c35d690edc7398782cbefd01c937b2bb18dcc48",
          "withoutMetadata": "a9e82cc54a14fd3bc58dbaa79b4045b14b4c9b290321beb8d121cfd1e034c6b7",
          "linkedWithoutMetadata": "a9e82cc54a14fd3bc58dbaa79b4045b14b4c9b290321beb8d121cfd1e034c6b7"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerOracle(address,address)",
          "updateOracle(address,address)",
          "getPrice(address)",
          "updateAddressRegistry(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomPriceFeed",
            "src": "contracts\\FantomPriceFeed.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomPriceFeed",
              "label": "oracles",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts\\FantomPriceFeed.sol:23"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "addressRegistry",
              "type": "t_address",
              "src": "contracts\\FantomPriceFeed.sol:26"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "wFTM",
              "type": "t_address",
              "src": "contracts\\FantomPriceFeed.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IOracle": {
        "src": "contracts\\FantomPriceFeed.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestAnswer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomTokenRegistry": {
        "src": "contracts\\FantomTokenRegistry.sol:7",
        "version": {
          "withMetadata": "8c38d27bdcb299edad68d09abde598ab7ff156407e293303f4f331832d552950",
          "withoutMetadata": "8d79c556bc9bb807b68178115ba5454cbf257f09ac10f8108786804cc2b2ce86",
          "linkedWithoutMetadata": "8d79c556bc9bb807b68178115ba5454cbf257f09ac10f8108786804cc2b2ce86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "add(address)",
          "remove(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomTokenRegistry",
              "label": "enabled",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomTokenRegistry.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155": {
        "src": "contracts\\library\\ERC1155.sol:11",
        "version": {
          "withMetadata": "e38675e88b1255c14bafbddea2fb3de4064da952960a5df5479549948b078eb9",
          "withoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c",
          "linkedWithoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c"
        },
        "inherit": [
          "IERC165"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155",
              "label": "balances",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts\\library\\ERC1155.sol:25"
            },
            {
              "contract": "ERC1155",
              "label": "operators",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts\\library\\ERC1155.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155Metadata": {
        "src": "contracts\\library\\ERC1155Metadata.sol:9",
        "version": {
          "withMetadata": "2d06782b92683f552c11c8c60edf4fda8a9a35cebcc57eb7114a6942e6331208",
          "withoutMetadata": "e6daebc392a1105a55ecdc42deea5d1e0d27078a64ec91c306dbb0b833545021",
          "linkedWithoutMetadata": "e6daebc392a1105a55ecdc42deea5d1e0d27078a64ec91c306dbb0b833545021"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155Metadata",
              "label": "baseMetadataURI",
              "type": "t_string_storage",
              "src": "contracts\\library\\ERC1155Metadata.sol:12"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155MintBurn": {
        "src": "contracts\\library\\ERC1155MintBurn.sol:9",
        "version": {
          "withMetadata": "1170e1b7b28b6ea67df85423aded03db6d14ef6a2a823e423b9cc6d6206eca1d",
          "withoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c",
          "linkedWithoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c"
        },
        "inherit": [
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155TokenReceiver": {
        "src": "contracts\\library\\IERC1155TokenReceiver.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BiddingContractMock": {
        "src": "contracts\\mock\\BiddingContractMock.sol:7",
        "version": {
          "withMetadata": "2ddf868488a4bb607b11f15064150516d236a964086bda8cf47679a877d2e0d3",
          "withoutMetadata": "bb0412333928df554dd3ad72cd3a6e7881eb495118185c1adbf9bb85451157a0",
          "linkedWithoutMetadata": "bb0412333928df554dd3ad72cd3a6e7881eb495118185c1adbf9bb85451157a0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "bid(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BiddingContractMock",
            "src": "contracts\\mock\\BiddingContractMock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BiddingContractMock",
              "label": "auctionContract",
              "type": "t_contract(FantomAuction)8358",
              "src": "contracts\\mock\\BiddingContractMock.sol:8"
            }
          ],
          "types": {
            "t_contract(FantomAuction)8358": {
              "label": "contract FantomAuction"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuctionMock": {
        "src": "contracts\\mock\\FantomAuctionMock.sol:7",
        "version": {
          "withMetadata": "4c158721ad2654576d19eef31dad969f85ac8baf99dc2005f6d8b3262006b6f1",
          "withoutMetadata": "0726a5554392e799019d614e42a300530b01ff2efd5e1c203e4de3d2215341b7",
          "linkedWithoutMetadata": "0726a5554392e799019d614e42a300530b01ff2efd5e1c203e4de3d2215341b7"
        },
        "inherit": [
          "FantomAuction",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "setNowOverride(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuctionMock",
              "label": "nowOverride",
              "type": "t_uint256",
              "src": "contracts\\mock\\FantomAuctionMock.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts\\mock\\MockERC20.sol:7",
        "version": {
          "withMetadata": "8a957e21c0b0d32c06b62f1e2bcfcf3fa08852c238eabeb9d5a0b12ab9a133b4",
          "withoutMetadata": "fdf7012d757f3885a979b8d5e8de23eaa8f27d3d57b8b133ad305739a8277957",
          "linkedWithoutMetadata": "fdf7012d757f3885a979b8d5e8de23eaa8f27d3d57b8b133ad305739a8277957"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts\\mock\\MockERC20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:304",
        "version": {
          "withMetadata": "953a5a25df22a6c1b394fa5bfb572b8b89e51eff28531c242f981a4d7a42de91",
          "withoutMetadata": "953a5a25df22a6c1b394fa5bfb572b8b89e51eff28531c242f981a4d7a42de91",
          "linkedWithoutMetadata": "953a5a25df22a6c1b394fa5bfb572b8b89e51eff28531c242f981a4d7a42de91"
        },
        "inherit": [
          "UpgradeabilityProxy",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AdminUpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:314"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:392"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:228",
        "version": {
          "withMetadata": "d8b876ebcdbed2da609ce8db823c306dfa79caa8d013c2b03bf3293bb3a0679b",
          "withoutMetadata": "d8b876ebcdbed2da609ce8db823c306dfa79caa8d013c2b03bf3293bb3a0679b",
          "linkedWithoutMetadata": "d8b876ebcdbed2da609ce8db823c306dfa79caa8d013c2b03bf3293bb3a0679b"
        },
        "inherit": [
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:237"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:241"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyAdmin": {
        "src": "contracts\\proxy\\ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "52c58b4224d04fcb69bbb9fcb76036691b4b609722815d0adeda9452838787d7",
          "withoutMetadata": "ed1aee2f0dae262982d214e10fdee51b42af8a6317158eebffb1d3b96186cd72",
          "linkedWithoutMetadata": "ed1aee2f0dae262982d214e10fdee51b42af8a6317158eebffb1d3b96186cd72"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\math\\SafeMath.sol:18",
        "version": {
          "withMetadata": "12f8b63975cec359166dc714be4e684b4fcf7c0497b2176e313e78b0f08171f8",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "dd15e04a1561397fbc7c3ae3ad394763be5dadec2c60082138bbf64746f457f8",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165",
            "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC165",
              "label": "_supportedInterfaces",
              "type": "t_mapping(t_bytes4,t_bool)",
              "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "contracts\\library\\IERC165.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155": {
        "src": "@openzeppelin\\contracts\\token\\ERC1155\\IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:33",
        "version": {
          "withMetadata": "5385d8f9a2a6008fecc420942e644bf860ccc5a0a87536e3a478b41bdad43db8",
          "withoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393",
          "linkedWithoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:44"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\SafeERC20.sol:18",
        "version": {
          "withMetadata": "ac490452d006a298fecb47eab43f8b56fc24a8af6c1e9589be882f66b71dcf29",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:21",
        "version": {
          "withMetadata": "1263ec9c299b38623bf2ed229b22524a9cd8778d2d7177950a88882c93ac2d47",
          "withoutMetadata": "3b9603e3ba8de701bdbd85fd5e78921e81db89f785601570458c066456264033",
          "linkedWithoutMetadata": "3b9603e3ba8de701bdbd85fd5e78921e81db89f785601570458c066456264033"
        },
        "inherit": [
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address",
          "EnumerableSet",
          "EnumerableMap",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "baseURI()",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:93"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_holderTokens",
              "type": "t_mapping(t_address,t_struct(UintSet)4604_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenOwners",
              "type": "t_struct(UintToAddressMap)3981_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:42"
            },
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:45"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:48"
            },
            {
              "contract": "ERC721",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:51"
            },
            {
              "contract": "ERC721",
              "label": "_baseURI",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(UintSet)4604_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UintSet)4604_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4218_storage"
                }
              ]
            },
            "t_struct(Set)4218_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(UintToAddressMap)3981_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)3663_storage"
                }
              ]
            },
            "t_struct(Map)3663_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)3655_storage)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_struct(MapEntry)3655_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]"
            },
            "t_struct(MapEntry)3655_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Enumerable.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:84",
        "version": {
          "withMetadata": "6ebc18947215038323b426a12b02cef514b75866073c7c96e534ed8d50616f7d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableMap": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableMap.sol:29",
        "version": {
          "withMetadata": "73725cbf9d2d1b2137d29a8a838af6227094ea37e1f8d67c6e200e7ab9da7ddd",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableSet.sol:29",
        "version": {
          "withMetadata": "93c63380dd1aced02757debdc25c8b6a733c4d4148ef735e290102573c76ca93",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:8",
        "version": {
          "withMetadata": "943f736564e78cbe4b2ebc37a12345bea28446ff07a76171b7a8cb7eb81c3c06",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomAddressRegistry": {
        "src": "contracts\\FantomAddressRegistry.sol:8",
        "version": {
          "withMetadata": "10371c20d9f79786b299a3538aac34802c3978b59299fd4651d14a15d73cd69a",
          "withoutMetadata": "b8b02879464d53b43faa6a13553775a50f3ff1f589f7790ee632b882717bb59f",
          "linkedWithoutMetadata": "b8b02879464d53b43faa6a13553775a50f3ff1f589f7790ee632b882717bb59f"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "updateArtion(address)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateNFTFactory(address)",
          "updateNFTFactoryPrivate(address)",
          "updateArtFactory(address)",
          "updateArtFactoryPrivate(address)",
          "updateTokenRegistry(address)",
          "updatePriceFeed(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAddressRegistry",
              "label": "artion",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:12"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:15"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:18"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:21"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "factory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:24"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:27"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "artFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:30"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateArtFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:33"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "tokenRegistry",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:36"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "priceFeed",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactory": {
        "src": "contracts\\FantomArtFactory.sol:8",
        "version": {
          "withMetadata": "355607f8ae94b3c82b3ecc50c1c4141fe70a0c0ae5a8b3d768c1c191c7e5ae1a",
          "withoutMetadata": "961f82515b65d228025a56be522ac6169b7ed4194d3236e06c0203f57e9b3eb1",
          "linkedWithoutMetadata": "961f82515b65d228025a56be522ac6169b7ed4194d3236e06c0203f57e9b3eb1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactory",
            "src": "contracts\\FantomArtFactory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactory.sol:14"
            },
            {
              "contract": "FantomArtFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactory.sol:17"
            },
            {
              "contract": "FantomArtFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactory.sol:20"
            },
            {
              "contract": "FantomArtFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactory.sol:23"
            },
            {
              "contract": "FantomArtFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtFactory.sol:26"
            },
            {
              "contract": "FantomArtFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomArtFactory.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactoryPrivate": {
        "src": "contracts\\FantomArtFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "e0aa82818a543e72845eee46f1f1cfb05795043a745c7f9f7e92fe97b62baa01",
          "withoutMetadata": "fc94fc833777fcae854637835b8783ac9eb36ceceadb309dcb1ab3f5b2d280e4",
          "linkedWithoutMetadata": "fc94fc833777fcae854637835b8783ac9eb36ceceadb309dcb1ab3f5b2d280e4"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactoryPrivate",
            "src": "contracts\\FantomArtFactoryPrivate.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomArtFactoryPrivate.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradable": {
        "src": "contracts\\FantomArtTradable.sol:22",
        "version": {
          "withMetadata": "f76e651d5d8916ae004d7071ff3f03096a9091c3105905fd006c9467899496d3",
          "withoutMetadata": "f33b5082790284cfcfe598c9b5f69a0ce350cda1bd7a36032d7877bbb65b2b8b",
          "linkedWithoutMetadata": "f33b5082790284cfcfe598c9b5f69a0ce350cda1bd7a36032d7877bbb65b2b8b"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradable",
            "src": "contracts\\FantomArtTradable.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts\\FantomArtTradable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradable",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradable.sol:28"
            },
            {
              "contract": "FantomArtTradable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts\\FantomArtTradable.sol:31"
            },
            {
              "contract": "FantomArtTradable",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtTradable.sol:33"
            },
            {
              "contract": "FantomArtTradable",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\FantomArtTradable.sol:34"
            },
            {
              "contract": "FantomArtTradable",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradable.sol:37"
            },
            {
              "contract": "FantomArtTradable",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradable.sol:39"
            },
            {
              "contract": "FantomArtTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradable.sol:41"
            },
            {
              "contract": "FantomArtTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtTradable.sol:43"
            },
            {
              "contract": "FantomArtTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradable.sol:45"
            },
            {
              "contract": "FantomArtTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradable.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "OwnableDelegateProxy": {
        "src": "contracts\\FantomArtTradablePrivate.sol:10",
        "version": {
          "withMetadata": "8c3f61a738262e24601afe3e747ea55777ff62b53a9f990d99bef091891ab8fc",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyRegistry": {
        "src": "contracts\\FantomArtTradablePrivate.sol:12",
        "version": {
          "withMetadata": "58da28d11247b3be8d35479bccdae623f77c10513ed165c826e8963dc6812924",
          "withoutMetadata": "aa5f7868673867df9c21749320a6e16e4ca5f9990a18e1a55b0cff496ccd615d",
          "linkedWithoutMetadata": "aa5f7868673867df9c21749320a6e16e4ca5f9990a18e1a55b0cff496ccd615d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ProxyRegistry",
              "label": "proxies",
              "type": "t_mapping(t_address,t_contract(OwnableDelegateProxy)5848)",
              "src": "contracts\\FantomArtTradablePrivate.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_contract(OwnableDelegateProxy)5848)": {
              "label": "mapping(address => contract OwnableDelegateProxy)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(OwnableDelegateProxy)5848": {
              "label": "contract OwnableDelegateProxy"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradablePrivate": {
        "src": "contracts\\FantomArtTradablePrivate.sol:22",
        "version": {
          "withMetadata": "d3e55bf7fab9e0783dc2a9984de9a5b42fa18a06540abaee046f6793e0a0d966",
          "withoutMetadata": "fdea5c874e471cd342851d70953bc34544f3144ebc53c9d7992b435f3b02e5a9",
          "linkedWithoutMetadata": "fdea5c874e471cd342851d70953bc34544f3144ebc53c9d7992b435f3b02e5a9"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradablePrivate",
            "src": "contracts\\FantomArtTradablePrivate.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts\\FantomArtTradablePrivate.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradablePrivate.sol:28"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts\\FantomArtTradablePrivate.sol:31"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtTradablePrivate.sol:33"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\FantomArtTradablePrivate.sol:34"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradablePrivate.sol:37"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradablePrivate.sol:39"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradablePrivate.sol:41"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtTradablePrivate.sol:43"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradablePrivate.sol:45"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradablePrivate.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Artion": {
        "src": "contracts\\FantomArtion.sol:9",
        "version": {
          "withMetadata": "09aaeeabbb5ef323460cc3def838b7fb804ad4fc95452df904e23ba6dc037224",
          "withoutMetadata": "c7781e9281a75bfb606f9859098482b2385eb20c5bdc7c98ff2a8b56ff11f70e",
          "linkedWithoutMetadata": "c7781e9281a75bfb606f9859098482b2385eb20c5bdc7c98ff2a8b56ff11f70e"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable,uint256)",
          "mint(address,string)",
          "burn(uint256)",
          "exists(uint256)",
          "isApproved(uint256,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Artion",
            "src": "contracts\\FantomArtion.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Artion",
              "label": "tokenIdPointer",
              "type": "t_uint256",
              "src": "contracts\\FantomArtion.sol:26"
            },
            {
              "contract": "Artion",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtion.sol:29"
            },
            {
              "contract": "Artion",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtion.sol:32"
            },
            {
              "contract": "Artion",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtion.sol:35"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuction": {
        "src": "contracts\\FantomAuction.sol:55",
        "version": {
          "withMetadata": "454bb90e673aa7b3096a080ad347d03c078beb40562563e38be29c8dc40f69f3",
          "withoutMetadata": "42b08f90c6323dd0b4ab7ce9ced9b8cf3f49168258bb8c313fe889af714aa662",
          "linkedWithoutMetadata": "42b08f90c6323dd0b4ab7ce9ced9b8cf3f49168258bb8c313fe889af714aa662"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable)",
          "createAuction(address,uint256,address,uint256,uint256,uint256)",
          "placeBid(address,uint256)",
          "placeBid(address,uint256,uint256)",
          "withdrawBid(address,uint256)",
          "resultAuction(address,uint256)",
          "cancelAuction(address,uint256)",
          "toggleIsPaused()",
          "updateMinBidIncrement(uint256)",
          "updateBidWithdrawalLockTime(uint256)",
          "updateAuctionReservePrice(address,uint256,uint256)",
          "updateAuctionStartTime(address,uint256,uint256)",
          "updateAuctionEndTime(address,uint256,uint256)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "getAuction(address,uint256)",
          "getHighestBidder(address,uint256)",
          "reclaimERC20(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "minBidIncrement",
            "src": "contracts\\FantomAuction.sol:155"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bidWithdrawalLockTime",
            "src": "contracts\\FantomAuction.sol:158"
          },
          {
            "kind": "state-variable-assignment",
            "name": "platformFee",
            "src": "contracts\\FantomAuction.sol:161"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuction",
              "label": "auctions",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6655_storage))",
              "src": "contracts\\FantomAuction.sol:149"
            },
            {
              "contract": "FantomAuction",
              "label": "highestBids",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6662_storage))",
              "src": "contracts\\FantomAuction.sol:152"
            },
            {
              "contract": "FantomAuction",
              "label": "minBidIncrement",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:155"
            },
            {
              "contract": "FantomAuction",
              "label": "bidWithdrawalLockTime",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:158"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:161"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFeeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomAuction.sol:164"
            },
            {
              "contract": "FantomAuction",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)6464",
              "src": "contracts\\FantomAuction.sol:167"
            },
            {
              "contract": "FantomAuction",
              "label": "isPaused",
              "type": "t_bool",
              "src": "contracts\\FantomAuction.sol:170"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6655_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.Auction))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(Auction)6655_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.Auction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Auction)6655_storage": {
              "label": "struct FantomAuction.Auction",
              "members": [
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "reservePrice",
                  "type": "t_uint256"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256"
                },
                {
                  "label": "resulted",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6662_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.HighestBid))"
            },
            "t_mapping(t_uint256,t_struct(HighestBid)6662_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.HighestBid)"
            },
            "t_struct(HighestBid)6662_storage": {
              "label": "struct FantomAuction.HighestBid",
              "members": [
                {
                  "label": "bidder",
                  "type": "t_address_payable"
                },
                {
                  "label": "bid",
                  "type": "t_uint256"
                },
                {
                  "label": "lastBidTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)6464": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAddressRegistry": {
        "src": "contracts\\FantomPriceFeed.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenRegistry()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomBundleMarketplace": {
        "src": "contracts\\FantomMarketplace.sol:33",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,address,address)",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomTokenRegistry": {
        "src": "contracts\\FantomPriceFeed.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enabled(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomBundleMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:39",
        "version": {
          "withMetadata": "fd9e14d185949b78981a2aca15f5e70ffe8cf726bad43387c4eb9cd8e472619f",
          "withoutMetadata": "502f551b2fe6abf60d80cb7297a245f718e2b638dd364e32410507ea23faab1b",
          "linkedWithoutMetadata": "502f551b2fe6abf60d80cb7297a245f718e2b638dd364e32410507ea23faab1b"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20",
          "EnumerableSet"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "getListing(address,string)",
          "listItem(string,address[],uint256[],uint256[],address,uint256,uint256)",
          "cancelListing(string)",
          "updateListing(string,address,uint256)",
          "buyItem(string)",
          "buyItem(string,address)",
          "createOffer(string,address,uint256,uint256)",
          "cancelOffer(string)",
          "acceptOffer(string,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomBundleMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8523_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:106"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "owners",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts\\FantomBundleMarketplace.sol:109"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIdsPerItem",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4398_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:111"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "nftIndexes",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))",
              "src": "contracts\\FantomBundleMarketplace.sol:113"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIds",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "src": "contracts\\FantomBundleMarketplace.sol:115"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "offers",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8530_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:118"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomBundleMarketplace.sol:121"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomBundleMarketplace.sol:124"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)8386",
              "src": "contracts\\FantomBundleMarketplace.sol:127"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8523_storage))": {
              "label": "mapping(address => mapping(bytes32 => struct FantomBundleMarketplace.Listing))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_struct(Listing)8523_storage)": {
              "label": "mapping(bytes32 => struct FantomBundleMarketplace.Listing)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Listing)8523_storage": {
              "label": "struct FantomBundleMarketplace.Listing",
              "members": [
                {
                  "label": "nfts",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "tokenIds",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "quantities",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4398_storage))": {
              "label": "mapping(address => mapping(uint256 => struct EnumerableSet.Bytes32Set))"
            },
            "t_mapping(t_uint256,t_struct(Bytes32Set)4398_storage)": {
              "label": "mapping(uint256 => struct EnumerableSet.Bytes32Set)"
            },
            "t_struct(Bytes32Set)4398_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4218_storage"
                }
              ]
            },
            "t_struct(Set)4218_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
              "label": "mapping(bytes32 => mapping(address => mapping(uint256 => uint256)))"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8530_storage))": {
              "label": "mapping(bytes32 => mapping(address => struct FantomBundleMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)8530_storage)": {
              "label": "mapping(address => struct FantomBundleMarketplace.Offer)"
            },
            "t_struct(Offer)8530_storage": {
              "label": "struct FantomBundleMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)8386": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomMarketplace": {
        "src": "contracts\\FantomMarketplace.sol:55",
        "version": {
          "withMetadata": "49ba9d9d3fc3d89e1acca70b1d955be9506bd3d32dcd712d064ea26e2727a84b",
          "withoutMetadata": "cc57551ec19e66dda0f63b628cd4222293299bc1a85baec7d809f311950b146b",
          "linkedWithoutMetadata": "cc57551ec19e66dda0f63b628cd4222293299bc1a85baec7d809f311950b146b"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable,uint16)",
          "listItem(address,uint256,uint256,address,uint256,uint256)",
          "cancelListing(address,uint256)",
          "updateListing(address,uint256,address,uint256)",
          "buyItem(address,uint256,address payable)",
          "buyItem(address,uint256,address,address)",
          "createOffer(address,uint256,address,uint256,uint256,uint256)",
          "cancelOffer(address,uint256)",
          "acceptOffer(address,uint256,address)",
          "registerRoyalty(address,uint256,uint16)",
          "registerCollectionRoyalty(address,address,uint16,address)",
          "getPrice(address)",
          "updatePlatformFee(uint16)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomMarketplace",
              "label": "minters",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
              "src": "contracts\\FantomMarketplace.sol:135"
            },
            {
              "contract": "FantomMarketplace",
              "label": "royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint16))",
              "src": "contracts\\FantomMarketplace.sol:138"
            },
            {
              "contract": "FantomMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10702_storage)))",
              "src": "contracts\\FantomMarketplace.sol:141"
            },
            {
              "contract": "FantomMarketplace",
              "label": "offers",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10711_storage)))",
              "src": "contracts\\FantomMarketplace.sol:145"
            },
            {
              "contract": "FantomMarketplace",
              "label": "platformFee",
              "type": "t_uint16",
              "src": "contracts\\FantomMarketplace.sol:149"
            },
            {
              "contract": "FantomMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomMarketplace.sol:152"
            },
            {
              "contract": "FantomMarketplace",
              "label": "collectionRoyalties",
              "type": "t_mapping(t_address,t_struct(CollectionRoyalty)10718_storage)",
              "src": "contracts\\FantomMarketplace.sol:155"
            },
            {
              "contract": "FantomMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)10552",
              "src": "contracts\\FantomMarketplace.sol:158"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
              "label": "mapping(address => mapping(uint256 => address))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint16))": {
              "label": "mapping(address => mapping(uint256 => uint16))"
            },
            "t_mapping(t_uint256,t_uint16)": {
              "label": "mapping(uint256 => uint16)"
            },
            "t_uint16": {
              "label": "uint16"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10702_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Listing)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10702_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Listing))"
            },
            "t_mapping(t_address,t_struct(Listing)10702_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Listing)"
            },
            "t_struct(Listing)10702_storage": {
              "label": "struct FantomMarketplace.Listing",
              "members": [
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10711_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Offer)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10711_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)10711_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Offer)"
            },
            "t_struct(Offer)10711_storage": {
              "label": "struct FantomMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_struct(CollectionRoyalty)10718_storage)": {
              "label": "mapping(address => struct FantomMarketplace.CollectionRoyalty)"
            },
            "t_struct(CollectionRoyalty)10718_storage": {
              "label": "struct FantomMarketplace.CollectionRoyalty",
              "members": [
                {
                  "label": "royalty",
                  "type": "t_uint16"
                },
                {
                  "label": "creator",
                  "type": "t_address"
                },
                {
                  "label": "feeRecipient",
                  "type": "t_address"
                }
              ]
            },
            "t_contract(IFantomAddressRegistry)10552": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomNFTFactory": {
        "src": "contracts\\FantomMarketplace.sol:41",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exists(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomPriceFeed": {
        "src": "contracts\\FantomMarketplace.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "wFTM()",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactory": {
        "src": "contracts\\FantomNFTFactory.sol:8",
        "version": {
          "withMetadata": "a3d19cad134d00c2bd0320f0f376080deb0bf2f7d47944479836c856256d2252",
          "withoutMetadata": "cf477a4133942204c4b570215c71e15f133c398758afd27c29c25e048f380ab2",
          "linkedWithoutMetadata": "cf477a4133942204c4b570215c71e15f133c398758afd27c29c25e048f380ab2"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactory",
            "src": "contracts\\FantomNFTFactory.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactory",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:14"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:17"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:20"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactory.sol:23"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactory.sol:26"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTFactory.sol:29"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomNFTFactory.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactoryPrivate": {
        "src": "contracts\\FantomNFTFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "0249862df63a6b461c80d363ab8913144df70215be845407523b73d65085a90b",
          "withoutMetadata": "792bd5bb899b2c89a3a205154ad88282e8e7392f844f84c10aadef541ce049d8",
          "linkedWithoutMetadata": "792bd5bb899b2c89a3a205154ad88282e8e7392f844f84c10aadef541ce049d8"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactoryPrivate",
            "src": "contracts\\FantomNFTFactoryPrivate.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:29"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradable": {
        "src": "contracts\\FantomNFTTradable.sol:12",
        "version": {
          "withMetadata": "dcdaa7d4dd2c549389ad6b21a23ccfbd526c9b63735c02dc5cc618dc53dbef4c",
          "withoutMetadata": "b715fc2696419c35653e85f48809a39e29cce31ebdd023855f0f9b84bfb96f4b",
          "linkedWithoutMetadata": "b715fc2696419c35653e85f48809a39e29cce31ebdd023855f0f9b84bfb96f4b"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradable",
            "src": "contracts\\FantomNFTTradable.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts\\FantomNFTTradable.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradable",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:27"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:28"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:29"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradable.sol:30"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradable.sol:33"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTTradable.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradablePrivate": {
        "src": "contracts\\FantomNFTTradablePrivate.sol:12",
        "version": {
          "withMetadata": "d8ab60c2bc623353d0c1f652d43f08b3a45029fd184c2d36b8205020f52ad007",
          "withoutMetadata": "961408c66908a1ebfa2cdf7158b1c8a10ea70a213cf353d662b9ffea3b5d64e9",
          "linkedWithoutMetadata": "961408c66908a1ebfa2cdf7158b1c8a10ea70a213cf353d662b9ffea3b5d64e9"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradablePrivate",
            "src": "contracts\\FantomNFTTradablePrivate.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts\\FantomNFTTradablePrivate.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:27"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:28"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:29"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradablePrivate.sol:30"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradablePrivate.sol:33"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTTradablePrivate.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomPriceFeed": {
        "src": "contracts\\FantomPriceFeed.sol:21",
        "version": {
          "withMetadata": "a658a0a13f9184fc0b0f5d665c35d690edc7398782cbefd01c937b2bb18dcc48",
          "withoutMetadata": "a9e82cc54a14fd3bc58dbaa79b4045b14b4c9b290321beb8d121cfd1e034c6b7",
          "linkedWithoutMetadata": "a9e82cc54a14fd3bc58dbaa79b4045b14b4c9b290321beb8d121cfd1e034c6b7"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerOracle(address,address)",
          "updateOracle(address,address)",
          "getPrice(address)",
          "updateAddressRegistry(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomPriceFeed",
            "src": "contracts\\FantomPriceFeed.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomPriceFeed",
              "label": "oracles",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts\\FantomPriceFeed.sol:23"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "addressRegistry",
              "type": "t_address",
              "src": "contracts\\FantomPriceFeed.sol:26"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "wFTM",
              "type": "t_address",
              "src": "contracts\\FantomPriceFeed.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IOracle": {
        "src": "contracts\\FantomPriceFeed.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestAnswer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomTokenRegistry": {
        "src": "contracts\\FantomTokenRegistry.sol:7",
        "version": {
          "withMetadata": "8c38d27bdcb299edad68d09abde598ab7ff156407e293303f4f331832d552950",
          "withoutMetadata": "8d79c556bc9bb807b68178115ba5454cbf257f09ac10f8108786804cc2b2ce86",
          "linkedWithoutMetadata": "8d79c556bc9bb807b68178115ba5454cbf257f09ac10f8108786804cc2b2ce86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "add(address)",
          "remove(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomTokenRegistry",
              "label": "enabled",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomTokenRegistry.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155": {
        "src": "contracts\\library\\ERC1155.sol:11",
        "version": {
          "withMetadata": "e38675e88b1255c14bafbddea2fb3de4064da952960a5df5479549948b078eb9",
          "withoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c",
          "linkedWithoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c"
        },
        "inherit": [
          "IERC165"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155",
              "label": "balances",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts\\library\\ERC1155.sol:25"
            },
            {
              "contract": "ERC1155",
              "label": "operators",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts\\library\\ERC1155.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155Metadata": {
        "src": "contracts\\library\\ERC1155Metadata.sol:9",
        "version": {
          "withMetadata": "2d06782b92683f552c11c8c60edf4fda8a9a35cebcc57eb7114a6942e6331208",
          "withoutMetadata": "e6daebc392a1105a55ecdc42deea5d1e0d27078a64ec91c306dbb0b833545021",
          "linkedWithoutMetadata": "e6daebc392a1105a55ecdc42deea5d1e0d27078a64ec91c306dbb0b833545021"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155Metadata",
              "label": "baseMetadataURI",
              "type": "t_string_storage",
              "src": "contracts\\library\\ERC1155Metadata.sol:12"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155MintBurn": {
        "src": "contracts\\library\\ERC1155MintBurn.sol:9",
        "version": {
          "withMetadata": "1170e1b7b28b6ea67df85423aded03db6d14ef6a2a823e423b9cc6d6206eca1d",
          "withoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c",
          "linkedWithoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c"
        },
        "inherit": [
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155TokenReceiver": {
        "src": "contracts\\library\\IERC1155TokenReceiver.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BiddingContractMock": {
        "src": "contracts\\mock\\BiddingContractMock.sol:7",
        "version": {
          "withMetadata": "2ddf868488a4bb607b11f15064150516d236a964086bda8cf47679a877d2e0d3",
          "withoutMetadata": "bb0412333928df554dd3ad72cd3a6e7881eb495118185c1adbf9bb85451157a0",
          "linkedWithoutMetadata": "bb0412333928df554dd3ad72cd3a6e7881eb495118185c1adbf9bb85451157a0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "bid(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BiddingContractMock",
            "src": "contracts\\mock\\BiddingContractMock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BiddingContractMock",
              "label": "auctionContract",
              "type": "t_contract(FantomAuction)8358",
              "src": "contracts\\mock\\BiddingContractMock.sol:8"
            }
          ],
          "types": {
            "t_contract(FantomAuction)8358": {
              "label": "contract FantomAuction"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuctionMock": {
        "src": "contracts\\mock\\FantomAuctionMock.sol:7",
        "version": {
          "withMetadata": "4c158721ad2654576d19eef31dad969f85ac8baf99dc2005f6d8b3262006b6f1",
          "withoutMetadata": "0726a5554392e799019d614e42a300530b01ff2efd5e1c203e4de3d2215341b7",
          "linkedWithoutMetadata": "0726a5554392e799019d614e42a300530b01ff2efd5e1c203e4de3d2215341b7"
        },
        "inherit": [
          "FantomAuction",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "setNowOverride(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuctionMock",
              "label": "nowOverride",
              "type": "t_uint256",
              "src": "contracts\\mock\\FantomAuctionMock.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts\\mock\\MockERC20.sol:7",
        "version": {
          "withMetadata": "8a957e21c0b0d32c06b62f1e2bcfcf3fa08852c238eabeb9d5a0b12ab9a133b4",
          "withoutMetadata": "fdf7012d757f3885a979b8d5e8de23eaa8f27d3d57b8b133ad305739a8277957",
          "linkedWithoutMetadata": "fdf7012d757f3885a979b8d5e8de23eaa8f27d3d57b8b133ad305739a8277957"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts\\mock\\MockERC20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:304",
        "version": {
          "withMetadata": "953a5a25df22a6c1b394fa5bfb572b8b89e51eff28531c242f981a4d7a42de91",
          "withoutMetadata": "953a5a25df22a6c1b394fa5bfb572b8b89e51eff28531c242f981a4d7a42de91",
          "linkedWithoutMetadata": "953a5a25df22a6c1b394fa5bfb572b8b89e51eff28531c242f981a4d7a42de91"
        },
        "inherit": [
          "UpgradeabilityProxy",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AdminUpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:314"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:392"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:228",
        "version": {
          "withMetadata": "d8b876ebcdbed2da609ce8db823c306dfa79caa8d013c2b03bf3293bb3a0679b",
          "withoutMetadata": "d8b876ebcdbed2da609ce8db823c306dfa79caa8d013c2b03bf3293bb3a0679b",
          "linkedWithoutMetadata": "d8b876ebcdbed2da609ce8db823c306dfa79caa8d013c2b03bf3293bb3a0679b"
        },
        "inherit": [
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:237"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:241"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyAdmin": {
        "src": "contracts\\proxy\\ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "52c58b4224d04fcb69bbb9fcb76036691b4b609722815d0adeda9452838787d7",
          "withoutMetadata": "ed1aee2f0dae262982d214e10fdee51b42af8a6317158eebffb1d3b96186cd72",
          "linkedWithoutMetadata": "ed1aee2f0dae262982d214e10fdee51b42af8a6317158eebffb1d3b96186cd72"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\math\\SafeMath.sol:18",
        "version": {
          "withMetadata": "12f8b63975cec359166dc714be4e684b4fcf7c0497b2176e313e78b0f08171f8",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "dd15e04a1561397fbc7c3ae3ad394763be5dadec2c60082138bbf64746f457f8",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165",
            "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC165",
              "label": "_supportedInterfaces",
              "type": "t_mapping(t_bytes4,t_bool)",
              "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "contracts\\library\\IERC165.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155": {
        "src": "@openzeppelin\\contracts\\token\\ERC1155\\IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:33",
        "version": {
          "withMetadata": "5385d8f9a2a6008fecc420942e644bf860ccc5a0a87536e3a478b41bdad43db8",
          "withoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393",
          "linkedWithoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:44"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\SafeERC20.sol:18",
        "version": {
          "withMetadata": "ac490452d006a298fecb47eab43f8b56fc24a8af6c1e9589be882f66b71dcf29",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:21",
        "version": {
          "withMetadata": "1263ec9c299b38623bf2ed229b22524a9cd8778d2d7177950a88882c93ac2d47",
          "withoutMetadata": "3b9603e3ba8de701bdbd85fd5e78921e81db89f785601570458c066456264033",
          "linkedWithoutMetadata": "3b9603e3ba8de701bdbd85fd5e78921e81db89f785601570458c066456264033"
        },
        "inherit": [
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address",
          "EnumerableSet",
          "EnumerableMap",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "baseURI()",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:93"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_holderTokens",
              "type": "t_mapping(t_address,t_struct(UintSet)4604_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenOwners",
              "type": "t_struct(UintToAddressMap)3981_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:42"
            },
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:45"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:48"
            },
            {
              "contract": "ERC721",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:51"
            },
            {
              "contract": "ERC721",
              "label": "_baseURI",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(UintSet)4604_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UintSet)4604_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4218_storage"
                }
              ]
            },
            "t_struct(Set)4218_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(UintToAddressMap)3981_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)3663_storage"
                }
              ]
            },
            "t_struct(Map)3663_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)3655_storage)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_struct(MapEntry)3655_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]"
            },
            "t_struct(MapEntry)3655_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Enumerable.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:84",
        "version": {
          "withMetadata": "6ebc18947215038323b426a12b02cef514b75866073c7c96e534ed8d50616f7d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableMap": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableMap.sol:29",
        "version": {
          "withMetadata": "73725cbf9d2d1b2137d29a8a838af6227094ea37e1f8d67c6e200e7ab9da7ddd",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableSet.sol:29",
        "version": {
          "withMetadata": "93c63380dd1aced02757debdc25c8b6a733c4d4148ef735e290102573c76ca93",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:8",
        "version": {
          "withMetadata": "943f736564e78cbe4b2ebc37a12345bea28446ff07a76171b7a8cb7eb81c3c06",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomAddressRegistry": {
        "src": "contracts\\FantomAddressRegistry.sol:8",
        "version": {
          "withMetadata": "10371c20d9f79786b299a3538aac34802c3978b59299fd4651d14a15d73cd69a",
          "withoutMetadata": "b8b02879464d53b43faa6a13553775a50f3ff1f589f7790ee632b882717bb59f",
          "linkedWithoutMetadata": "b8b02879464d53b43faa6a13553775a50f3ff1f589f7790ee632b882717bb59f"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "updateArtion(address)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateNFTFactory(address)",
          "updateNFTFactoryPrivate(address)",
          "updateArtFactory(address)",
          "updateArtFactoryPrivate(address)",
          "updateTokenRegistry(address)",
          "updatePriceFeed(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAddressRegistry",
              "label": "artion",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:12"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:15"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:18"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:21"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "factory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:24"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:27"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "artFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:30"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateArtFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:33"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "tokenRegistry",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:36"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "priceFeed",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactory": {
        "src": "contracts\\FantomArtFactory.sol:8",
        "version": {
          "withMetadata": "42ad2105a9ff17bcbe2ad3a1891b96c66e19289bb576d3fa040b282e3d1d812c",
          "withoutMetadata": "8d360059711b76859ac66ed2256ab453def85a450814e9aafb9f290977a19347",
          "linkedWithoutMetadata": "8d360059711b76859ac66ed2256ab453def85a450814e9aafb9f290977a19347"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactory",
            "src": "contracts\\FantomArtFactory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactory.sol:14"
            },
            {
              "contract": "FantomArtFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactory.sol:17"
            },
            {
              "contract": "FantomArtFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactory.sol:20"
            },
            {
              "contract": "FantomArtFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactory.sol:23"
            },
            {
              "contract": "FantomArtFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtFactory.sol:26"
            },
            {
              "contract": "FantomArtFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomArtFactory.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactoryPrivate": {
        "src": "contracts\\FantomArtFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "4292041e9be47c08c6f42e9c62635f7a2164ba6f58b021c3a700ca0c4225473b",
          "withoutMetadata": "8575010f825cde467ae01567b55894638c5781740b86db0bc51e0664bc056b78",
          "linkedWithoutMetadata": "8575010f825cde467ae01567b55894638c5781740b86db0bc51e0664bc056b78"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactoryPrivate",
            "src": "contracts\\FantomArtFactoryPrivate.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomArtFactoryPrivate.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradable": {
        "src": "contracts\\FantomArtTradable.sol:22",
        "version": {
          "withMetadata": "f6b989a578e7dd8e399f657a910841319787f90ed4c5ae2b4f93d09b469895ca",
          "withoutMetadata": "f33b5082790284cfcfe598c9b5f69a0ce350cda1bd7a36032d7877bbb65b2b8b",
          "linkedWithoutMetadata": "f33b5082790284cfcfe598c9b5f69a0ce350cda1bd7a36032d7877bbb65b2b8b"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradable",
            "src": "contracts\\FantomArtTradable.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts\\FantomArtTradable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradable",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradable.sol:28"
            },
            {
              "contract": "FantomArtTradable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts\\FantomArtTradable.sol:31"
            },
            {
              "contract": "FantomArtTradable",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtTradable.sol:33"
            },
            {
              "contract": "FantomArtTradable",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\FantomArtTradable.sol:34"
            },
            {
              "contract": "FantomArtTradable",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradable.sol:37"
            },
            {
              "contract": "FantomArtTradable",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradable.sol:39"
            },
            {
              "contract": "FantomArtTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradable.sol:41"
            },
            {
              "contract": "FantomArtTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtTradable.sol:43"
            },
            {
              "contract": "FantomArtTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradable.sol:45"
            },
            {
              "contract": "FantomArtTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradable.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "OwnableDelegateProxy": {
        "src": "contracts\\FantomArtTradablePrivate.sol:10",
        "version": {
          "withMetadata": "9686ba095aed752884e3bf241270650d8ffb0e70967c83005610344745acfe76",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyRegistry": {
        "src": "contracts\\FantomArtTradablePrivate.sol:12",
        "version": {
          "withMetadata": "f1342eae28a7126c9ed3d8204e45991bc21362ce8a9646d035b90d2e0965f770",
          "withoutMetadata": "aa5f7868673867df9c21749320a6e16e4ca5f9990a18e1a55b0cff496ccd615d",
          "linkedWithoutMetadata": "aa5f7868673867df9c21749320a6e16e4ca5f9990a18e1a55b0cff496ccd615d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ProxyRegistry",
              "label": "proxies",
              "type": "t_mapping(t_address,t_contract(OwnableDelegateProxy)5848)",
              "src": "contracts\\FantomArtTradablePrivate.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_contract(OwnableDelegateProxy)5848)": {
              "label": "mapping(address => contract OwnableDelegateProxy)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(OwnableDelegateProxy)5848": {
              "label": "contract OwnableDelegateProxy"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradablePrivate": {
        "src": "contracts\\FantomArtTradablePrivate.sol:22",
        "version": {
          "withMetadata": "5fb2ccca51254a1afd2491cdedadf6b1ed79c70d0ef10c98578bcd69ff13e1ed",
          "withoutMetadata": "fdea5c874e471cd342851d70953bc34544f3144ebc53c9d7992b435f3b02e5a9",
          "linkedWithoutMetadata": "fdea5c874e471cd342851d70953bc34544f3144ebc53c9d7992b435f3b02e5a9"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradablePrivate",
            "src": "contracts\\FantomArtTradablePrivate.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts\\FantomArtTradablePrivate.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradablePrivate.sol:28"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts\\FantomArtTradablePrivate.sol:31"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtTradablePrivate.sol:33"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\FantomArtTradablePrivate.sol:34"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradablePrivate.sol:37"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradablePrivate.sol:39"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradablePrivate.sol:41"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtTradablePrivate.sol:43"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradablePrivate.sol:45"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradablePrivate.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Artion": {
        "src": "contracts\\FantomArtion.sol:9",
        "version": {
          "withMetadata": "09aaeeabbb5ef323460cc3def838b7fb804ad4fc95452df904e23ba6dc037224",
          "withoutMetadata": "c7781e9281a75bfb606f9859098482b2385eb20c5bdc7c98ff2a8b56ff11f70e",
          "linkedWithoutMetadata": "c7781e9281a75bfb606f9859098482b2385eb20c5bdc7c98ff2a8b56ff11f70e"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable,uint256)",
          "mint(address,string)",
          "burn(uint256)",
          "exists(uint256)",
          "isApproved(uint256,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Artion",
            "src": "contracts\\FantomArtion.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Artion",
              "label": "tokenIdPointer",
              "type": "t_uint256",
              "src": "contracts\\FantomArtion.sol:26"
            },
            {
              "contract": "Artion",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtion.sol:29"
            },
            {
              "contract": "Artion",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtion.sol:32"
            },
            {
              "contract": "Artion",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtion.sol:35"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuction": {
        "src": "contracts\\FantomAuction.sol:55",
        "version": {
          "withMetadata": "454bb90e673aa7b3096a080ad347d03c078beb40562563e38be29c8dc40f69f3",
          "withoutMetadata": "42b08f90c6323dd0b4ab7ce9ced9b8cf3f49168258bb8c313fe889af714aa662",
          "linkedWithoutMetadata": "42b08f90c6323dd0b4ab7ce9ced9b8cf3f49168258bb8c313fe889af714aa662"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable)",
          "createAuction(address,uint256,address,uint256,uint256,uint256)",
          "placeBid(address,uint256)",
          "placeBid(address,uint256,uint256)",
          "withdrawBid(address,uint256)",
          "resultAuction(address,uint256)",
          "cancelAuction(address,uint256)",
          "toggleIsPaused()",
          "updateMinBidIncrement(uint256)",
          "updateBidWithdrawalLockTime(uint256)",
          "updateAuctionReservePrice(address,uint256,uint256)",
          "updateAuctionStartTime(address,uint256,uint256)",
          "updateAuctionEndTime(address,uint256,uint256)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "getAuction(address,uint256)",
          "getHighestBidder(address,uint256)",
          "reclaimERC20(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "minBidIncrement",
            "src": "contracts\\FantomAuction.sol:155"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bidWithdrawalLockTime",
            "src": "contracts\\FantomAuction.sol:158"
          },
          {
            "kind": "state-variable-assignment",
            "name": "platformFee",
            "src": "contracts\\FantomAuction.sol:161"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuction",
              "label": "auctions",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6655_storage))",
              "src": "contracts\\FantomAuction.sol:149"
            },
            {
              "contract": "FantomAuction",
              "label": "highestBids",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6662_storage))",
              "src": "contracts\\FantomAuction.sol:152"
            },
            {
              "contract": "FantomAuction",
              "label": "minBidIncrement",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:155"
            },
            {
              "contract": "FantomAuction",
              "label": "bidWithdrawalLockTime",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:158"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:161"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFeeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomAuction.sol:164"
            },
            {
              "contract": "FantomAuction",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)6464",
              "src": "contracts\\FantomAuction.sol:167"
            },
            {
              "contract": "FantomAuction",
              "label": "isPaused",
              "type": "t_bool",
              "src": "contracts\\FantomAuction.sol:170"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6655_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.Auction))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(Auction)6655_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.Auction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Auction)6655_storage": {
              "label": "struct FantomAuction.Auction",
              "members": [
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "reservePrice",
                  "type": "t_uint256"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256"
                },
                {
                  "label": "resulted",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6662_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.HighestBid))"
            },
            "t_mapping(t_uint256,t_struct(HighestBid)6662_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.HighestBid)"
            },
            "t_struct(HighestBid)6662_storage": {
              "label": "struct FantomAuction.HighestBid",
              "members": [
                {
                  "label": "bidder",
                  "type": "t_address_payable"
                },
                {
                  "label": "bid",
                  "type": "t_uint256"
                },
                {
                  "label": "lastBidTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)6464": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAddressRegistry": {
        "src": "contracts\\FantomPriceFeed.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenRegistry()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomBundleMarketplace": {
        "src": "contracts\\FantomMarketplace.sol:33",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,address,address)",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomTokenRegistry": {
        "src": "contracts\\FantomPriceFeed.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enabled(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomBundleMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:39",
        "version": {
          "withMetadata": "fd9e14d185949b78981a2aca15f5e70ffe8cf726bad43387c4eb9cd8e472619f",
          "withoutMetadata": "502f551b2fe6abf60d80cb7297a245f718e2b638dd364e32410507ea23faab1b",
          "linkedWithoutMetadata": "502f551b2fe6abf60d80cb7297a245f718e2b638dd364e32410507ea23faab1b"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20",
          "EnumerableSet"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "getListing(address,string)",
          "listItem(string,address[],uint256[],uint256[],address,uint256,uint256)",
          "cancelListing(string)",
          "updateListing(string,address,uint256)",
          "buyItem(string)",
          "buyItem(string,address)",
          "createOffer(string,address,uint256,uint256)",
          "cancelOffer(string)",
          "acceptOffer(string,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomBundleMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8523_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:106"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "owners",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts\\FantomBundleMarketplace.sol:109"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIdsPerItem",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4398_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:111"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "nftIndexes",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))",
              "src": "contracts\\FantomBundleMarketplace.sol:113"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIds",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "src": "contracts\\FantomBundleMarketplace.sol:115"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "offers",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8530_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:118"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomBundleMarketplace.sol:121"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomBundleMarketplace.sol:124"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)8386",
              "src": "contracts\\FantomBundleMarketplace.sol:127"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8523_storage))": {
              "label": "mapping(address => mapping(bytes32 => struct FantomBundleMarketplace.Listing))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_struct(Listing)8523_storage)": {
              "label": "mapping(bytes32 => struct FantomBundleMarketplace.Listing)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Listing)8523_storage": {
              "label": "struct FantomBundleMarketplace.Listing",
              "members": [
                {
                  "label": "nfts",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "tokenIds",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "quantities",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4398_storage))": {
              "label": "mapping(address => mapping(uint256 => struct EnumerableSet.Bytes32Set))"
            },
            "t_mapping(t_uint256,t_struct(Bytes32Set)4398_storage)": {
              "label": "mapping(uint256 => struct EnumerableSet.Bytes32Set)"
            },
            "t_struct(Bytes32Set)4398_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4218_storage"
                }
              ]
            },
            "t_struct(Set)4218_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
              "label": "mapping(bytes32 => mapping(address => mapping(uint256 => uint256)))"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8530_storage))": {
              "label": "mapping(bytes32 => mapping(address => struct FantomBundleMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)8530_storage)": {
              "label": "mapping(address => struct FantomBundleMarketplace.Offer)"
            },
            "t_struct(Offer)8530_storage": {
              "label": "struct FantomBundleMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)8386": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomMarketplace": {
        "src": "contracts\\FantomMarketplace.sol:55",
        "version": {
          "withMetadata": "49ba9d9d3fc3d89e1acca70b1d955be9506bd3d32dcd712d064ea26e2727a84b",
          "withoutMetadata": "cc57551ec19e66dda0f63b628cd4222293299bc1a85baec7d809f311950b146b",
          "linkedWithoutMetadata": "cc57551ec19e66dda0f63b628cd4222293299bc1a85baec7d809f311950b146b"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable,uint16)",
          "listItem(address,uint256,uint256,address,uint256,uint256)",
          "cancelListing(address,uint256)",
          "updateListing(address,uint256,address,uint256)",
          "buyItem(address,uint256,address payable)",
          "buyItem(address,uint256,address,address)",
          "createOffer(address,uint256,address,uint256,uint256,uint256)",
          "cancelOffer(address,uint256)",
          "acceptOffer(address,uint256,address)",
          "registerRoyalty(address,uint256,uint16)",
          "registerCollectionRoyalty(address,address,uint16,address)",
          "getPrice(address)",
          "updatePlatformFee(uint16)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomMarketplace",
              "label": "minters",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
              "src": "contracts\\FantomMarketplace.sol:135"
            },
            {
              "contract": "FantomMarketplace",
              "label": "royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint16))",
              "src": "contracts\\FantomMarketplace.sol:138"
            },
            {
              "contract": "FantomMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10702_storage)))",
              "src": "contracts\\FantomMarketplace.sol:141"
            },
            {
              "contract": "FantomMarketplace",
              "label": "offers",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10711_storage)))",
              "src": "contracts\\FantomMarketplace.sol:145"
            },
            {
              "contract": "FantomMarketplace",
              "label": "platformFee",
              "type": "t_uint16",
              "src": "contracts\\FantomMarketplace.sol:149"
            },
            {
              "contract": "FantomMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomMarketplace.sol:152"
            },
            {
              "contract": "FantomMarketplace",
              "label": "collectionRoyalties",
              "type": "t_mapping(t_address,t_struct(CollectionRoyalty)10718_storage)",
              "src": "contracts\\FantomMarketplace.sol:155"
            },
            {
              "contract": "FantomMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)10552",
              "src": "contracts\\FantomMarketplace.sol:158"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
              "label": "mapping(address => mapping(uint256 => address))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint16))": {
              "label": "mapping(address => mapping(uint256 => uint16))"
            },
            "t_mapping(t_uint256,t_uint16)": {
              "label": "mapping(uint256 => uint16)"
            },
            "t_uint16": {
              "label": "uint16"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10702_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Listing)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10702_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Listing))"
            },
            "t_mapping(t_address,t_struct(Listing)10702_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Listing)"
            },
            "t_struct(Listing)10702_storage": {
              "label": "struct FantomMarketplace.Listing",
              "members": [
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10711_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Offer)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10711_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)10711_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Offer)"
            },
            "t_struct(Offer)10711_storage": {
              "label": "struct FantomMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_struct(CollectionRoyalty)10718_storage)": {
              "label": "mapping(address => struct FantomMarketplace.CollectionRoyalty)"
            },
            "t_struct(CollectionRoyalty)10718_storage": {
              "label": "struct FantomMarketplace.CollectionRoyalty",
              "members": [
                {
                  "label": "royalty",
                  "type": "t_uint16"
                },
                {
                  "label": "creator",
                  "type": "t_address"
                },
                {
                  "label": "feeRecipient",
                  "type": "t_address"
                }
              ]
            },
            "t_contract(IFantomAddressRegistry)10552": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomNFTFactory": {
        "src": "contracts\\FantomMarketplace.sol:41",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exists(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomPriceFeed": {
        "src": "contracts\\FantomMarketplace.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "wFTM()",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactory": {
        "src": "contracts\\FantomNFTFactory.sol:8",
        "version": {
          "withMetadata": "a3d19cad134d00c2bd0320f0f376080deb0bf2f7d47944479836c856256d2252",
          "withoutMetadata": "cf477a4133942204c4b570215c71e15f133c398758afd27c29c25e048f380ab2",
          "linkedWithoutMetadata": "cf477a4133942204c4b570215c71e15f133c398758afd27c29c25e048f380ab2"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactory",
            "src": "contracts\\FantomNFTFactory.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactory",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:14"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:17"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:20"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactory.sol:23"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactory.sol:26"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTFactory.sol:29"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomNFTFactory.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactoryPrivate": {
        "src": "contracts\\FantomNFTFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "0249862df63a6b461c80d363ab8913144df70215be845407523b73d65085a90b",
          "withoutMetadata": "792bd5bb899b2c89a3a205154ad88282e8e7392f844f84c10aadef541ce049d8",
          "linkedWithoutMetadata": "792bd5bb899b2c89a3a205154ad88282e8e7392f844f84c10aadef541ce049d8"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactoryPrivate",
            "src": "contracts\\FantomNFTFactoryPrivate.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:29"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradable": {
        "src": "contracts\\FantomNFTTradable.sol:12",
        "version": {
          "withMetadata": "dcdaa7d4dd2c549389ad6b21a23ccfbd526c9b63735c02dc5cc618dc53dbef4c",
          "withoutMetadata": "b715fc2696419c35653e85f48809a39e29cce31ebdd023855f0f9b84bfb96f4b",
          "linkedWithoutMetadata": "b715fc2696419c35653e85f48809a39e29cce31ebdd023855f0f9b84bfb96f4b"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradable",
            "src": "contracts\\FantomNFTTradable.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts\\FantomNFTTradable.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradable",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:27"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:28"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:29"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradable.sol:30"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradable.sol:33"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTTradable.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradablePrivate": {
        "src": "contracts\\FantomNFTTradablePrivate.sol:12",
        "version": {
          "withMetadata": "d8ab60c2bc623353d0c1f652d43f08b3a45029fd184c2d36b8205020f52ad007",
          "withoutMetadata": "961408c66908a1ebfa2cdf7158b1c8a10ea70a213cf353d662b9ffea3b5d64e9",
          "linkedWithoutMetadata": "961408c66908a1ebfa2cdf7158b1c8a10ea70a213cf353d662b9ffea3b5d64e9"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradablePrivate",
            "src": "contracts\\FantomNFTTradablePrivate.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts\\FantomNFTTradablePrivate.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:27"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:28"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:29"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradablePrivate.sol:30"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradablePrivate.sol:33"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTTradablePrivate.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomPriceFeed": {
        "src": "contracts\\FantomPriceFeed.sol:21",
        "version": {
          "withMetadata": "a658a0a13f9184fc0b0f5d665c35d690edc7398782cbefd01c937b2bb18dcc48",
          "withoutMetadata": "a9e82cc54a14fd3bc58dbaa79b4045b14b4c9b290321beb8d121cfd1e034c6b7",
          "linkedWithoutMetadata": "a9e82cc54a14fd3bc58dbaa79b4045b14b4c9b290321beb8d121cfd1e034c6b7"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerOracle(address,address)",
          "updateOracle(address,address)",
          "getPrice(address)",
          "updateAddressRegistry(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomPriceFeed",
            "src": "contracts\\FantomPriceFeed.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomPriceFeed",
              "label": "oracles",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts\\FantomPriceFeed.sol:23"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "addressRegistry",
              "type": "t_address",
              "src": "contracts\\FantomPriceFeed.sol:26"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "wFTM",
              "type": "t_address",
              "src": "contracts\\FantomPriceFeed.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IOracle": {
        "src": "contracts\\FantomPriceFeed.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestAnswer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomTokenRegistry": {
        "src": "contracts\\FantomTokenRegistry.sol:7",
        "version": {
          "withMetadata": "8c38d27bdcb299edad68d09abde598ab7ff156407e293303f4f331832d552950",
          "withoutMetadata": "8d79c556bc9bb807b68178115ba5454cbf257f09ac10f8108786804cc2b2ce86",
          "linkedWithoutMetadata": "8d79c556bc9bb807b68178115ba5454cbf257f09ac10f8108786804cc2b2ce86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "add(address)",
          "remove(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomTokenRegistry",
              "label": "enabled",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomTokenRegistry.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155": {
        "src": "contracts\\library\\ERC1155.sol:11",
        "version": {
          "withMetadata": "685a0df74b3d2f90772a7779ee8ed859c8614299d834b130f56ca21cce297e04",
          "withoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c",
          "linkedWithoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c"
        },
        "inherit": [
          "IERC165"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155",
              "label": "balances",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts\\library\\ERC1155.sol:25"
            },
            {
              "contract": "ERC1155",
              "label": "operators",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts\\library\\ERC1155.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155Metadata": {
        "src": "contracts\\library\\ERC1155Metadata.sol:9",
        "version": {
          "withMetadata": "2d06782b92683f552c11c8c60edf4fda8a9a35cebcc57eb7114a6942e6331208",
          "withoutMetadata": "e6daebc392a1105a55ecdc42deea5d1e0d27078a64ec91c306dbb0b833545021",
          "linkedWithoutMetadata": "e6daebc392a1105a55ecdc42deea5d1e0d27078a64ec91c306dbb0b833545021"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155Metadata",
              "label": "baseMetadataURI",
              "type": "t_string_storage",
              "src": "contracts\\library\\ERC1155Metadata.sol:12"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155MintBurn": {
        "src": "contracts\\library\\ERC1155MintBurn.sol:9",
        "version": {
          "withMetadata": "831db0fdb228c73dea658e1843702075780bb412dc1e2ded95ba094e47e6c20d",
          "withoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c",
          "linkedWithoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c"
        },
        "inherit": [
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155TokenReceiver": {
        "src": "contracts\\library\\IERC1155TokenReceiver.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BiddingContractMock": {
        "src": "contracts\\mock\\BiddingContractMock.sol:7",
        "version": {
          "withMetadata": "2ddf868488a4bb607b11f15064150516d236a964086bda8cf47679a877d2e0d3",
          "withoutMetadata": "bb0412333928df554dd3ad72cd3a6e7881eb495118185c1adbf9bb85451157a0",
          "linkedWithoutMetadata": "bb0412333928df554dd3ad72cd3a6e7881eb495118185c1adbf9bb85451157a0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "bid(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BiddingContractMock",
            "src": "contracts\\mock\\BiddingContractMock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BiddingContractMock",
              "label": "auctionContract",
              "type": "t_contract(FantomAuction)8358",
              "src": "contracts\\mock\\BiddingContractMock.sol:8"
            }
          ],
          "types": {
            "t_contract(FantomAuction)8358": {
              "label": "contract FantomAuction"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuctionMock": {
        "src": "contracts\\mock\\FantomAuctionMock.sol:7",
        "version": {
          "withMetadata": "4c158721ad2654576d19eef31dad969f85ac8baf99dc2005f6d8b3262006b6f1",
          "withoutMetadata": "0726a5554392e799019d614e42a300530b01ff2efd5e1c203e4de3d2215341b7",
          "linkedWithoutMetadata": "0726a5554392e799019d614e42a300530b01ff2efd5e1c203e4de3d2215341b7"
        },
        "inherit": [
          "FantomAuction",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "setNowOverride(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuctionMock",
              "label": "nowOverride",
              "type": "t_uint256",
              "src": "contracts\\mock\\FantomAuctionMock.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts\\mock\\MockERC20.sol:7",
        "version": {
          "withMetadata": "8a957e21c0b0d32c06b62f1e2bcfcf3fa08852c238eabeb9d5a0b12ab9a133b4",
          "withoutMetadata": "fdf7012d757f3885a979b8d5e8de23eaa8f27d3d57b8b133ad305739a8277957",
          "linkedWithoutMetadata": "fdf7012d757f3885a979b8d5e8de23eaa8f27d3d57b8b133ad305739a8277957"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts\\mock\\MockERC20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:304",
        "version": {
          "withMetadata": "953a5a25df22a6c1b394fa5bfb572b8b89e51eff28531c242f981a4d7a42de91",
          "withoutMetadata": "953a5a25df22a6c1b394fa5bfb572b8b89e51eff28531c242f981a4d7a42de91",
          "linkedWithoutMetadata": "953a5a25df22a6c1b394fa5bfb572b8b89e51eff28531c242f981a4d7a42de91"
        },
        "inherit": [
          "UpgradeabilityProxy",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AdminUpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:314"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:392"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:228",
        "version": {
          "withMetadata": "d8b876ebcdbed2da609ce8db823c306dfa79caa8d013c2b03bf3293bb3a0679b",
          "withoutMetadata": "d8b876ebcdbed2da609ce8db823c306dfa79caa8d013c2b03bf3293bb3a0679b",
          "linkedWithoutMetadata": "d8b876ebcdbed2da609ce8db823c306dfa79caa8d013c2b03bf3293bb3a0679b"
        },
        "inherit": [
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:237"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:241"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyAdmin": {
        "src": "contracts\\proxy\\ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "52c58b4224d04fcb69bbb9fcb76036691b4b609722815d0adeda9452838787d7",
          "withoutMetadata": "ed1aee2f0dae262982d214e10fdee51b42af8a6317158eebffb1d3b96186cd72",
          "linkedWithoutMetadata": "ed1aee2f0dae262982d214e10fdee51b42af8a6317158eebffb1d3b96186cd72"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\math\\SafeMath.sol:18",
        "version": {
          "withMetadata": "12f8b63975cec359166dc714be4e684b4fcf7c0497b2176e313e78b0f08171f8",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "dd15e04a1561397fbc7c3ae3ad394763be5dadec2c60082138bbf64746f457f8",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165",
            "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC165",
              "label": "_supportedInterfaces",
              "type": "t_mapping(t_bytes4,t_bool)",
              "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "contracts\\library\\IERC165.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155": {
        "src": "@openzeppelin\\contracts\\token\\ERC1155\\IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:33",
        "version": {
          "withMetadata": "5385d8f9a2a6008fecc420942e644bf860ccc5a0a87536e3a478b41bdad43db8",
          "withoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393",
          "linkedWithoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:44"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\SafeERC20.sol:18",
        "version": {
          "withMetadata": "ac490452d006a298fecb47eab43f8b56fc24a8af6c1e9589be882f66b71dcf29",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:21",
        "version": {
          "withMetadata": "1263ec9c299b38623bf2ed229b22524a9cd8778d2d7177950a88882c93ac2d47",
          "withoutMetadata": "3b9603e3ba8de701bdbd85fd5e78921e81db89f785601570458c066456264033",
          "linkedWithoutMetadata": "3b9603e3ba8de701bdbd85fd5e78921e81db89f785601570458c066456264033"
        },
        "inherit": [
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address",
          "EnumerableSet",
          "EnumerableMap",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "baseURI()",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:93"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_holderTokens",
              "type": "t_mapping(t_address,t_struct(UintSet)4604_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenOwners",
              "type": "t_struct(UintToAddressMap)3981_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:42"
            },
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:45"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:48"
            },
            {
              "contract": "ERC721",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:51"
            },
            {
              "contract": "ERC721",
              "label": "_baseURI",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(UintSet)4604_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UintSet)4604_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4218_storage"
                }
              ]
            },
            "t_struct(Set)4218_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(UintToAddressMap)3981_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)3663_storage"
                }
              ]
            },
            "t_struct(Map)3663_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)3655_storage)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_struct(MapEntry)3655_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]"
            },
            "t_struct(MapEntry)3655_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Enumerable.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:84",
        "version": {
          "withMetadata": "6ebc18947215038323b426a12b02cef514b75866073c7c96e534ed8d50616f7d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableMap": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableMap.sol:29",
        "version": {
          "withMetadata": "73725cbf9d2d1b2137d29a8a838af6227094ea37e1f8d67c6e200e7ab9da7ddd",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableSet.sol:29",
        "version": {
          "withMetadata": "93c63380dd1aced02757debdc25c8b6a733c4d4148ef735e290102573c76ca93",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:8",
        "version": {
          "withMetadata": "943f736564e78cbe4b2ebc37a12345bea28446ff07a76171b7a8cb7eb81c3c06",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomAddressRegistry": {
        "src": "contracts\\FantomAddressRegistry.sol:8",
        "version": {
          "withMetadata": "10371c20d9f79786b299a3538aac34802c3978b59299fd4651d14a15d73cd69a",
          "withoutMetadata": "b8b02879464d53b43faa6a13553775a50f3ff1f589f7790ee632b882717bb59f",
          "linkedWithoutMetadata": "b8b02879464d53b43faa6a13553775a50f3ff1f589f7790ee632b882717bb59f"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "updateArtion(address)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateNFTFactory(address)",
          "updateNFTFactoryPrivate(address)",
          "updateArtFactory(address)",
          "updateArtFactoryPrivate(address)",
          "updateTokenRegistry(address)",
          "updatePriceFeed(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAddressRegistry",
              "label": "artion",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:12"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:15"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:18"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:21"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "factory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:24"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:27"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "artFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:30"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateArtFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:33"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "tokenRegistry",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:36"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "priceFeed",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactory": {
        "src": "contracts\\FantomArtFactory.sol:8",
        "version": {
          "withMetadata": "710f38754714cc4a00aa1185620d0d285ce13210ab64e2862c57346232297305",
          "withoutMetadata": "c02b2bb078af592c7a02c54fcd51d65a56b825fbf04f4dbcd75eb67a33f24eb6",
          "linkedWithoutMetadata": "c02b2bb078af592c7a02c54fcd51d65a56b825fbf04f4dbcd75eb67a33f24eb6"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactory",
            "src": "contracts\\FantomArtFactory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactory.sol:14"
            },
            {
              "contract": "FantomArtFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactory.sol:17"
            },
            {
              "contract": "FantomArtFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactory.sol:20"
            },
            {
              "contract": "FantomArtFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactory.sol:23"
            },
            {
              "contract": "FantomArtFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtFactory.sol:26"
            },
            {
              "contract": "FantomArtFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomArtFactory.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactoryPrivate": {
        "src": "contracts\\FantomArtFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "69675808651f88f2726c8d23d435e64f58bba2153c305d3e5af0383b686a45f6",
          "withoutMetadata": "8dcfd4527fc529efb54079f6e9093cfbae8775390c5d898cb0878928856303af",
          "linkedWithoutMetadata": "8dcfd4527fc529efb54079f6e9093cfbae8775390c5d898cb0878928856303af"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactoryPrivate",
            "src": "contracts\\FantomArtFactoryPrivate.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomArtFactoryPrivate.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradable": {
        "src": "contracts\\FantomArtTradable.sol:22",
        "version": {
          "withMetadata": "6b09a2ad437015f1d7434b33a23233c495efe7503bf2e3b62eb18a8b013e7c2a",
          "withoutMetadata": "f33b5082790284cfcfe598c9b5f69a0ce350cda1bd7a36032d7877bbb65b2b8b",
          "linkedWithoutMetadata": "f33b5082790284cfcfe598c9b5f69a0ce350cda1bd7a36032d7877bbb65b2b8b"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradable",
            "src": "contracts\\FantomArtTradable.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts\\FantomArtTradable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradable",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradable.sol:28"
            },
            {
              "contract": "FantomArtTradable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts\\FantomArtTradable.sol:31"
            },
            {
              "contract": "FantomArtTradable",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtTradable.sol:33"
            },
            {
              "contract": "FantomArtTradable",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\FantomArtTradable.sol:34"
            },
            {
              "contract": "FantomArtTradable",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradable.sol:37"
            },
            {
              "contract": "FantomArtTradable",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradable.sol:39"
            },
            {
              "contract": "FantomArtTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradable.sol:41"
            },
            {
              "contract": "FantomArtTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtTradable.sol:43"
            },
            {
              "contract": "FantomArtTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradable.sol:45"
            },
            {
              "contract": "FantomArtTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradable.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "OwnableDelegateProxy": {
        "src": "contracts\\FantomArtTradablePrivate.sol:10",
        "version": {
          "withMetadata": "c99c713934ea4cdeb2ecc58daa354022cc565978dbf8f7a41a920aaba6eeffb7",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyRegistry": {
        "src": "contracts\\FantomArtTradablePrivate.sol:12",
        "version": {
          "withMetadata": "9168e7026c52ab98db7527c19d23ccf3fadde3017ce6c19daeeab57d04e6cdbf",
          "withoutMetadata": "aa5f7868673867df9c21749320a6e16e4ca5f9990a18e1a55b0cff496ccd615d",
          "linkedWithoutMetadata": "aa5f7868673867df9c21749320a6e16e4ca5f9990a18e1a55b0cff496ccd615d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ProxyRegistry",
              "label": "proxies",
              "type": "t_mapping(t_address,t_contract(OwnableDelegateProxy)5848)",
              "src": "contracts\\FantomArtTradablePrivate.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_contract(OwnableDelegateProxy)5848)": {
              "label": "mapping(address => contract OwnableDelegateProxy)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(OwnableDelegateProxy)5848": {
              "label": "contract OwnableDelegateProxy"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradablePrivate": {
        "src": "contracts\\FantomArtTradablePrivate.sol:22",
        "version": {
          "withMetadata": "9b34715fb02a535061754945314f85e61383a89057c37f9540e44614f43ccfbe",
          "withoutMetadata": "fdea5c874e471cd342851d70953bc34544f3144ebc53c9d7992b435f3b02e5a9",
          "linkedWithoutMetadata": "fdea5c874e471cd342851d70953bc34544f3144ebc53c9d7992b435f3b02e5a9"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradablePrivate",
            "src": "contracts\\FantomArtTradablePrivate.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts\\FantomArtTradablePrivate.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradablePrivate.sol:28"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts\\FantomArtTradablePrivate.sol:31"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtTradablePrivate.sol:33"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\FantomArtTradablePrivate.sol:34"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradablePrivate.sol:37"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradablePrivate.sol:39"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradablePrivate.sol:41"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtTradablePrivate.sol:43"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradablePrivate.sol:45"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradablePrivate.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Artion": {
        "src": "contracts\\FantomArtion.sol:9",
        "version": {
          "withMetadata": "09aaeeabbb5ef323460cc3def838b7fb804ad4fc95452df904e23ba6dc037224",
          "withoutMetadata": "c7781e9281a75bfb606f9859098482b2385eb20c5bdc7c98ff2a8b56ff11f70e",
          "linkedWithoutMetadata": "c7781e9281a75bfb606f9859098482b2385eb20c5bdc7c98ff2a8b56ff11f70e"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable,uint256)",
          "mint(address,string)",
          "burn(uint256)",
          "exists(uint256)",
          "isApproved(uint256,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Artion",
            "src": "contracts\\FantomArtion.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Artion",
              "label": "tokenIdPointer",
              "type": "t_uint256",
              "src": "contracts\\FantomArtion.sol:26"
            },
            {
              "contract": "Artion",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtion.sol:29"
            },
            {
              "contract": "Artion",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtion.sol:32"
            },
            {
              "contract": "Artion",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtion.sol:35"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuction": {
        "src": "contracts\\FantomAuction.sol:55",
        "version": {
          "withMetadata": "454bb90e673aa7b3096a080ad347d03c078beb40562563e38be29c8dc40f69f3",
          "withoutMetadata": "42b08f90c6323dd0b4ab7ce9ced9b8cf3f49168258bb8c313fe889af714aa662",
          "linkedWithoutMetadata": "42b08f90c6323dd0b4ab7ce9ced9b8cf3f49168258bb8c313fe889af714aa662"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable)",
          "createAuction(address,uint256,address,uint256,uint256,uint256)",
          "placeBid(address,uint256)",
          "placeBid(address,uint256,uint256)",
          "withdrawBid(address,uint256)",
          "resultAuction(address,uint256)",
          "cancelAuction(address,uint256)",
          "toggleIsPaused()",
          "updateMinBidIncrement(uint256)",
          "updateBidWithdrawalLockTime(uint256)",
          "updateAuctionReservePrice(address,uint256,uint256)",
          "updateAuctionStartTime(address,uint256,uint256)",
          "updateAuctionEndTime(address,uint256,uint256)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "getAuction(address,uint256)",
          "getHighestBidder(address,uint256)",
          "reclaimERC20(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "minBidIncrement",
            "src": "contracts\\FantomAuction.sol:155"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bidWithdrawalLockTime",
            "src": "contracts\\FantomAuction.sol:158"
          },
          {
            "kind": "state-variable-assignment",
            "name": "platformFee",
            "src": "contracts\\FantomAuction.sol:161"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuction",
              "label": "auctions",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6655_storage))",
              "src": "contracts\\FantomAuction.sol:149"
            },
            {
              "contract": "FantomAuction",
              "label": "highestBids",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6662_storage))",
              "src": "contracts\\FantomAuction.sol:152"
            },
            {
              "contract": "FantomAuction",
              "label": "minBidIncrement",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:155"
            },
            {
              "contract": "FantomAuction",
              "label": "bidWithdrawalLockTime",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:158"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:161"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFeeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomAuction.sol:164"
            },
            {
              "contract": "FantomAuction",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)6464",
              "src": "contracts\\FantomAuction.sol:167"
            },
            {
              "contract": "FantomAuction",
              "label": "isPaused",
              "type": "t_bool",
              "src": "contracts\\FantomAuction.sol:170"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6655_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.Auction))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(Auction)6655_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.Auction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Auction)6655_storage": {
              "label": "struct FantomAuction.Auction",
              "members": [
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "reservePrice",
                  "type": "t_uint256"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256"
                },
                {
                  "label": "resulted",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6662_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.HighestBid))"
            },
            "t_mapping(t_uint256,t_struct(HighestBid)6662_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.HighestBid)"
            },
            "t_struct(HighestBid)6662_storage": {
              "label": "struct FantomAuction.HighestBid",
              "members": [
                {
                  "label": "bidder",
                  "type": "t_address_payable"
                },
                {
                  "label": "bid",
                  "type": "t_uint256"
                },
                {
                  "label": "lastBidTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)6464": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAddressRegistry": {
        "src": "contracts\\FantomPriceFeed.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenRegistry()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomBundleMarketplace": {
        "src": "contracts\\FantomMarketplace.sol:33",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,address,address)",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomTokenRegistry": {
        "src": "contracts\\FantomPriceFeed.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enabled(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomBundleMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:39",
        "version": {
          "withMetadata": "fd9e14d185949b78981a2aca15f5e70ffe8cf726bad43387c4eb9cd8e472619f",
          "withoutMetadata": "502f551b2fe6abf60d80cb7297a245f718e2b638dd364e32410507ea23faab1b",
          "linkedWithoutMetadata": "502f551b2fe6abf60d80cb7297a245f718e2b638dd364e32410507ea23faab1b"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20",
          "EnumerableSet"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "getListing(address,string)",
          "listItem(string,address[],uint256[],uint256[],address,uint256,uint256)",
          "cancelListing(string)",
          "updateListing(string,address,uint256)",
          "buyItem(string)",
          "buyItem(string,address)",
          "createOffer(string,address,uint256,uint256)",
          "cancelOffer(string)",
          "acceptOffer(string,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomBundleMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8523_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:106"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "owners",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts\\FantomBundleMarketplace.sol:109"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIdsPerItem",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4398_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:111"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "nftIndexes",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))",
              "src": "contracts\\FantomBundleMarketplace.sol:113"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIds",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "src": "contracts\\FantomBundleMarketplace.sol:115"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "offers",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8530_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:118"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomBundleMarketplace.sol:121"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomBundleMarketplace.sol:124"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)8386",
              "src": "contracts\\FantomBundleMarketplace.sol:127"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8523_storage))": {
              "label": "mapping(address => mapping(bytes32 => struct FantomBundleMarketplace.Listing))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_struct(Listing)8523_storage)": {
              "label": "mapping(bytes32 => struct FantomBundleMarketplace.Listing)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Listing)8523_storage": {
              "label": "struct FantomBundleMarketplace.Listing",
              "members": [
                {
                  "label": "nfts",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "tokenIds",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "quantities",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4398_storage))": {
              "label": "mapping(address => mapping(uint256 => struct EnumerableSet.Bytes32Set))"
            },
            "t_mapping(t_uint256,t_struct(Bytes32Set)4398_storage)": {
              "label": "mapping(uint256 => struct EnumerableSet.Bytes32Set)"
            },
            "t_struct(Bytes32Set)4398_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4218_storage"
                }
              ]
            },
            "t_struct(Set)4218_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
              "label": "mapping(bytes32 => mapping(address => mapping(uint256 => uint256)))"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8530_storage))": {
              "label": "mapping(bytes32 => mapping(address => struct FantomBundleMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)8530_storage)": {
              "label": "mapping(address => struct FantomBundleMarketplace.Offer)"
            },
            "t_struct(Offer)8530_storage": {
              "label": "struct FantomBundleMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)8386": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomMarketplace": {
        "src": "contracts\\FantomMarketplace.sol:55",
        "version": {
          "withMetadata": "49ba9d9d3fc3d89e1acca70b1d955be9506bd3d32dcd712d064ea26e2727a84b",
          "withoutMetadata": "cc57551ec19e66dda0f63b628cd4222293299bc1a85baec7d809f311950b146b",
          "linkedWithoutMetadata": "cc57551ec19e66dda0f63b628cd4222293299bc1a85baec7d809f311950b146b"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable,uint16)",
          "listItem(address,uint256,uint256,address,uint256,uint256)",
          "cancelListing(address,uint256)",
          "updateListing(address,uint256,address,uint256)",
          "buyItem(address,uint256,address payable)",
          "buyItem(address,uint256,address,address)",
          "createOffer(address,uint256,address,uint256,uint256,uint256)",
          "cancelOffer(address,uint256)",
          "acceptOffer(address,uint256,address)",
          "registerRoyalty(address,uint256,uint16)",
          "registerCollectionRoyalty(address,address,uint16,address)",
          "getPrice(address)",
          "updatePlatformFee(uint16)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomMarketplace",
              "label": "minters",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
              "src": "contracts\\FantomMarketplace.sol:135"
            },
            {
              "contract": "FantomMarketplace",
              "label": "royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint16))",
              "src": "contracts\\FantomMarketplace.sol:138"
            },
            {
              "contract": "FantomMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10702_storage)))",
              "src": "contracts\\FantomMarketplace.sol:141"
            },
            {
              "contract": "FantomMarketplace",
              "label": "offers",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10711_storage)))",
              "src": "contracts\\FantomMarketplace.sol:145"
            },
            {
              "contract": "FantomMarketplace",
              "label": "platformFee",
              "type": "t_uint16",
              "src": "contracts\\FantomMarketplace.sol:149"
            },
            {
              "contract": "FantomMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomMarketplace.sol:152"
            },
            {
              "contract": "FantomMarketplace",
              "label": "collectionRoyalties",
              "type": "t_mapping(t_address,t_struct(CollectionRoyalty)10718_storage)",
              "src": "contracts\\FantomMarketplace.sol:155"
            },
            {
              "contract": "FantomMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)10552",
              "src": "contracts\\FantomMarketplace.sol:158"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
              "label": "mapping(address => mapping(uint256 => address))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint16))": {
              "label": "mapping(address => mapping(uint256 => uint16))"
            },
            "t_mapping(t_uint256,t_uint16)": {
              "label": "mapping(uint256 => uint16)"
            },
            "t_uint16": {
              "label": "uint16"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10702_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Listing)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10702_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Listing))"
            },
            "t_mapping(t_address,t_struct(Listing)10702_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Listing)"
            },
            "t_struct(Listing)10702_storage": {
              "label": "struct FantomMarketplace.Listing",
              "members": [
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10711_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Offer)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10711_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)10711_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Offer)"
            },
            "t_struct(Offer)10711_storage": {
              "label": "struct FantomMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_struct(CollectionRoyalty)10718_storage)": {
              "label": "mapping(address => struct FantomMarketplace.CollectionRoyalty)"
            },
            "t_struct(CollectionRoyalty)10718_storage": {
              "label": "struct FantomMarketplace.CollectionRoyalty",
              "members": [
                {
                  "label": "royalty",
                  "type": "t_uint16"
                },
                {
                  "label": "creator",
                  "type": "t_address"
                },
                {
                  "label": "feeRecipient",
                  "type": "t_address"
                }
              ]
            },
            "t_contract(IFantomAddressRegistry)10552": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomNFTFactory": {
        "src": "contracts\\FantomMarketplace.sol:41",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exists(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomPriceFeed": {
        "src": "contracts\\FantomMarketplace.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "wFTM()",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactory": {
        "src": "contracts\\FantomNFTFactory.sol:8",
        "version": {
          "withMetadata": "a3d19cad134d00c2bd0320f0f376080deb0bf2f7d47944479836c856256d2252",
          "withoutMetadata": "cf477a4133942204c4b570215c71e15f133c398758afd27c29c25e048f380ab2",
          "linkedWithoutMetadata": "cf477a4133942204c4b570215c71e15f133c398758afd27c29c25e048f380ab2"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactory",
            "src": "contracts\\FantomNFTFactory.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactory",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:14"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:17"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:20"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactory.sol:23"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactory.sol:26"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTFactory.sol:29"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomNFTFactory.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactoryPrivate": {
        "src": "contracts\\FantomNFTFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "0249862df63a6b461c80d363ab8913144df70215be845407523b73d65085a90b",
          "withoutMetadata": "792bd5bb899b2c89a3a205154ad88282e8e7392f844f84c10aadef541ce049d8",
          "linkedWithoutMetadata": "792bd5bb899b2c89a3a205154ad88282e8e7392f844f84c10aadef541ce049d8"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactoryPrivate",
            "src": "contracts\\FantomNFTFactoryPrivate.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:29"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradable": {
        "src": "contracts\\FantomNFTTradable.sol:12",
        "version": {
          "withMetadata": "dcdaa7d4dd2c549389ad6b21a23ccfbd526c9b63735c02dc5cc618dc53dbef4c",
          "withoutMetadata": "b715fc2696419c35653e85f48809a39e29cce31ebdd023855f0f9b84bfb96f4b",
          "linkedWithoutMetadata": "b715fc2696419c35653e85f48809a39e29cce31ebdd023855f0f9b84bfb96f4b"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradable",
            "src": "contracts\\FantomNFTTradable.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts\\FantomNFTTradable.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradable",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:27"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:28"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:29"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradable.sol:30"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradable.sol:33"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTTradable.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradablePrivate": {
        "src": "contracts\\FantomNFTTradablePrivate.sol:12",
        "version": {
          "withMetadata": "d8ab60c2bc623353d0c1f652d43f08b3a45029fd184c2d36b8205020f52ad007",
          "withoutMetadata": "961408c66908a1ebfa2cdf7158b1c8a10ea70a213cf353d662b9ffea3b5d64e9",
          "linkedWithoutMetadata": "961408c66908a1ebfa2cdf7158b1c8a10ea70a213cf353d662b9ffea3b5d64e9"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradablePrivate",
            "src": "contracts\\FantomNFTTradablePrivate.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts\\FantomNFTTradablePrivate.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:27"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:28"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:29"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradablePrivate.sol:30"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradablePrivate.sol:33"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTTradablePrivate.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomPriceFeed": {
        "src": "contracts\\FantomPriceFeed.sol:21",
        "version": {
          "withMetadata": "a658a0a13f9184fc0b0f5d665c35d690edc7398782cbefd01c937b2bb18dcc48",
          "withoutMetadata": "a9e82cc54a14fd3bc58dbaa79b4045b14b4c9b290321beb8d121cfd1e034c6b7",
          "linkedWithoutMetadata": "a9e82cc54a14fd3bc58dbaa79b4045b14b4c9b290321beb8d121cfd1e034c6b7"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerOracle(address,address)",
          "updateOracle(address,address)",
          "getPrice(address)",
          "updateAddressRegistry(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomPriceFeed",
            "src": "contracts\\FantomPriceFeed.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomPriceFeed",
              "label": "oracles",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts\\FantomPriceFeed.sol:23"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "addressRegistry",
              "type": "t_address",
              "src": "contracts\\FantomPriceFeed.sol:26"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "wFTM",
              "type": "t_address",
              "src": "contracts\\FantomPriceFeed.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IOracle": {
        "src": "contracts\\FantomPriceFeed.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestAnswer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomTokenRegistry": {
        "src": "contracts\\FantomTokenRegistry.sol:7",
        "version": {
          "withMetadata": "8c38d27bdcb299edad68d09abde598ab7ff156407e293303f4f331832d552950",
          "withoutMetadata": "8d79c556bc9bb807b68178115ba5454cbf257f09ac10f8108786804cc2b2ce86",
          "linkedWithoutMetadata": "8d79c556bc9bb807b68178115ba5454cbf257f09ac10f8108786804cc2b2ce86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "add(address)",
          "remove(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomTokenRegistry",
              "label": "enabled",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomTokenRegistry.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155": {
        "src": "contracts\\library\\ERC1155.sol:11",
        "version": {
          "withMetadata": "83665ac25d73a6e0337dccf340ed072c153f65d0553aaedf2b77d2fc6f803f9d",
          "withoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c",
          "linkedWithoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c"
        },
        "inherit": [
          "IERC165"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155",
              "label": "balances",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts\\library\\ERC1155.sol:25"
            },
            {
              "contract": "ERC1155",
              "label": "operators",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts\\library\\ERC1155.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155Metadata": {
        "src": "contracts\\library\\ERC1155Metadata.sol:9",
        "version": {
          "withMetadata": "2d06782b92683f552c11c8c60edf4fda8a9a35cebcc57eb7114a6942e6331208",
          "withoutMetadata": "e6daebc392a1105a55ecdc42deea5d1e0d27078a64ec91c306dbb0b833545021",
          "linkedWithoutMetadata": "e6daebc392a1105a55ecdc42deea5d1e0d27078a64ec91c306dbb0b833545021"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155Metadata",
              "label": "baseMetadataURI",
              "type": "t_string_storage",
              "src": "contracts\\library\\ERC1155Metadata.sol:12"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155MintBurn": {
        "src": "contracts\\library\\ERC1155MintBurn.sol:9",
        "version": {
          "withMetadata": "9412f7f0210c764b842cdafc08da898951b14074d1fde329a707ba3ab8308531",
          "withoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c",
          "linkedWithoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c"
        },
        "inherit": [
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155TokenReceiver": {
        "src": "contracts\\library\\IERC1155TokenReceiver.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BiddingContractMock": {
        "src": "contracts\\mock\\BiddingContractMock.sol:7",
        "version": {
          "withMetadata": "2ddf868488a4bb607b11f15064150516d236a964086bda8cf47679a877d2e0d3",
          "withoutMetadata": "bb0412333928df554dd3ad72cd3a6e7881eb495118185c1adbf9bb85451157a0",
          "linkedWithoutMetadata": "bb0412333928df554dd3ad72cd3a6e7881eb495118185c1adbf9bb85451157a0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "bid(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BiddingContractMock",
            "src": "contracts\\mock\\BiddingContractMock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BiddingContractMock",
              "label": "auctionContract",
              "type": "t_contract(FantomAuction)8358",
              "src": "contracts\\mock\\BiddingContractMock.sol:8"
            }
          ],
          "types": {
            "t_contract(FantomAuction)8358": {
              "label": "contract FantomAuction"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuctionMock": {
        "src": "contracts\\mock\\FantomAuctionMock.sol:7",
        "version": {
          "withMetadata": "4c158721ad2654576d19eef31dad969f85ac8baf99dc2005f6d8b3262006b6f1",
          "withoutMetadata": "0726a5554392e799019d614e42a300530b01ff2efd5e1c203e4de3d2215341b7",
          "linkedWithoutMetadata": "0726a5554392e799019d614e42a300530b01ff2efd5e1c203e4de3d2215341b7"
        },
        "inherit": [
          "FantomAuction",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "setNowOverride(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuctionMock",
              "label": "nowOverride",
              "type": "t_uint256",
              "src": "contracts\\mock\\FantomAuctionMock.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts\\mock\\MockERC20.sol:7",
        "version": {
          "withMetadata": "8a957e21c0b0d32c06b62f1e2bcfcf3fa08852c238eabeb9d5a0b12ab9a133b4",
          "withoutMetadata": "fdf7012d757f3885a979b8d5e8de23eaa8f27d3d57b8b133ad305739a8277957",
          "linkedWithoutMetadata": "fdf7012d757f3885a979b8d5e8de23eaa8f27d3d57b8b133ad305739a8277957"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts\\mock\\MockERC20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:304",
        "version": {
          "withMetadata": "953a5a25df22a6c1b394fa5bfb572b8b89e51eff28531c242f981a4d7a42de91",
          "withoutMetadata": "953a5a25df22a6c1b394fa5bfb572b8b89e51eff28531c242f981a4d7a42de91",
          "linkedWithoutMetadata": "953a5a25df22a6c1b394fa5bfb572b8b89e51eff28531c242f981a4d7a42de91"
        },
        "inherit": [
          "UpgradeabilityProxy",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AdminUpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:314"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:392"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:228",
        "version": {
          "withMetadata": "d8b876ebcdbed2da609ce8db823c306dfa79caa8d013c2b03bf3293bb3a0679b",
          "withoutMetadata": "d8b876ebcdbed2da609ce8db823c306dfa79caa8d013c2b03bf3293bb3a0679b",
          "linkedWithoutMetadata": "d8b876ebcdbed2da609ce8db823c306dfa79caa8d013c2b03bf3293bb3a0679b"
        },
        "inherit": [
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:237"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:241"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyAdmin": {
        "src": "contracts\\proxy\\ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "52c58b4224d04fcb69bbb9fcb76036691b4b609722815d0adeda9452838787d7",
          "withoutMetadata": "ed1aee2f0dae262982d214e10fdee51b42af8a6317158eebffb1d3b96186cd72",
          "linkedWithoutMetadata": "ed1aee2f0dae262982d214e10fdee51b42af8a6317158eebffb1d3b96186cd72"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\math\\SafeMath.sol:18",
        "version": {
          "withMetadata": "b17a273ac5e79a208abf8a55ba14cf0bd831fabee6984953ede7111da72b0a00",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "baf9a92fa6a458121c41fa3fc899110a3d467c3ecd8b47dce92c4afe9fd5c49d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165",
            "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC165",
              "label": "_supportedInterfaces",
              "type": "t_mapping(t_bytes4,t_bool)",
              "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "contracts\\library\\IERC165.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155": {
        "src": "@openzeppelin\\contracts\\token\\ERC1155\\IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:33",
        "version": {
          "withMetadata": "2a66636b6710d7c8d4e95ffe69ac4d4ef279848b1c42128c584875e2a14ecd46",
          "withoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393",
          "linkedWithoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:44"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\SafeERC20.sol:18",
        "version": {
          "withMetadata": "f69053fa90b75818b0f620823f7d28c0d2b4be91c28d9de84deb646ad1a11dfc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:21",
        "version": {
          "withMetadata": "6159e5b8b162df16ddf823478e6d2f5f1c6289fe3985e922be50f8f8ba411d0b",
          "withoutMetadata": "3b9603e3ba8de701bdbd85fd5e78921e81db89f785601570458c066456264033",
          "linkedWithoutMetadata": "3b9603e3ba8de701bdbd85fd5e78921e81db89f785601570458c066456264033"
        },
        "inherit": [
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address",
          "EnumerableSet",
          "EnumerableMap",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "baseURI()",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:93"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_holderTokens",
              "type": "t_mapping(t_address,t_struct(UintSet)4604_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenOwners",
              "type": "t_struct(UintToAddressMap)3981_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:42"
            },
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:45"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:48"
            },
            {
              "contract": "ERC721",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:51"
            },
            {
              "contract": "ERC721",
              "label": "_baseURI",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(UintSet)4604_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UintSet)4604_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4218_storage"
                }
              ]
            },
            "t_struct(Set)4218_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(UintToAddressMap)3981_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)3663_storage"
                }
              ]
            },
            "t_struct(Map)3663_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)3655_storage)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_struct(MapEntry)3655_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]"
            },
            "t_struct(MapEntry)3655_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Enumerable.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:84",
        "version": {
          "withMetadata": "ee5f6a4dfd9a300ceac5c990268f52303170e6bc1065b48d9aa3ffef4a573bab",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableMap": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableMap.sol:29",
        "version": {
          "withMetadata": "33db0abc4b4d1da32aed25dc771cc00a3efa31fff5d6d984c64d230b001e4165",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableSet.sol:29",
        "version": {
          "withMetadata": "4f51efe115648bafc40e8dcb6d91da10d2c3805f4d3f7a23f58ceb3aa49f6aac",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:8",
        "version": {
          "withMetadata": "74ef6d7234587add3006addc68209e5df580602fb30a593c7df5114b91053bef",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomAddressRegistry": {
        "src": "contracts\\FantomAddressRegistry.sol:8",
        "version": {
          "withMetadata": "bb1e92fe4dd05dc0d85b5cc2bd3227e7d9ca594cdca27f61591be2b639e907fb",
          "withoutMetadata": "b8b02879464d53b43faa6a13553775a50f3ff1f589f7790ee632b882717bb59f",
          "linkedWithoutMetadata": "b8b02879464d53b43faa6a13553775a50f3ff1f589f7790ee632b882717bb59f"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "updateArtion(address)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateNFTFactory(address)",
          "updateNFTFactoryPrivate(address)",
          "updateArtFactory(address)",
          "updateArtFactoryPrivate(address)",
          "updateTokenRegistry(address)",
          "updatePriceFeed(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAddressRegistry",
              "label": "artion",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:12"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:15"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:18"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:21"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "factory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:24"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:27"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "artFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:30"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateArtFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:33"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "tokenRegistry",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:36"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "priceFeed",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactory": {
        "src": "contracts\\FantomArtFactory.sol:8",
        "version": {
          "withMetadata": "4cea603fd5c9d8ae83568033585d3801c5f9dd93c0b5c9786da75d4235c59082",
          "withoutMetadata": "4f4b394ea4c49cc9cf41bcb0a80c1b2bd5db672f6fd6454da60cd014c78ddd4c",
          "linkedWithoutMetadata": "4f4b394ea4c49cc9cf41bcb0a80c1b2bd5db672f6fd6454da60cd014c78ddd4c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactory",
            "src": "contracts\\FantomArtFactory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactory.sol:14"
            },
            {
              "contract": "FantomArtFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactory.sol:17"
            },
            {
              "contract": "FantomArtFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactory.sol:20"
            },
            {
              "contract": "FantomArtFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactory.sol:23"
            },
            {
              "contract": "FantomArtFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtFactory.sol:26"
            },
            {
              "contract": "FantomArtFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomArtFactory.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactoryPrivate": {
        "src": "contracts\\FantomArtFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "92f9da7b6d8ebb8c7d019c27becd2b7b78610ce00ae97ad92f425eccb4263565",
          "withoutMetadata": "1c9fd3486e251cc06955a07159338b35f2f816f4969cf63887ecd57b3f3a4c01",
          "linkedWithoutMetadata": "1c9fd3486e251cc06955a07159338b35f2f816f4969cf63887ecd57b3f3a4c01"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactoryPrivate",
            "src": "contracts\\FantomArtFactoryPrivate.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomArtFactoryPrivate.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradable": {
        "src": "contracts\\FantomArtTradable.sol:22",
        "version": {
          "withMetadata": "a7a354f141458621471e40628277efbce97da99d28b612e5a0a556f990750b53",
          "withoutMetadata": "f33b5082790284cfcfe598c9b5f69a0ce350cda1bd7a36032d7877bbb65b2b8b",
          "linkedWithoutMetadata": "f33b5082790284cfcfe598c9b5f69a0ce350cda1bd7a36032d7877bbb65b2b8b"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradable",
            "src": "contracts\\FantomArtTradable.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts\\FantomArtTradable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradable",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradable.sol:28"
            },
            {
              "contract": "FantomArtTradable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts\\FantomArtTradable.sol:31"
            },
            {
              "contract": "FantomArtTradable",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtTradable.sol:33"
            },
            {
              "contract": "FantomArtTradable",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\FantomArtTradable.sol:34"
            },
            {
              "contract": "FantomArtTradable",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradable.sol:37"
            },
            {
              "contract": "FantomArtTradable",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradable.sol:39"
            },
            {
              "contract": "FantomArtTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradable.sol:41"
            },
            {
              "contract": "FantomArtTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtTradable.sol:43"
            },
            {
              "contract": "FantomArtTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradable.sol:45"
            },
            {
              "contract": "FantomArtTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradable.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "OwnableDelegateProxy": {
        "src": "contracts\\FantomArtTradablePrivate.sol:10",
        "version": {
          "withMetadata": "7577fc0fd54166f06b9727d01fbc7ef7b96d74d8b3057fa39e13ea24f6e1be2d",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyRegistry": {
        "src": "contracts\\FantomArtTradablePrivate.sol:12",
        "version": {
          "withMetadata": "e5b80c9139dd8e88bde6b4786f7a7518b494ccc79296a7aa38381f7651c57f4d",
          "withoutMetadata": "aa5f7868673867df9c21749320a6e16e4ca5f9990a18e1a55b0cff496ccd615d",
          "linkedWithoutMetadata": "aa5f7868673867df9c21749320a6e16e4ca5f9990a18e1a55b0cff496ccd615d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ProxyRegistry",
              "label": "proxies",
              "type": "t_mapping(t_address,t_contract(OwnableDelegateProxy)5848)",
              "src": "contracts\\FantomArtTradablePrivate.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_contract(OwnableDelegateProxy)5848)": {
              "label": "mapping(address => contract OwnableDelegateProxy)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(OwnableDelegateProxy)5848": {
              "label": "contract OwnableDelegateProxy"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradablePrivate": {
        "src": "contracts\\FantomArtTradablePrivate.sol:22",
        "version": {
          "withMetadata": "3794fe018f5ce3dc0bd80cdde3c877b6f5c4cf6be603dce028c5590950e0b551",
          "withoutMetadata": "fdea5c874e471cd342851d70953bc34544f3144ebc53c9d7992b435f3b02e5a9",
          "linkedWithoutMetadata": "fdea5c874e471cd342851d70953bc34544f3144ebc53c9d7992b435f3b02e5a9"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradablePrivate",
            "src": "contracts\\FantomArtTradablePrivate.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts\\FantomArtTradablePrivate.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradablePrivate.sol:28"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts\\FantomArtTradablePrivate.sol:31"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtTradablePrivate.sol:33"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\FantomArtTradablePrivate.sol:34"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradablePrivate.sol:37"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradablePrivate.sol:39"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradablePrivate.sol:41"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtTradablePrivate.sol:43"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradablePrivate.sol:45"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradablePrivate.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Artion": {
        "src": "contracts\\FantomArtion.sol:9",
        "version": {
          "withMetadata": "9e634acf4a38a9e21cb851d41a282657a6befe5b5d8f33f99c8ae8b61002f449",
          "withoutMetadata": "c7781e9281a75bfb606f9859098482b2385eb20c5bdc7c98ff2a8b56ff11f70e",
          "linkedWithoutMetadata": "c7781e9281a75bfb606f9859098482b2385eb20c5bdc7c98ff2a8b56ff11f70e"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable,uint256)",
          "mint(address,string)",
          "burn(uint256)",
          "exists(uint256)",
          "isApproved(uint256,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Artion",
            "src": "contracts\\FantomArtion.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Artion",
              "label": "tokenIdPointer",
              "type": "t_uint256",
              "src": "contracts\\FantomArtion.sol:26"
            },
            {
              "contract": "Artion",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtion.sol:29"
            },
            {
              "contract": "Artion",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtion.sol:32"
            },
            {
              "contract": "Artion",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtion.sol:35"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuction": {
        "src": "contracts\\FantomAuction.sol:55",
        "version": {
          "withMetadata": "23dc15ac695bc9156cf3af9c3eca86775d3622d7c16bbe4fa62ea10041029aff",
          "withoutMetadata": "42b08f90c6323dd0b4ab7ce9ced9b8cf3f49168258bb8c313fe889af714aa662",
          "linkedWithoutMetadata": "42b08f90c6323dd0b4ab7ce9ced9b8cf3f49168258bb8c313fe889af714aa662"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable)",
          "createAuction(address,uint256,address,uint256,uint256,uint256)",
          "placeBid(address,uint256)",
          "placeBid(address,uint256,uint256)",
          "withdrawBid(address,uint256)",
          "resultAuction(address,uint256)",
          "cancelAuction(address,uint256)",
          "toggleIsPaused()",
          "updateMinBidIncrement(uint256)",
          "updateBidWithdrawalLockTime(uint256)",
          "updateAuctionReservePrice(address,uint256,uint256)",
          "updateAuctionStartTime(address,uint256,uint256)",
          "updateAuctionEndTime(address,uint256,uint256)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "getAuction(address,uint256)",
          "getHighestBidder(address,uint256)",
          "reclaimERC20(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "minBidIncrement",
            "src": "contracts\\FantomAuction.sol:155"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bidWithdrawalLockTime",
            "src": "contracts\\FantomAuction.sol:158"
          },
          {
            "kind": "state-variable-assignment",
            "name": "platformFee",
            "src": "contracts\\FantomAuction.sol:161"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuction",
              "label": "auctions",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6655_storage))",
              "src": "contracts\\FantomAuction.sol:149"
            },
            {
              "contract": "FantomAuction",
              "label": "highestBids",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6662_storage))",
              "src": "contracts\\FantomAuction.sol:152"
            },
            {
              "contract": "FantomAuction",
              "label": "minBidIncrement",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:155"
            },
            {
              "contract": "FantomAuction",
              "label": "bidWithdrawalLockTime",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:158"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:161"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFeeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomAuction.sol:164"
            },
            {
              "contract": "FantomAuction",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)6464",
              "src": "contracts\\FantomAuction.sol:167"
            },
            {
              "contract": "FantomAuction",
              "label": "isPaused",
              "type": "t_bool",
              "src": "contracts\\FantomAuction.sol:170"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6655_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.Auction))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(Auction)6655_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.Auction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Auction)6655_storage": {
              "label": "struct FantomAuction.Auction",
              "members": [
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "reservePrice",
                  "type": "t_uint256"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256"
                },
                {
                  "label": "resulted",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6662_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.HighestBid))"
            },
            "t_mapping(t_uint256,t_struct(HighestBid)6662_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.HighestBid)"
            },
            "t_struct(HighestBid)6662_storage": {
              "label": "struct FantomAuction.HighestBid",
              "members": [
                {
                  "label": "bidder",
                  "type": "t_address_payable"
                },
                {
                  "label": "bid",
                  "type": "t_uint256"
                },
                {
                  "label": "lastBidTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)6464": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAddressRegistry": {
        "src": "contracts\\FantomPriceFeed.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenRegistry()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomBundleMarketplace": {
        "src": "contracts\\FantomMarketplace.sol:33",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,address,address)",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomTokenRegistry": {
        "src": "contracts\\FantomPriceFeed.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enabled(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomBundleMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:39",
        "version": {
          "withMetadata": "bfc44e9944167167a61bbd39c39c4c42093da214de0f47a9b695523ff4e65876",
          "withoutMetadata": "502f551b2fe6abf60d80cb7297a245f718e2b638dd364e32410507ea23faab1b",
          "linkedWithoutMetadata": "502f551b2fe6abf60d80cb7297a245f718e2b638dd364e32410507ea23faab1b"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20",
          "EnumerableSet"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "getListing(address,string)",
          "listItem(string,address[],uint256[],uint256[],address,uint256,uint256)",
          "cancelListing(string)",
          "updateListing(string,address,uint256)",
          "buyItem(string)",
          "buyItem(string,address)",
          "createOffer(string,address,uint256,uint256)",
          "cancelOffer(string)",
          "acceptOffer(string,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomBundleMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8523_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:106"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "owners",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts\\FantomBundleMarketplace.sol:109"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIdsPerItem",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4398_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:111"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "nftIndexes",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))",
              "src": "contracts\\FantomBundleMarketplace.sol:113"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIds",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "src": "contracts\\FantomBundleMarketplace.sol:115"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "offers",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8530_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:118"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomBundleMarketplace.sol:121"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomBundleMarketplace.sol:124"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)8386",
              "src": "contracts\\FantomBundleMarketplace.sol:127"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8523_storage))": {
              "label": "mapping(address => mapping(bytes32 => struct FantomBundleMarketplace.Listing))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_struct(Listing)8523_storage)": {
              "label": "mapping(bytes32 => struct FantomBundleMarketplace.Listing)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Listing)8523_storage": {
              "label": "struct FantomBundleMarketplace.Listing",
              "members": [
                {
                  "label": "nfts",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "tokenIds",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "quantities",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4398_storage))": {
              "label": "mapping(address => mapping(uint256 => struct EnumerableSet.Bytes32Set))"
            },
            "t_mapping(t_uint256,t_struct(Bytes32Set)4398_storage)": {
              "label": "mapping(uint256 => struct EnumerableSet.Bytes32Set)"
            },
            "t_struct(Bytes32Set)4398_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4218_storage"
                }
              ]
            },
            "t_struct(Set)4218_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
              "label": "mapping(bytes32 => mapping(address => mapping(uint256 => uint256)))"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8530_storage))": {
              "label": "mapping(bytes32 => mapping(address => struct FantomBundleMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)8530_storage)": {
              "label": "mapping(address => struct FantomBundleMarketplace.Offer)"
            },
            "t_struct(Offer)8530_storage": {
              "label": "struct FantomBundleMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)8386": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomMarketplace": {
        "src": "contracts\\FantomMarketplace.sol:55",
        "version": {
          "withMetadata": "dba65c3e87fa0ba7de32c273704c9a247e6d3760b30350514a0b3f6cdf57ba78",
          "withoutMetadata": "cc57551ec19e66dda0f63b628cd4222293299bc1a85baec7d809f311950b146b",
          "linkedWithoutMetadata": "cc57551ec19e66dda0f63b628cd4222293299bc1a85baec7d809f311950b146b"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable,uint16)",
          "listItem(address,uint256,uint256,address,uint256,uint256)",
          "cancelListing(address,uint256)",
          "updateListing(address,uint256,address,uint256)",
          "buyItem(address,uint256,address payable)",
          "buyItem(address,uint256,address,address)",
          "createOffer(address,uint256,address,uint256,uint256,uint256)",
          "cancelOffer(address,uint256)",
          "acceptOffer(address,uint256,address)",
          "registerRoyalty(address,uint256,uint16)",
          "registerCollectionRoyalty(address,address,uint16,address)",
          "getPrice(address)",
          "updatePlatformFee(uint16)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomMarketplace",
              "label": "minters",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
              "src": "contracts\\FantomMarketplace.sol:135"
            },
            {
              "contract": "FantomMarketplace",
              "label": "royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint16))",
              "src": "contracts\\FantomMarketplace.sol:138"
            },
            {
              "contract": "FantomMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10702_storage)))",
              "src": "contracts\\FantomMarketplace.sol:141"
            },
            {
              "contract": "FantomMarketplace",
              "label": "offers",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10711_storage)))",
              "src": "contracts\\FantomMarketplace.sol:145"
            },
            {
              "contract": "FantomMarketplace",
              "label": "platformFee",
              "type": "t_uint16",
              "src": "contracts\\FantomMarketplace.sol:149"
            },
            {
              "contract": "FantomMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomMarketplace.sol:152"
            },
            {
              "contract": "FantomMarketplace",
              "label": "collectionRoyalties",
              "type": "t_mapping(t_address,t_struct(CollectionRoyalty)10718_storage)",
              "src": "contracts\\FantomMarketplace.sol:155"
            },
            {
              "contract": "FantomMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)10552",
              "src": "contracts\\FantomMarketplace.sol:158"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
              "label": "mapping(address => mapping(uint256 => address))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint16))": {
              "label": "mapping(address => mapping(uint256 => uint16))"
            },
            "t_mapping(t_uint256,t_uint16)": {
              "label": "mapping(uint256 => uint16)"
            },
            "t_uint16": {
              "label": "uint16"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10702_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Listing)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10702_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Listing))"
            },
            "t_mapping(t_address,t_struct(Listing)10702_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Listing)"
            },
            "t_struct(Listing)10702_storage": {
              "label": "struct FantomMarketplace.Listing",
              "members": [
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10711_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Offer)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10711_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)10711_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Offer)"
            },
            "t_struct(Offer)10711_storage": {
              "label": "struct FantomMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_struct(CollectionRoyalty)10718_storage)": {
              "label": "mapping(address => struct FantomMarketplace.CollectionRoyalty)"
            },
            "t_struct(CollectionRoyalty)10718_storage": {
              "label": "struct FantomMarketplace.CollectionRoyalty",
              "members": [
                {
                  "label": "royalty",
                  "type": "t_uint16"
                },
                {
                  "label": "creator",
                  "type": "t_address"
                },
                {
                  "label": "feeRecipient",
                  "type": "t_address"
                }
              ]
            },
            "t_contract(IFantomAddressRegistry)10552": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomNFTFactory": {
        "src": "contracts\\FantomMarketplace.sol:41",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exists(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomPriceFeed": {
        "src": "contracts\\FantomMarketplace.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "wFTM()",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactory": {
        "src": "contracts\\FantomNFTFactory.sol:8",
        "version": {
          "withMetadata": "c14754fccf09ca7f2da774eb7fe48db57a694dd42d389fc3b5e25272d40dd24e",
          "withoutMetadata": "20911fd02c5d917ca9e446f6ef91121b2c9613eeeb41273be0512a1dd0108673",
          "linkedWithoutMetadata": "20911fd02c5d917ca9e446f6ef91121b2c9613eeeb41273be0512a1dd0108673"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactory",
            "src": "contracts\\FantomNFTFactory.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactory",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:14"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:17"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:20"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactory.sol:23"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactory.sol:26"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTFactory.sol:29"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomNFTFactory.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactoryPrivate": {
        "src": "contracts\\FantomNFTFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "ed508b1fafa249a58b16b64e92db751239aa120ab9a20c9dba31548d00b0a711",
          "withoutMetadata": "2fd85bcfd08e8abc60626ddf164e4165e749ce1c047e6e5bc9e953135496a481",
          "linkedWithoutMetadata": "2fd85bcfd08e8abc60626ddf164e4165e749ce1c047e6e5bc9e953135496a481"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactoryPrivate",
            "src": "contracts\\FantomNFTFactoryPrivate.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:29"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradable": {
        "src": "contracts\\FantomNFTTradable.sol:12",
        "version": {
          "withMetadata": "7fa40e992853d23a297d1b54dc88a0b010c29ec7541da04b1716bcf45adfa9dc",
          "withoutMetadata": "b715fc2696419c35653e85f48809a39e29cce31ebdd023855f0f9b84bfb96f4b",
          "linkedWithoutMetadata": "b715fc2696419c35653e85f48809a39e29cce31ebdd023855f0f9b84bfb96f4b"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradable",
            "src": "contracts\\FantomNFTTradable.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts\\FantomNFTTradable.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradable",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:27"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:28"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:29"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradable.sol:30"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradable.sol:33"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTTradable.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradablePrivate": {
        "src": "contracts\\FantomNFTTradablePrivate.sol:12",
        "version": {
          "withMetadata": "3b01ebb770a98c69fdf6e5721bbc8250706c0a9ff39354cc2d8eb5f2753eec51",
          "withoutMetadata": "961408c66908a1ebfa2cdf7158b1c8a10ea70a213cf353d662b9ffea3b5d64e9",
          "linkedWithoutMetadata": "961408c66908a1ebfa2cdf7158b1c8a10ea70a213cf353d662b9ffea3b5d64e9"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradablePrivate",
            "src": "contracts\\FantomNFTTradablePrivate.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts\\FantomNFTTradablePrivate.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:27"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:28"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:29"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradablePrivate.sol:30"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradablePrivate.sol:33"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTTradablePrivate.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomPriceFeed": {
        "src": "contracts\\FantomPriceFeed.sol:21",
        "version": {
          "withMetadata": "e2a564db927b57b60cecfbde034631761c57dd09785a9a4c87e7d812fd7ab4e4",
          "withoutMetadata": "a9e82cc54a14fd3bc58dbaa79b4045b14b4c9b290321beb8d121cfd1e034c6b7",
          "linkedWithoutMetadata": "a9e82cc54a14fd3bc58dbaa79b4045b14b4c9b290321beb8d121cfd1e034c6b7"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerOracle(address,address)",
          "updateOracle(address,address)",
          "getPrice(address)",
          "updateAddressRegistry(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomPriceFeed",
            "src": "contracts\\FantomPriceFeed.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomPriceFeed",
              "label": "oracles",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts\\FantomPriceFeed.sol:23"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "addressRegistry",
              "type": "t_address",
              "src": "contracts\\FantomPriceFeed.sol:26"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "wFTM",
              "type": "t_address",
              "src": "contracts\\FantomPriceFeed.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IOracle": {
        "src": "contracts\\FantomPriceFeed.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestAnswer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomTokenRegistry": {
        "src": "contracts\\FantomTokenRegistry.sol:7",
        "version": {
          "withMetadata": "4263632a839b51cad6ab9183d5a1d180eddc6c0a2f53a13395028c08853dd5e1",
          "withoutMetadata": "8d79c556bc9bb807b68178115ba5454cbf257f09ac10f8108786804cc2b2ce86",
          "linkedWithoutMetadata": "8d79c556bc9bb807b68178115ba5454cbf257f09ac10f8108786804cc2b2ce86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "add(address)",
          "remove(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomTokenRegistry",
              "label": "enabled",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomTokenRegistry.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155": {
        "src": "contracts\\library\\ERC1155.sol:11",
        "version": {
          "withMetadata": "40951d39e45d808eedbcffcc5ef641b45cd69a69ca21f6cde8dea4f07f0fd1ec",
          "withoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c",
          "linkedWithoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c"
        },
        "inherit": [
          "IERC165"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155",
              "label": "balances",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts\\library\\ERC1155.sol:25"
            },
            {
              "contract": "ERC1155",
              "label": "operators",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts\\library\\ERC1155.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155Metadata": {
        "src": "contracts\\library\\ERC1155Metadata.sol:9",
        "version": {
          "withMetadata": "dc4c5c3961c10b605e808a66d5d8a4ddb70dcceec710585a947fe9a3429cce12",
          "withoutMetadata": "e6daebc392a1105a55ecdc42deea5d1e0d27078a64ec91c306dbb0b833545021",
          "linkedWithoutMetadata": "e6daebc392a1105a55ecdc42deea5d1e0d27078a64ec91c306dbb0b833545021"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155Metadata",
              "label": "baseMetadataURI",
              "type": "t_string_storage",
              "src": "contracts\\library\\ERC1155Metadata.sol:12"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155MintBurn": {
        "src": "contracts\\library\\ERC1155MintBurn.sol:9",
        "version": {
          "withMetadata": "ef7ee508606c6824f2938e5ec3092fb3f3b3e67afc9ae90db3c4847670eb966d",
          "withoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c",
          "linkedWithoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c"
        },
        "inherit": [
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155TokenReceiver": {
        "src": "contracts\\library\\IERC1155TokenReceiver.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BiddingContractMock": {
        "src": "contracts\\mock\\BiddingContractMock.sol:7",
        "version": {
          "withMetadata": "c540fc9063c2187f71b02baf51e95bc41fd56a4b48626627caa103b2823addca",
          "withoutMetadata": "bb0412333928df554dd3ad72cd3a6e7881eb495118185c1adbf9bb85451157a0",
          "linkedWithoutMetadata": "bb0412333928df554dd3ad72cd3a6e7881eb495118185c1adbf9bb85451157a0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "bid(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BiddingContractMock",
            "src": "contracts\\mock\\BiddingContractMock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BiddingContractMock",
              "label": "auctionContract",
              "type": "t_contract(FantomAuction)8358",
              "src": "contracts\\mock\\BiddingContractMock.sol:8"
            }
          ],
          "types": {
            "t_contract(FantomAuction)8358": {
              "label": "contract FantomAuction"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuctionMock": {
        "src": "contracts\\mock\\FantomAuctionMock.sol:7",
        "version": {
          "withMetadata": "6b3d3861d0a035671801690c0280871599f55950a055b4400b2ef8c615934fab",
          "withoutMetadata": "0726a5554392e799019d614e42a300530b01ff2efd5e1c203e4de3d2215341b7",
          "linkedWithoutMetadata": "0726a5554392e799019d614e42a300530b01ff2efd5e1c203e4de3d2215341b7"
        },
        "inherit": [
          "FantomAuction",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "setNowOverride(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuctionMock",
              "label": "nowOverride",
              "type": "t_uint256",
              "src": "contracts\\mock\\FantomAuctionMock.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts\\mock\\MockERC20.sol:7",
        "version": {
          "withMetadata": "16622fc0a657003d687eab8f868c7fd3d9e0210eeecad4bcc6e58bbba82892a6",
          "withoutMetadata": "fdf7012d757f3885a979b8d5e8de23eaa8f27d3d57b8b133ad305739a8277957",
          "linkedWithoutMetadata": "fdf7012d757f3885a979b8d5e8de23eaa8f27d3d57b8b133ad305739a8277957"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts\\mock\\MockERC20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:304",
        "version": {
          "withMetadata": "597452280b9d16c07d5e65e4562ab6eae9481f361b63f32b58eafe97f7709ccd",
          "withoutMetadata": "597452280b9d16c07d5e65e4562ab6eae9481f361b63f32b58eafe97f7709ccd",
          "linkedWithoutMetadata": "597452280b9d16c07d5e65e4562ab6eae9481f361b63f32b58eafe97f7709ccd"
        },
        "inherit": [
          "UpgradeabilityProxy",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AdminUpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:314"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:392"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:228",
        "version": {
          "withMetadata": "be35cccb939969db49b0cfc1962c40349dc5dcc9aaf070221a6ec042d3fac543",
          "withoutMetadata": "be35cccb939969db49b0cfc1962c40349dc5dcc9aaf070221a6ec042d3fac543",
          "linkedWithoutMetadata": "be35cccb939969db49b0cfc1962c40349dc5dcc9aaf070221a6ec042d3fac543"
        },
        "inherit": [
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:237"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:241"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyAdmin": {
        "src": "contracts\\proxy\\ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "7be43539d3ec7396df96b792e476c9888328da87dcc8ad465aeaab7dfc511d2b",
          "withoutMetadata": "ed1aee2f0dae262982d214e10fdee51b42af8a6317158eebffb1d3b96186cd72",
          "linkedWithoutMetadata": "ed1aee2f0dae262982d214e10fdee51b42af8a6317158eebffb1d3b96186cd72"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\math\\SafeMath.sol:18",
        "version": {
          "withMetadata": "b17a273ac5e79a208abf8a55ba14cf0bd831fabee6984953ede7111da72b0a00",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "baf9a92fa6a458121c41fa3fc899110a3d467c3ecd8b47dce92c4afe9fd5c49d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165",
            "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC165",
              "label": "_supportedInterfaces",
              "type": "t_mapping(t_bytes4,t_bool)",
              "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "contracts\\library\\IERC165.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155": {
        "src": "@openzeppelin\\contracts\\token\\ERC1155\\IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:33",
        "version": {
          "withMetadata": "2a66636b6710d7c8d4e95ffe69ac4d4ef279848b1c42128c584875e2a14ecd46",
          "withoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393",
          "linkedWithoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:44"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\SafeERC20.sol:18",
        "version": {
          "withMetadata": "f69053fa90b75818b0f620823f7d28c0d2b4be91c28d9de84deb646ad1a11dfc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:21",
        "version": {
          "withMetadata": "6159e5b8b162df16ddf823478e6d2f5f1c6289fe3985e922be50f8f8ba411d0b",
          "withoutMetadata": "3b9603e3ba8de701bdbd85fd5e78921e81db89f785601570458c066456264033",
          "linkedWithoutMetadata": "3b9603e3ba8de701bdbd85fd5e78921e81db89f785601570458c066456264033"
        },
        "inherit": [
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address",
          "EnumerableSet",
          "EnumerableMap",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "baseURI()",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:93"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_holderTokens",
              "type": "t_mapping(t_address,t_struct(UintSet)4604_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenOwners",
              "type": "t_struct(UintToAddressMap)3981_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:42"
            },
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:45"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:48"
            },
            {
              "contract": "ERC721",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:51"
            },
            {
              "contract": "ERC721",
              "label": "_baseURI",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(UintSet)4604_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UintSet)4604_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4218_storage"
                }
              ]
            },
            "t_struct(Set)4218_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(UintToAddressMap)3981_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)3663_storage"
                }
              ]
            },
            "t_struct(Map)3663_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)3655_storage)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_struct(MapEntry)3655_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]"
            },
            "t_struct(MapEntry)3655_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Enumerable.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:84",
        "version": {
          "withMetadata": "ee5f6a4dfd9a300ceac5c990268f52303170e6bc1065b48d9aa3ffef4a573bab",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableMap": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableMap.sol:29",
        "version": {
          "withMetadata": "33db0abc4b4d1da32aed25dc771cc00a3efa31fff5d6d984c64d230b001e4165",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableSet.sol:29",
        "version": {
          "withMetadata": "4f51efe115648bafc40e8dcb6d91da10d2c3805f4d3f7a23f58ceb3aa49f6aac",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:8",
        "version": {
          "withMetadata": "74ef6d7234587add3006addc68209e5df580602fb30a593c7df5114b91053bef",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomAddressRegistry": {
        "src": "contracts\\FantomAddressRegistry.sol:8",
        "version": {
          "withMetadata": "bb1e92fe4dd05dc0d85b5cc2bd3227e7d9ca594cdca27f61591be2b639e907fb",
          "withoutMetadata": "b8b02879464d53b43faa6a13553775a50f3ff1f589f7790ee632b882717bb59f",
          "linkedWithoutMetadata": "b8b02879464d53b43faa6a13553775a50f3ff1f589f7790ee632b882717bb59f"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "updateArtion(address)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateNFTFactory(address)",
          "updateNFTFactoryPrivate(address)",
          "updateArtFactory(address)",
          "updateArtFactoryPrivate(address)",
          "updateTokenRegistry(address)",
          "updatePriceFeed(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAddressRegistry",
              "label": "artion",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:12"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:15"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:18"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:21"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "factory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:24"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:27"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "artFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:30"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateArtFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:33"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "tokenRegistry",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:36"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "priceFeed",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactory": {
        "src": "contracts\\FantomArtFactory.sol:8",
        "version": {
          "withMetadata": "0f885693c0e88ae4ac27dd05387efdafa8567cf40a9a30c5e5eac480a81a384e",
          "withoutMetadata": "0c55acbd7aa597de6cc6a50c7a1a9685c8e437a8348f6e3fb0304d7cb3219b7b",
          "linkedWithoutMetadata": "0c55acbd7aa597de6cc6a50c7a1a9685c8e437a8348f6e3fb0304d7cb3219b7b"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactory",
            "src": "contracts\\FantomArtFactory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactory.sol:14"
            },
            {
              "contract": "FantomArtFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactory.sol:17"
            },
            {
              "contract": "FantomArtFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactory.sol:20"
            },
            {
              "contract": "FantomArtFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactory.sol:23"
            },
            {
              "contract": "FantomArtFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtFactory.sol:26"
            },
            {
              "contract": "FantomArtFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomArtFactory.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactoryPrivate": {
        "src": "contracts\\FantomArtFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "80f9304dab1afda44ea21c30be3fb053c06450e49e4f79c0dd0400de7261ca8d",
          "withoutMetadata": "dece74879a93104ee6aea48e037e2133fa93cb3d90f561b1f024dbbbb7f15253",
          "linkedWithoutMetadata": "dece74879a93104ee6aea48e037e2133fa93cb3d90f561b1f024dbbbb7f15253"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactoryPrivate",
            "src": "contracts\\FantomArtFactoryPrivate.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomArtFactoryPrivate.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradable": {
        "src": "contracts\\FantomArtTradable.sol:22",
        "version": {
          "withMetadata": "87d94e447686a8e48470a6952d95456870a6744c5624400c726e44c424607ee4",
          "withoutMetadata": "f33b5082790284cfcfe598c9b5f69a0ce350cda1bd7a36032d7877bbb65b2b8b",
          "linkedWithoutMetadata": "f33b5082790284cfcfe598c9b5f69a0ce350cda1bd7a36032d7877bbb65b2b8b"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradable",
            "src": "contracts\\FantomArtTradable.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts\\FantomArtTradable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradable",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradable.sol:28"
            },
            {
              "contract": "FantomArtTradable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts\\FantomArtTradable.sol:31"
            },
            {
              "contract": "FantomArtTradable",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtTradable.sol:33"
            },
            {
              "contract": "FantomArtTradable",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\FantomArtTradable.sol:34"
            },
            {
              "contract": "FantomArtTradable",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradable.sol:37"
            },
            {
              "contract": "FantomArtTradable",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradable.sol:39"
            },
            {
              "contract": "FantomArtTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradable.sol:41"
            },
            {
              "contract": "FantomArtTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtTradable.sol:43"
            },
            {
              "contract": "FantomArtTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradable.sol:45"
            },
            {
              "contract": "FantomArtTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradable.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "OwnableDelegateProxy": {
        "src": "contracts\\FantomArtTradablePrivate.sol:10",
        "version": {
          "withMetadata": "2c4b4584da4997a7ec582b1ba9703090e54fcc23c139d4dc31e685187c7389f3",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyRegistry": {
        "src": "contracts\\FantomArtTradablePrivate.sol:12",
        "version": {
          "withMetadata": "70f9919e600b888375378bef88e8b0271920dc9d94c9cd08026cdd18943c51f5",
          "withoutMetadata": "aa5f7868673867df9c21749320a6e16e4ca5f9990a18e1a55b0cff496ccd615d",
          "linkedWithoutMetadata": "aa5f7868673867df9c21749320a6e16e4ca5f9990a18e1a55b0cff496ccd615d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ProxyRegistry",
              "label": "proxies",
              "type": "t_mapping(t_address,t_contract(OwnableDelegateProxy)5848)",
              "src": "contracts\\FantomArtTradablePrivate.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_contract(OwnableDelegateProxy)5848)": {
              "label": "mapping(address => contract OwnableDelegateProxy)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(OwnableDelegateProxy)5848": {
              "label": "contract OwnableDelegateProxy"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradablePrivate": {
        "src": "contracts\\FantomArtTradablePrivate.sol:22",
        "version": {
          "withMetadata": "1dd2a7b75a870e8061d5be85a183d0e5299d4833599295b45500da924d14e5fe",
          "withoutMetadata": "fdea5c874e471cd342851d70953bc34544f3144ebc53c9d7992b435f3b02e5a9",
          "linkedWithoutMetadata": "fdea5c874e471cd342851d70953bc34544f3144ebc53c9d7992b435f3b02e5a9"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradablePrivate",
            "src": "contracts\\FantomArtTradablePrivate.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts\\FantomArtTradablePrivate.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradablePrivate.sol:28"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts\\FantomArtTradablePrivate.sol:31"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtTradablePrivate.sol:33"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\FantomArtTradablePrivate.sol:34"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradablePrivate.sol:37"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradablePrivate.sol:39"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradablePrivate.sol:41"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtTradablePrivate.sol:43"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradablePrivate.sol:45"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradablePrivate.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Artion": {
        "src": "contracts\\FantomArtion.sol:9",
        "version": {
          "withMetadata": "9e634acf4a38a9e21cb851d41a282657a6befe5b5d8f33f99c8ae8b61002f449",
          "withoutMetadata": "c7781e9281a75bfb606f9859098482b2385eb20c5bdc7c98ff2a8b56ff11f70e",
          "linkedWithoutMetadata": "c7781e9281a75bfb606f9859098482b2385eb20c5bdc7c98ff2a8b56ff11f70e"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable,uint256)",
          "mint(address,string)",
          "burn(uint256)",
          "exists(uint256)",
          "isApproved(uint256,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Artion",
            "src": "contracts\\FantomArtion.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Artion",
              "label": "tokenIdPointer",
              "type": "t_uint256",
              "src": "contracts\\FantomArtion.sol:26"
            },
            {
              "contract": "Artion",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtion.sol:29"
            },
            {
              "contract": "Artion",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtion.sol:32"
            },
            {
              "contract": "Artion",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtion.sol:35"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuction": {
        "src": "contracts\\FantomAuction.sol:55",
        "version": {
          "withMetadata": "23dc15ac695bc9156cf3af9c3eca86775d3622d7c16bbe4fa62ea10041029aff",
          "withoutMetadata": "42b08f90c6323dd0b4ab7ce9ced9b8cf3f49168258bb8c313fe889af714aa662",
          "linkedWithoutMetadata": "42b08f90c6323dd0b4ab7ce9ced9b8cf3f49168258bb8c313fe889af714aa662"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable)",
          "createAuction(address,uint256,address,uint256,uint256,uint256)",
          "placeBid(address,uint256)",
          "placeBid(address,uint256,uint256)",
          "withdrawBid(address,uint256)",
          "resultAuction(address,uint256)",
          "cancelAuction(address,uint256)",
          "toggleIsPaused()",
          "updateMinBidIncrement(uint256)",
          "updateBidWithdrawalLockTime(uint256)",
          "updateAuctionReservePrice(address,uint256,uint256)",
          "updateAuctionStartTime(address,uint256,uint256)",
          "updateAuctionEndTime(address,uint256,uint256)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "getAuction(address,uint256)",
          "getHighestBidder(address,uint256)",
          "reclaimERC20(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "minBidIncrement",
            "src": "contracts\\FantomAuction.sol:155"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bidWithdrawalLockTime",
            "src": "contracts\\FantomAuction.sol:158"
          },
          {
            "kind": "state-variable-assignment",
            "name": "platformFee",
            "src": "contracts\\FantomAuction.sol:161"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuction",
              "label": "auctions",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6655_storage))",
              "src": "contracts\\FantomAuction.sol:149"
            },
            {
              "contract": "FantomAuction",
              "label": "highestBids",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6662_storage))",
              "src": "contracts\\FantomAuction.sol:152"
            },
            {
              "contract": "FantomAuction",
              "label": "minBidIncrement",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:155"
            },
            {
              "contract": "FantomAuction",
              "label": "bidWithdrawalLockTime",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:158"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:161"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFeeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomAuction.sol:164"
            },
            {
              "contract": "FantomAuction",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)6464",
              "src": "contracts\\FantomAuction.sol:167"
            },
            {
              "contract": "FantomAuction",
              "label": "isPaused",
              "type": "t_bool",
              "src": "contracts\\FantomAuction.sol:170"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6655_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.Auction))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(Auction)6655_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.Auction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Auction)6655_storage": {
              "label": "struct FantomAuction.Auction",
              "members": [
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "reservePrice",
                  "type": "t_uint256"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256"
                },
                {
                  "label": "resulted",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6662_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.HighestBid))"
            },
            "t_mapping(t_uint256,t_struct(HighestBid)6662_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.HighestBid)"
            },
            "t_struct(HighestBid)6662_storage": {
              "label": "struct FantomAuction.HighestBid",
              "members": [
                {
                  "label": "bidder",
                  "type": "t_address_payable"
                },
                {
                  "label": "bid",
                  "type": "t_uint256"
                },
                {
                  "label": "lastBidTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)6464": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAddressRegistry": {
        "src": "contracts\\FantomPriceFeed.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenRegistry()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomBundleMarketplace": {
        "src": "contracts\\FantomMarketplace.sol:33",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,address,address)",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomTokenRegistry": {
        "src": "contracts\\FantomPriceFeed.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enabled(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomBundleMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:39",
        "version": {
          "withMetadata": "bfc44e9944167167a61bbd39c39c4c42093da214de0f47a9b695523ff4e65876",
          "withoutMetadata": "502f551b2fe6abf60d80cb7297a245f718e2b638dd364e32410507ea23faab1b",
          "linkedWithoutMetadata": "502f551b2fe6abf60d80cb7297a245f718e2b638dd364e32410507ea23faab1b"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20",
          "EnumerableSet"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "getListing(address,string)",
          "listItem(string,address[],uint256[],uint256[],address,uint256,uint256)",
          "cancelListing(string)",
          "updateListing(string,address,uint256)",
          "buyItem(string)",
          "buyItem(string,address)",
          "createOffer(string,address,uint256,uint256)",
          "cancelOffer(string)",
          "acceptOffer(string,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomBundleMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8523_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:106"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "owners",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts\\FantomBundleMarketplace.sol:109"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIdsPerItem",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4398_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:111"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "nftIndexes",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))",
              "src": "contracts\\FantomBundleMarketplace.sol:113"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIds",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "src": "contracts\\FantomBundleMarketplace.sol:115"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "offers",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8530_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:118"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomBundleMarketplace.sol:121"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomBundleMarketplace.sol:124"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)8386",
              "src": "contracts\\FantomBundleMarketplace.sol:127"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8523_storage))": {
              "label": "mapping(address => mapping(bytes32 => struct FantomBundleMarketplace.Listing))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_struct(Listing)8523_storage)": {
              "label": "mapping(bytes32 => struct FantomBundleMarketplace.Listing)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Listing)8523_storage": {
              "label": "struct FantomBundleMarketplace.Listing",
              "members": [
                {
                  "label": "nfts",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "tokenIds",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "quantities",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4398_storage))": {
              "label": "mapping(address => mapping(uint256 => struct EnumerableSet.Bytes32Set))"
            },
            "t_mapping(t_uint256,t_struct(Bytes32Set)4398_storage)": {
              "label": "mapping(uint256 => struct EnumerableSet.Bytes32Set)"
            },
            "t_struct(Bytes32Set)4398_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4218_storage"
                }
              ]
            },
            "t_struct(Set)4218_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
              "label": "mapping(bytes32 => mapping(address => mapping(uint256 => uint256)))"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8530_storage))": {
              "label": "mapping(bytes32 => mapping(address => struct FantomBundleMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)8530_storage)": {
              "label": "mapping(address => struct FantomBundleMarketplace.Offer)"
            },
            "t_struct(Offer)8530_storage": {
              "label": "struct FantomBundleMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)8386": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomMarketplace": {
        "src": "contracts\\FantomMarketplace.sol:55",
        "version": {
          "withMetadata": "dba65c3e87fa0ba7de32c273704c9a247e6d3760b30350514a0b3f6cdf57ba78",
          "withoutMetadata": "cc57551ec19e66dda0f63b628cd4222293299bc1a85baec7d809f311950b146b",
          "linkedWithoutMetadata": "cc57551ec19e66dda0f63b628cd4222293299bc1a85baec7d809f311950b146b"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable,uint16)",
          "listItem(address,uint256,uint256,address,uint256,uint256)",
          "cancelListing(address,uint256)",
          "updateListing(address,uint256,address,uint256)",
          "buyItem(address,uint256,address payable)",
          "buyItem(address,uint256,address,address)",
          "createOffer(address,uint256,address,uint256,uint256,uint256)",
          "cancelOffer(address,uint256)",
          "acceptOffer(address,uint256,address)",
          "registerRoyalty(address,uint256,uint16)",
          "registerCollectionRoyalty(address,address,uint16,address)",
          "getPrice(address)",
          "updatePlatformFee(uint16)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomMarketplace",
              "label": "minters",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
              "src": "contracts\\FantomMarketplace.sol:135"
            },
            {
              "contract": "FantomMarketplace",
              "label": "royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint16))",
              "src": "contracts\\FantomMarketplace.sol:138"
            },
            {
              "contract": "FantomMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10702_storage)))",
              "src": "contracts\\FantomMarketplace.sol:141"
            },
            {
              "contract": "FantomMarketplace",
              "label": "offers",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10711_storage)))",
              "src": "contracts\\FantomMarketplace.sol:145"
            },
            {
              "contract": "FantomMarketplace",
              "label": "platformFee",
              "type": "t_uint16",
              "src": "contracts\\FantomMarketplace.sol:149"
            },
            {
              "contract": "FantomMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomMarketplace.sol:152"
            },
            {
              "contract": "FantomMarketplace",
              "label": "collectionRoyalties",
              "type": "t_mapping(t_address,t_struct(CollectionRoyalty)10718_storage)",
              "src": "contracts\\FantomMarketplace.sol:155"
            },
            {
              "contract": "FantomMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)10552",
              "src": "contracts\\FantomMarketplace.sol:158"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
              "label": "mapping(address => mapping(uint256 => address))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint16))": {
              "label": "mapping(address => mapping(uint256 => uint16))"
            },
            "t_mapping(t_uint256,t_uint16)": {
              "label": "mapping(uint256 => uint16)"
            },
            "t_uint16": {
              "label": "uint16"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10702_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Listing)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10702_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Listing))"
            },
            "t_mapping(t_address,t_struct(Listing)10702_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Listing)"
            },
            "t_struct(Listing)10702_storage": {
              "label": "struct FantomMarketplace.Listing",
              "members": [
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10711_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Offer)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10711_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)10711_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Offer)"
            },
            "t_struct(Offer)10711_storage": {
              "label": "struct FantomMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_struct(CollectionRoyalty)10718_storage)": {
              "label": "mapping(address => struct FantomMarketplace.CollectionRoyalty)"
            },
            "t_struct(CollectionRoyalty)10718_storage": {
              "label": "struct FantomMarketplace.CollectionRoyalty",
              "members": [
                {
                  "label": "royalty",
                  "type": "t_uint16"
                },
                {
                  "label": "creator",
                  "type": "t_address"
                },
                {
                  "label": "feeRecipient",
                  "type": "t_address"
                }
              ]
            },
            "t_contract(IFantomAddressRegistry)10552": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomNFTFactory": {
        "src": "contracts\\FantomMarketplace.sol:41",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exists(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomPriceFeed": {
        "src": "contracts\\FantomMarketplace.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "wFTM()",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactory": {
        "src": "contracts\\FantomNFTFactory.sol:8",
        "version": {
          "withMetadata": "c14754fccf09ca7f2da774eb7fe48db57a694dd42d389fc3b5e25272d40dd24e",
          "withoutMetadata": "20911fd02c5d917ca9e446f6ef91121b2c9613eeeb41273be0512a1dd0108673",
          "linkedWithoutMetadata": "20911fd02c5d917ca9e446f6ef91121b2c9613eeeb41273be0512a1dd0108673"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactory",
            "src": "contracts\\FantomNFTFactory.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactory",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:14"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:17"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:20"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactory.sol:23"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactory.sol:26"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTFactory.sol:29"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomNFTFactory.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactoryPrivate": {
        "src": "contracts\\FantomNFTFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "ed508b1fafa249a58b16b64e92db751239aa120ab9a20c9dba31548d00b0a711",
          "withoutMetadata": "2fd85bcfd08e8abc60626ddf164e4165e749ce1c047e6e5bc9e953135496a481",
          "linkedWithoutMetadata": "2fd85bcfd08e8abc60626ddf164e4165e749ce1c047e6e5bc9e953135496a481"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactoryPrivate",
            "src": "contracts\\FantomNFTFactoryPrivate.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:29"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradable": {
        "src": "contracts\\FantomNFTTradable.sol:12",
        "version": {
          "withMetadata": "7fa40e992853d23a297d1b54dc88a0b010c29ec7541da04b1716bcf45adfa9dc",
          "withoutMetadata": "b715fc2696419c35653e85f48809a39e29cce31ebdd023855f0f9b84bfb96f4b",
          "linkedWithoutMetadata": "b715fc2696419c35653e85f48809a39e29cce31ebdd023855f0f9b84bfb96f4b"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradable",
            "src": "contracts\\FantomNFTTradable.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts\\FantomNFTTradable.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradable",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:27"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:28"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:29"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradable.sol:30"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradable.sol:33"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTTradable.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradablePrivate": {
        "src": "contracts\\FantomNFTTradablePrivate.sol:12",
        "version": {
          "withMetadata": "3b01ebb770a98c69fdf6e5721bbc8250706c0a9ff39354cc2d8eb5f2753eec51",
          "withoutMetadata": "961408c66908a1ebfa2cdf7158b1c8a10ea70a213cf353d662b9ffea3b5d64e9",
          "linkedWithoutMetadata": "961408c66908a1ebfa2cdf7158b1c8a10ea70a213cf353d662b9ffea3b5d64e9"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradablePrivate",
            "src": "contracts\\FantomNFTTradablePrivate.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts\\FantomNFTTradablePrivate.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:27"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:28"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:29"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradablePrivate.sol:30"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradablePrivate.sol:33"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTTradablePrivate.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomPriceFeed": {
        "src": "contracts\\FantomPriceFeed.sol:21",
        "version": {
          "withMetadata": "e2a564db927b57b60cecfbde034631761c57dd09785a9a4c87e7d812fd7ab4e4",
          "withoutMetadata": "a9e82cc54a14fd3bc58dbaa79b4045b14b4c9b290321beb8d121cfd1e034c6b7",
          "linkedWithoutMetadata": "a9e82cc54a14fd3bc58dbaa79b4045b14b4c9b290321beb8d121cfd1e034c6b7"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerOracle(address,address)",
          "updateOracle(address,address)",
          "getPrice(address)",
          "updateAddressRegistry(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomPriceFeed",
            "src": "contracts\\FantomPriceFeed.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomPriceFeed",
              "label": "oracles",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts\\FantomPriceFeed.sol:23"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "addressRegistry",
              "type": "t_address",
              "src": "contracts\\FantomPriceFeed.sol:26"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "wFTM",
              "type": "t_address",
              "src": "contracts\\FantomPriceFeed.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IOracle": {
        "src": "contracts\\FantomPriceFeed.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestAnswer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomTokenRegistry": {
        "src": "contracts\\FantomTokenRegistry.sol:7",
        "version": {
          "withMetadata": "4263632a839b51cad6ab9183d5a1d180eddc6c0a2f53a13395028c08853dd5e1",
          "withoutMetadata": "8d79c556bc9bb807b68178115ba5454cbf257f09ac10f8108786804cc2b2ce86",
          "linkedWithoutMetadata": "8d79c556bc9bb807b68178115ba5454cbf257f09ac10f8108786804cc2b2ce86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "add(address)",
          "remove(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomTokenRegistry",
              "label": "enabled",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomTokenRegistry.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155": {
        "src": "contracts\\library\\ERC1155.sol:10",
        "version": {
          "withMetadata": "80580508857b41bc1f946d574d9b390254fee62ad1f9fbc5869264cdd73d7a29",
          "withoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c",
          "linkedWithoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c"
        },
        "inherit": [
          "IERC165"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155",
              "label": "balances",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts\\library\\ERC1155.sol:24"
            },
            {
              "contract": "ERC1155",
              "label": "operators",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts\\library\\ERC1155.sol:27"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155Metadata": {
        "src": "contracts\\library\\ERC1155Metadata.sol:8",
        "version": {
          "withMetadata": "4e99357f3bef70f6b054f1eb10bc20347829dce9e5d45cad68f46b295baebd17",
          "withoutMetadata": "e6daebc392a1105a55ecdc42deea5d1e0d27078a64ec91c306dbb0b833545021",
          "linkedWithoutMetadata": "e6daebc392a1105a55ecdc42deea5d1e0d27078a64ec91c306dbb0b833545021"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155Metadata",
              "label": "baseMetadataURI",
              "type": "t_string_storage",
              "src": "contracts\\library\\ERC1155Metadata.sol:11"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155MintBurn": {
        "src": "contracts\\library\\ERC1155MintBurn.sol:8",
        "version": {
          "withMetadata": "7540dfa988e3c8857ab5caf63e8df3c3906d0a7b00d388a3654b97406db4b359",
          "withoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c",
          "linkedWithoutMetadata": "8b55d26cd40c402c5f8ccf59174cc8b22319896478ef5e10d0eb35f6ffc6662c"
        },
        "inherit": [
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155TokenReceiver": {
        "src": "contracts\\library\\IERC1155TokenReceiver.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BiddingContractMock": {
        "src": "contracts\\mock\\BiddingContractMock.sol:7",
        "version": {
          "withMetadata": "c540fc9063c2187f71b02baf51e95bc41fd56a4b48626627caa103b2823addca",
          "withoutMetadata": "bb0412333928df554dd3ad72cd3a6e7881eb495118185c1adbf9bb85451157a0",
          "linkedWithoutMetadata": "bb0412333928df554dd3ad72cd3a6e7881eb495118185c1adbf9bb85451157a0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "bid(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BiddingContractMock",
            "src": "contracts\\mock\\BiddingContractMock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BiddingContractMock",
              "label": "auctionContract",
              "type": "t_contract(FantomAuction)8358",
              "src": "contracts\\mock\\BiddingContractMock.sol:8"
            }
          ],
          "types": {
            "t_contract(FantomAuction)8358": {
              "label": "contract FantomAuction"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuctionMock": {
        "src": "contracts\\mock\\FantomAuctionMock.sol:7",
        "version": {
          "withMetadata": "6b3d3861d0a035671801690c0280871599f55950a055b4400b2ef8c615934fab",
          "withoutMetadata": "0726a5554392e799019d614e42a300530b01ff2efd5e1c203e4de3d2215341b7",
          "linkedWithoutMetadata": "0726a5554392e799019d614e42a300530b01ff2efd5e1c203e4de3d2215341b7"
        },
        "inherit": [
          "FantomAuction",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "setNowOverride(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuctionMock",
              "label": "nowOverride",
              "type": "t_uint256",
              "src": "contracts\\mock\\FantomAuctionMock.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts\\mock\\MockERC20.sol:7",
        "version": {
          "withMetadata": "16622fc0a657003d687eab8f868c7fd3d9e0210eeecad4bcc6e58bbba82892a6",
          "withoutMetadata": "fdf7012d757f3885a979b8d5e8de23eaa8f27d3d57b8b133ad305739a8277957",
          "linkedWithoutMetadata": "fdf7012d757f3885a979b8d5e8de23eaa8f27d3d57b8b133ad305739a8277957"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts\\mock\\MockERC20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:304",
        "version": {
          "withMetadata": "597452280b9d16c07d5e65e4562ab6eae9481f361b63f32b58eafe97f7709ccd",
          "withoutMetadata": "597452280b9d16c07d5e65e4562ab6eae9481f361b63f32b58eafe97f7709ccd",
          "linkedWithoutMetadata": "597452280b9d16c07d5e65e4562ab6eae9481f361b63f32b58eafe97f7709ccd"
        },
        "inherit": [
          "UpgradeabilityProxy",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AdminUpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:314"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:392"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:228",
        "version": {
          "withMetadata": "be35cccb939969db49b0cfc1962c40349dc5dcc9aaf070221a6ec042d3fac543",
          "withoutMetadata": "be35cccb939969db49b0cfc1962c40349dc5dcc9aaf070221a6ec042d3fac543",
          "linkedWithoutMetadata": "be35cccb939969db49b0cfc1962c40349dc5dcc9aaf070221a6ec042d3fac543"
        },
        "inherit": [
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:237"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:241"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyAdmin": {
        "src": "contracts\\proxy\\ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "7be43539d3ec7396df96b792e476c9888328da87dcc8ad465aeaab7dfc511d2b",
          "withoutMetadata": "ed1aee2f0dae262982d214e10fdee51b42af8a6317158eebffb1d3b96186cd72",
          "linkedWithoutMetadata": "ed1aee2f0dae262982d214e10fdee51b42af8a6317158eebffb1d3b96186cd72"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    }
  ]
}