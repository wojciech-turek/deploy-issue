{
  "version": "3.2",
  "log": [
    {
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\math\\SafeMath.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "contracts\\library\\IERC165.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155": {
        "src": "@openzeppelin\\contracts\\token\\ERC1155\\IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\SafeERC20.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin\\contracts\\utils\\Address.sol:9",
        "version": {
          "withMetadata": "bd2d11ba3bf43169e2141729b9eeb6caec827a6a7f989e81c53975f36a40441c",
          "withoutMetadata": "bd2d11ba3bf43169e2141729b9eeb6caec827a6a7f989e81c53975f36a40441c",
          "linkedWithoutMetadata": "bd2d11ba3bf43169e2141729b9eeb6caec827a6a7f989e81c53975f36a40441c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETHBalance(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin\\contracts\\utils\\Address.sol:173"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableSet.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomBundleMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:39",
        "version": {
          "withMetadata": "63cd7cfc5777aa7bc9f67b63fa79b5a215048ffb07afc0b67803acb82b7b6726",
          "withoutMetadata": "63cd7cfc5777aa7bc9f67b63fa79b5a215048ffb07afc0b67803acb82b7b6726",
          "linkedWithoutMetadata": "63cd7cfc5777aa7bc9f67b63fa79b5a215048ffb07afc0b67803acb82b7b6726"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20",
          "EnumerableSet"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "getListing(address,string)",
          "listItem(string,address[],uint256[],uint256[],address,uint256,uint256)",
          "cancelListing(string)",
          "updateListing(string,address,uint256)",
          "buyItem(string)",
          "buyItem(string,address)",
          "createOffer(string,address,uint256,uint256)",
          "cancelOffer(string)",
          "acceptOffer(string,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomBundleMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)2606_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:106"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "owners",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts\\FantomBundleMarketplace.sol:109"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIdsPerItem",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)2140_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:111"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "nftIndexes",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))",
              "src": "contracts\\FantomBundleMarketplace.sol:113"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIds",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "src": "contracts\\FantomBundleMarketplace.sol:115"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "offers",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)2613_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:118"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomBundleMarketplace.sol:121"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomBundleMarketplace.sol:124"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)2469",
              "src": "contracts\\FantomBundleMarketplace.sol:127"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)2606_storage))": {
              "label": "mapping(address => mapping(bytes32 => struct FantomBundleMarketplace.Listing))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_struct(Listing)2606_storage)": {
              "label": "mapping(bytes32 => struct FantomBundleMarketplace.Listing)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Listing)2606_storage": {
              "label": "struct FantomBundleMarketplace.Listing",
              "members": [
                {
                  "label": "nfts",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "tokenIds",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "quantities",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)2140_storage))": {
              "label": "mapping(address => mapping(uint256 => struct EnumerableSet.Bytes32Set))"
            },
            "t_mapping(t_uint256,t_struct(Bytes32Set)2140_storage)": {
              "label": "mapping(uint256 => struct EnumerableSet.Bytes32Set)"
            },
            "t_struct(Bytes32Set)2140_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)1960_storage"
                }
              ]
            },
            "t_struct(Set)1960_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
              "label": "mapping(bytes32 => mapping(address => mapping(uint256 => uint256)))"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)2613_storage))": {
              "label": "mapping(bytes32 => mapping(address => struct FantomBundleMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)2613_storage)": {
              "label": "mapping(address => struct FantomBundleMarketplace.Offer)"
            },
            "t_struct(Offer)2613_storage": {
              "label": "struct FantomBundleMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1306"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1306": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)2469": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAddressRegistry": {
        "src": "contracts\\FantomBundleMarketplace.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "auction()",
          "marketplace()",
          "tokenRegistry()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,address,address)",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomTokenRegistry": {
        "src": "contracts\\FantomBundleMarketplace.sol:35",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enabled(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1155": {
        "src": "contracts\\library\\ERC1155.sol:11",
        "version": {
          "withMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "withoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "linkedWithoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48"
        },
        "inherit": [
          "IERC165"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155",
              "label": "balances",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts\\library\\ERC1155.sol:25"
            },
            {
              "contract": "ERC1155",
              "label": "operators",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts\\library\\ERC1155.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155MintBurn": {
        "src": "contracts\\library\\ERC1155MintBurn.sol:9",
        "version": {
          "withMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "withoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "linkedWithoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48"
        },
        "inherit": [
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155TokenReceiver": {
        "src": "contracts\\library\\IERC1155TokenReceiver.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:118",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:340",
        "version": {
          "withMetadata": "23df31985695cc4bc8d5f5dcb1401f4c9fc004973e533a48f50e2a20bb9a0308",
          "withoutMetadata": "23df31985695cc4bc8d5f5dcb1401f4c9fc004973e533a48f50e2a20bb9a0308",
          "linkedWithoutMetadata": "23df31985695cc4bc8d5f5dcb1401f4c9fc004973e533a48f50e2a20bb9a0308"
        },
        "inherit": [
          "UpgradeabilityProxy",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AdminUpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:350"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:428"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "allowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:46",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:264",
        "version": {
          "withMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298",
          "withoutMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298",
          "linkedWithoutMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298"
        },
        "inherit": [
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:273"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:277"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyAdmin": {
        "src": "contracts\\proxy\\ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "1656613df43ea9c96983bb3f81976ece2e279af8f162749eb5e29c655a156ea8",
          "withoutMetadata": "1656613df43ea9c96983bb3f81976ece2e279af8f162749eb5e29c655a156ea8",
          "linkedWithoutMetadata": "1656613df43ea9c96983bb3f81976ece2e279af8f162749eb5e29c655a156ea8"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "ERC1155Metadata": {
        "src": "contracts\\library\\ERC1155Metadata.sol:9",
        "version": {
          "withMetadata": "51a5cd7d489c53959de1b4b946e542c6c132199cdb9fc8ee5b161d795330bc09",
          "withoutMetadata": "51a5cd7d489c53959de1b4b946e542c6c132199cdb9fc8ee5b161d795330bc09",
          "linkedWithoutMetadata": "51a5cd7d489c53959de1b4b946e542c6c132199cdb9fc8ee5b161d795330bc09"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155Metadata",
              "label": "baseMetadataURI",
              "type": "t_string_storage",
              "src": "contracts\\library\\ERC1155Metadata.sol:12"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\math\\SafeMath.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "contracts\\library\\IERC165.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155": {
        "src": "@openzeppelin\\contracts\\token\\ERC1155\\IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\SafeERC20.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin\\contracts\\utils\\Address.sol:9",
        "version": {
          "withMetadata": "bd2d11ba3bf43169e2141729b9eeb6caec827a6a7f989e81c53975f36a40441c",
          "withoutMetadata": "bd2d11ba3bf43169e2141729b9eeb6caec827a6a7f989e81c53975f36a40441c",
          "linkedWithoutMetadata": "bd2d11ba3bf43169e2141729b9eeb6caec827a6a7f989e81c53975f36a40441c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETHBalance(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin\\contracts\\utils\\Address.sol:173"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableSet.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomBundleMarketplace": {
        "src": "contracts\\NahmiiBundleMarketplace.sol:39",
        "version": {
          "withMetadata": "63cd7cfc5777aa7bc9f67b63fa79b5a215048ffb07afc0b67803acb82b7b6726",
          "withoutMetadata": "63cd7cfc5777aa7bc9f67b63fa79b5a215048ffb07afc0b67803acb82b7b6726",
          "linkedWithoutMetadata": "63cd7cfc5777aa7bc9f67b63fa79b5a215048ffb07afc0b67803acb82b7b6726"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20",
          "EnumerableSet"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "getListing(address,string)",
          "listItem(string,address[],uint256[],uint256[],address,uint256,uint256)",
          "cancelListing(string)",
          "updateListing(string,address,uint256)",
          "buyItem(string)",
          "buyItem(string,address)",
          "createOffer(string,address,uint256,uint256)",
          "cancelOffer(string)",
          "acceptOffer(string,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomBundleMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)2606_storage))",
              "src": "contracts\\NahmiiBundleMarketplace.sol:106"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "owners",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts\\NahmiiBundleMarketplace.sol:109"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIdsPerItem",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)2140_storage))",
              "src": "contracts\\NahmiiBundleMarketplace.sol:111"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "nftIndexes",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))",
              "src": "contracts\\NahmiiBundleMarketplace.sol:113"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIds",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "src": "contracts\\NahmiiBundleMarketplace.sol:115"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "offers",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)2613_storage))",
              "src": "contracts\\NahmiiBundleMarketplace.sol:118"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\NahmiiBundleMarketplace.sol:121"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\NahmiiBundleMarketplace.sol:124"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)2469",
              "src": "contracts\\NahmiiBundleMarketplace.sol:127"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)2606_storage))": {
              "label": "mapping(address => mapping(bytes32 => struct FantomBundleMarketplace.Listing))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_struct(Listing)2606_storage)": {
              "label": "mapping(bytes32 => struct FantomBundleMarketplace.Listing)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Listing)2606_storage": {
              "label": "struct FantomBundleMarketplace.Listing",
              "members": [
                {
                  "label": "nfts",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "tokenIds",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "quantities",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)2140_storage))": {
              "label": "mapping(address => mapping(uint256 => struct EnumerableSet.Bytes32Set))"
            },
            "t_mapping(t_uint256,t_struct(Bytes32Set)2140_storage)": {
              "label": "mapping(uint256 => struct EnumerableSet.Bytes32Set)"
            },
            "t_struct(Bytes32Set)2140_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)1960_storage"
                }
              ]
            },
            "t_struct(Set)1960_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
              "label": "mapping(bytes32 => mapping(address => mapping(uint256 => uint256)))"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)2613_storage))": {
              "label": "mapping(bytes32 => mapping(address => struct FantomBundleMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)2613_storage)": {
              "label": "mapping(address => struct FantomBundleMarketplace.Offer)"
            },
            "t_struct(Offer)2613_storage": {
              "label": "struct FantomBundleMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1306"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1306": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)2469": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAddressRegistry": {
        "src": "contracts\\NahmiiBundleMarketplace.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "auction()",
          "marketplace()",
          "tokenRegistry()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomMarketplace": {
        "src": "contracts\\NahmiiBundleMarketplace.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,address,address)",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomTokenRegistry": {
        "src": "contracts\\NahmiiBundleMarketplace.sol:35",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enabled(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1155": {
        "src": "contracts\\library\\ERC1155.sol:11",
        "version": {
          "withMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "withoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "linkedWithoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48"
        },
        "inherit": [
          "IERC165"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155",
              "label": "balances",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts\\library\\ERC1155.sol:25"
            },
            {
              "contract": "ERC1155",
              "label": "operators",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts\\library\\ERC1155.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155MintBurn": {
        "src": "contracts\\library\\ERC1155MintBurn.sol:9",
        "version": {
          "withMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "withoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "linkedWithoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48"
        },
        "inherit": [
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155TokenReceiver": {
        "src": "contracts\\library\\IERC1155TokenReceiver.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\math\\SafeMath.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "contracts\\library\\IERC165.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155": {
        "src": "@openzeppelin\\contracts\\token\\ERC1155\\IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\SafeERC20.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin\\contracts\\utils\\Address.sol:8",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin\\contracts\\utils\\Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableSet.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomBundleMarketplace": {
        "src": "contracts\\NahmiiBundleMarketplace.sol:39",
        "version": {
          "withMetadata": "80252309549e5aeec40bbd21c869ce8bdb0bc08603b194d8ed9b7d5f82170c08",
          "withoutMetadata": "80252309549e5aeec40bbd21c869ce8bdb0bc08603b194d8ed9b7d5f82170c08",
          "linkedWithoutMetadata": "80252309549e5aeec40bbd21c869ce8bdb0bc08603b194d8ed9b7d5f82170c08"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20",
          "EnumerableSet"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "getListing(address,string)",
          "listItem(string,address[],uint256[],uint256[],address,uint256,uint256)",
          "cancelListing(string)",
          "updateListing(string,address,uint256)",
          "buyItem(string)",
          "buyItem(string,address)",
          "createOffer(string,address,uint256,uint256)",
          "cancelOffer(string)",
          "acceptOffer(string,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomBundleMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)2588_storage))",
              "src": "contracts\\NahmiiBundleMarketplace.sol:106"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "owners",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts\\NahmiiBundleMarketplace.sol:109"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIdsPerItem",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)2122_storage))",
              "src": "contracts\\NahmiiBundleMarketplace.sol:111"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "nftIndexes",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))",
              "src": "contracts\\NahmiiBundleMarketplace.sol:113"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIds",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "src": "contracts\\NahmiiBundleMarketplace.sol:115"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "offers",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)2595_storage))",
              "src": "contracts\\NahmiiBundleMarketplace.sol:118"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\NahmiiBundleMarketplace.sol:121"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\NahmiiBundleMarketplace.sol:124"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)2451",
              "src": "contracts\\NahmiiBundleMarketplace.sol:127"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)2588_storage))": {
              "label": "mapping(address => mapping(bytes32 => struct FantomBundleMarketplace.Listing))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_struct(Listing)2588_storage)": {
              "label": "mapping(bytes32 => struct FantomBundleMarketplace.Listing)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Listing)2588_storage": {
              "label": "struct FantomBundleMarketplace.Listing",
              "members": [
                {
                  "label": "nfts",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "tokenIds",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "quantities",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)2122_storage))": {
              "label": "mapping(address => mapping(uint256 => struct EnumerableSet.Bytes32Set))"
            },
            "t_mapping(t_uint256,t_struct(Bytes32Set)2122_storage)": {
              "label": "mapping(uint256 => struct EnumerableSet.Bytes32Set)"
            },
            "t_struct(Bytes32Set)2122_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)1942_storage"
                }
              ]
            },
            "t_struct(Set)1942_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
              "label": "mapping(bytes32 => mapping(address => mapping(uint256 => uint256)))"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)2595_storage))": {
              "label": "mapping(bytes32 => mapping(address => struct FantomBundleMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)2595_storage)": {
              "label": "mapping(address => struct FantomBundleMarketplace.Offer)"
            },
            "t_struct(Offer)2595_storage": {
              "label": "struct FantomBundleMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1306"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1306": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)2451": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAddressRegistry": {
        "src": "contracts\\NahmiiBundleMarketplace.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "auction()",
          "marketplace()",
          "tokenRegistry()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomMarketplace": {
        "src": "contracts\\NahmiiBundleMarketplace.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,address,address)",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomTokenRegistry": {
        "src": "contracts\\NahmiiBundleMarketplace.sol:35",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enabled(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1155": {
        "src": "contracts\\library\\ERC1155.sol:11",
        "version": {
          "withMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "withoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "linkedWithoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48"
        },
        "inherit": [
          "IERC165"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155",
              "label": "balances",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts\\library\\ERC1155.sol:25"
            },
            {
              "contract": "ERC1155",
              "label": "operators",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts\\library\\ERC1155.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155MintBurn": {
        "src": "contracts\\library\\ERC1155MintBurn.sol:9",
        "version": {
          "withMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "withoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "linkedWithoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48"
        },
        "inherit": [
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155TokenReceiver": {
        "src": "contracts\\library\\IERC1155TokenReceiver.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\math\\SafeMath.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:10",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165",
            "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC165",
              "label": "_supportedInterfaces",
              "type": "t_mapping(t_bytes4,t_bool)",
              "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "contracts\\library\\IERC165.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155": {
        "src": "@openzeppelin\\contracts\\token\\ERC1155\\IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "allowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\SafeERC20.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:21",
        "version": {
          "withMetadata": "8dd4924f7080b28673c12e2814297ba24304de217db52581284f10f3e0fdae07",
          "withoutMetadata": "8dd4924f7080b28673c12e2814297ba24304de217db52581284f10f3e0fdae07",
          "linkedWithoutMetadata": "8dd4924f7080b28673c12e2814297ba24304de217db52581284f10f3e0fdae07"
        },
        "inherit": [
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address",
          "EnumerableSet",
          "EnumerableMap",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "baseURI()",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:93"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_holderTokens",
              "type": "t_mapping(t_address,t_struct(UintSet)4680_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenOwners",
              "type": "t_struct(UintToAddressMap)4057_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:42"
            },
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:45"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:48"
            },
            {
              "contract": "ERC721",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:51"
            },
            {
              "contract": "ERC721",
              "label": "_baseURI",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(UintSet)4680_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UintSet)4680_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4294_storage"
                }
              ]
            },
            "t_struct(Set)4294_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(UintToAddressMap)4057_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)3739_storage"
                }
              ]
            },
            "t_struct(Map)3739_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)3731_storage)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_struct(MapEntry)3731_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]"
            },
            "t_struct(MapEntry)3731_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Enumerable.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:118",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableMap": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableMap.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableSet.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:8",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomAddressRegistry": {
        "src": "contracts\\FantomAddressRegistry.sol:8",
        "version": {
          "withMetadata": "76d1b9dc0da2d978cc59139b9224ff1063a564d2e103e5b8c53ddf92f35c6017",
          "withoutMetadata": "76d1b9dc0da2d978cc59139b9224ff1063a564d2e103e5b8c53ddf92f35c6017",
          "linkedWithoutMetadata": "76d1b9dc0da2d978cc59139b9224ff1063a564d2e103e5b8c53ddf92f35c6017"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "updateArtion(address)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateNFTFactory(address)",
          "updateNFTFactoryPrivate(address)",
          "updateArtFactory(address)",
          "updateArtFactoryPrivate(address)",
          "updateTokenRegistry(address)",
          "updatePriceFeed(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAddressRegistry",
              "label": "artion",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:12"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:15"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:18"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:21"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "factory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:24"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:27"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "artFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:30"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateArtFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:33"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "tokenRegistry",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:36"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "priceFeed",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactory": {
        "src": "contracts\\FantomArtFactory.sol:8",
        "version": {
          "withMetadata": "d4a1e964c791a23f412a86709671395f44dddf562aa57580730cf93eff3fd50d",
          "withoutMetadata": "d4a1e964c791a23f412a86709671395f44dddf562aa57580730cf93eff3fd50d",
          "linkedWithoutMetadata": "d4a1e964c791a23f412a86709671395f44dddf562aa57580730cf93eff3fd50d"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactory",
            "src": "contracts\\FantomArtFactory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactory.sol:14"
            },
            {
              "contract": "FantomArtFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactory.sol:17"
            },
            {
              "contract": "FantomArtFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactory.sol:20"
            },
            {
              "contract": "FantomArtFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactory.sol:23"
            },
            {
              "contract": "FantomArtFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtFactory.sol:26"
            },
            {
              "contract": "FantomArtFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomArtFactory.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactoryPrivate": {
        "src": "contracts\\FantomArtFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "e0fdcfb3b16f76fdbd409fb98de3b38f5c3677f2d8b853cdb1097f3798031304",
          "withoutMetadata": "e0fdcfb3b16f76fdbd409fb98de3b38f5c3677f2d8b853cdb1097f3798031304",
          "linkedWithoutMetadata": "e0fdcfb3b16f76fdbd409fb98de3b38f5c3677f2d8b853cdb1097f3798031304"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactoryPrivate",
            "src": "contracts\\FantomArtFactoryPrivate.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomArtFactoryPrivate.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradable": {
        "src": "contracts\\FantomArtTradable.sol:22",
        "version": {
          "withMetadata": "c0adcad2251cfbd3886a61e37e058f7be8a3b59616baad692cd6d6e457da1bf7",
          "withoutMetadata": "c0adcad2251cfbd3886a61e37e058f7be8a3b59616baad692cd6d6e457da1bf7",
          "linkedWithoutMetadata": "c0adcad2251cfbd3886a61e37e058f7be8a3b59616baad692cd6d6e457da1bf7"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradable",
            "src": "contracts\\FantomArtTradable.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts\\FantomArtTradable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradable",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradable.sol:28"
            },
            {
              "contract": "FantomArtTradable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts\\FantomArtTradable.sol:31"
            },
            {
              "contract": "FantomArtTradable",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtTradable.sol:33"
            },
            {
              "contract": "FantomArtTradable",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\FantomArtTradable.sol:34"
            },
            {
              "contract": "FantomArtTradable",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradable.sol:37"
            },
            {
              "contract": "FantomArtTradable",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradable.sol:39"
            },
            {
              "contract": "FantomArtTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradable.sol:41"
            },
            {
              "contract": "FantomArtTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtTradable.sol:43"
            },
            {
              "contract": "FantomArtTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradable.sol:45"
            },
            {
              "contract": "FantomArtTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradable.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "OwnableDelegateProxy": {
        "src": "contracts\\FantomArtTradablePrivate.sol:10",
        "version": {
          "withMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "withoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "linkedWithoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyRegistry": {
        "src": "contracts\\FantomArtTradablePrivate.sol:12",
        "version": {
          "withMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9",
          "withoutMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9",
          "linkedWithoutMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ProxyRegistry",
              "label": "proxies",
              "type": "t_mapping(t_address,t_contract(OwnableDelegateProxy)5924)",
              "src": "contracts\\FantomArtTradablePrivate.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_contract(OwnableDelegateProxy)5924)": {
              "label": "mapping(address => contract OwnableDelegateProxy)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(OwnableDelegateProxy)5924": {
              "label": "contract OwnableDelegateProxy"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradablePrivate": {
        "src": "contracts\\FantomArtTradablePrivate.sol:22",
        "version": {
          "withMetadata": "bf7b7baf73c8347bd6c9b943bd6327823ae43377e0e6c356a7e92d443525e201",
          "withoutMetadata": "bf7b7baf73c8347bd6c9b943bd6327823ae43377e0e6c356a7e92d443525e201",
          "linkedWithoutMetadata": "bf7b7baf73c8347bd6c9b943bd6327823ae43377e0e6c356a7e92d443525e201"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradablePrivate",
            "src": "contracts\\FantomArtTradablePrivate.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts\\FantomArtTradablePrivate.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradablePrivate.sol:28"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts\\FantomArtTradablePrivate.sol:31"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtTradablePrivate.sol:33"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\FantomArtTradablePrivate.sol:34"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradablePrivate.sol:37"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradablePrivate.sol:39"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradablePrivate.sol:41"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtTradablePrivate.sol:43"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradablePrivate.sol:45"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradablePrivate.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Artion": {
        "src": "contracts\\FantomArtion.sol:9",
        "version": {
          "withMetadata": "db5e7f93808806b87f44d6d9a0fcfc2c0e9c9f151cc1759d18a7854746c59ef8",
          "withoutMetadata": "db5e7f93808806b87f44d6d9a0fcfc2c0e9c9f151cc1759d18a7854746c59ef8",
          "linkedWithoutMetadata": "db5e7f93808806b87f44d6d9a0fcfc2c0e9c9f151cc1759d18a7854746c59ef8"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable,uint256)",
          "mint(address,string)",
          "burn(uint256)",
          "exists(uint256)",
          "isApproved(uint256,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Artion",
            "src": "contracts\\FantomArtion.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Artion",
              "label": "tokenIdPointer",
              "type": "t_uint256",
              "src": "contracts\\FantomArtion.sol:26"
            },
            {
              "contract": "Artion",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtion.sol:29"
            },
            {
              "contract": "Artion",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtion.sol:32"
            },
            {
              "contract": "Artion",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtion.sol:35"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuction": {
        "src": "contracts\\FantomAuction.sol:55",
        "version": {
          "withMetadata": "19513f8a3837450037736bded6fd45eeccb28988ed437815908e9ca056eadc1c",
          "withoutMetadata": "19513f8a3837450037736bded6fd45eeccb28988ed437815908e9ca056eadc1c",
          "linkedWithoutMetadata": "19513f8a3837450037736bded6fd45eeccb28988ed437815908e9ca056eadc1c"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable)",
          "createAuction(address,uint256,address,uint256,uint256,bool,uint256)",
          "placeBid(address,uint256)",
          "placeBid(address,uint256,uint256)",
          "withdrawBid(address,uint256)",
          "resultAuction(address,uint256)",
          "cancelAuction(address,uint256)",
          "toggleIsPaused()",
          "updateMinBidIncrement(uint256)",
          "updateBidWithdrawalLockTime(uint256)",
          "updateAuctionReservePrice(address,uint256,uint256)",
          "updateAuctionStartTime(address,uint256,uint256)",
          "updateAuctionEndTime(address,uint256,uint256)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "getAuction(address,uint256)",
          "getHighestBidder(address,uint256)",
          "reclaimERC20(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "minBidIncrement",
            "src": "contracts\\FantomAuction.sol:156"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bidWithdrawalLockTime",
            "src": "contracts\\FantomAuction.sol:159"
          },
          {
            "kind": "state-variable-assignment",
            "name": "platformFee",
            "src": "contracts\\FantomAuction.sol:162"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuction",
              "label": "auctions",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6733_storage))",
              "src": "contracts\\FantomAuction.sol:150"
            },
            {
              "contract": "FantomAuction",
              "label": "highestBids",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6740_storage))",
              "src": "contracts\\FantomAuction.sol:153"
            },
            {
              "contract": "FantomAuction",
              "label": "minBidIncrement",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:156"
            },
            {
              "contract": "FantomAuction",
              "label": "bidWithdrawalLockTime",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:159"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:162"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFeeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomAuction.sol:165"
            },
            {
              "contract": "FantomAuction",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)6540",
              "src": "contracts\\FantomAuction.sol:168"
            },
            {
              "contract": "FantomAuction",
              "label": "isPaused",
              "type": "t_bool",
              "src": "contracts\\FantomAuction.sol:171"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6733_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.Auction))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(Auction)6733_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.Auction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Auction)6733_storage": {
              "label": "struct FantomAuction.Auction",
              "members": [
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "minBid",
                  "type": "t_uint256"
                },
                {
                  "label": "reservePrice",
                  "type": "t_uint256"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256"
                },
                {
                  "label": "resulted",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6740_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.HighestBid))"
            },
            "t_mapping(t_uint256,t_struct(HighestBid)6740_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.HighestBid)"
            },
            "t_struct(HighestBid)6740_storage": {
              "label": "struct FantomAuction.HighestBid",
              "members": [
                {
                  "label": "bidder",
                  "type": "t_address_payable"
                },
                {
                  "label": "bid",
                  "type": "t_uint256"
                },
                {
                  "label": "lastBidTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)6540": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAddressRegistry": {
        "src": "contracts\\FantomPriceFeed.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenRegistry()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomBundleMarketplace": {
        "src": "contracts\\FantomMarketplace.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,address,address)",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomTokenRegistry": {
        "src": "contracts\\FantomPriceFeed.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enabled(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomBundleMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:39",
        "version": {
          "withMetadata": "799fbd51d29c85719d4442f9b1abe166ef22751846c662130b29731ef95365e3",
          "withoutMetadata": "799fbd51d29c85719d4442f9b1abe166ef22751846c662130b29731ef95365e3",
          "linkedWithoutMetadata": "799fbd51d29c85719d4442f9b1abe166ef22751846c662130b29731ef95365e3"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20",
          "EnumerableSet"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "getListing(address,string)",
          "listItem(string,address[],uint256[],uint256[],address,uint256,uint256)",
          "cancelListing(string)",
          "updateListing(string,address,uint256)",
          "buyItem(string)",
          "buyItem(string,address)",
          "createOffer(string,address,uint256,uint256)",
          "cancelOffer(string)",
          "acceptOffer(string,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomBundleMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8637_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:106"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "owners",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts\\FantomBundleMarketplace.sol:109"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIdsPerItem",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4474_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:111"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "nftIndexes",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))",
              "src": "contracts\\FantomBundleMarketplace.sol:113"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIds",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "src": "contracts\\FantomBundleMarketplace.sol:115"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "offers",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8644_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:118"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomBundleMarketplace.sol:121"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomBundleMarketplace.sol:124"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)8500",
              "src": "contracts\\FantomBundleMarketplace.sol:127"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8637_storage))": {
              "label": "mapping(address => mapping(bytes32 => struct FantomBundleMarketplace.Listing))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_struct(Listing)8637_storage)": {
              "label": "mapping(bytes32 => struct FantomBundleMarketplace.Listing)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Listing)8637_storage": {
              "label": "struct FantomBundleMarketplace.Listing",
              "members": [
                {
                  "label": "nfts",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "tokenIds",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "quantities",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4474_storage))": {
              "label": "mapping(address => mapping(uint256 => struct EnumerableSet.Bytes32Set))"
            },
            "t_mapping(t_uint256,t_struct(Bytes32Set)4474_storage)": {
              "label": "mapping(uint256 => struct EnumerableSet.Bytes32Set)"
            },
            "t_struct(Bytes32Set)4474_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4294_storage"
                }
              ]
            },
            "t_struct(Set)4294_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
              "label": "mapping(bytes32 => mapping(address => mapping(uint256 => uint256)))"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8644_storage))": {
              "label": "mapping(bytes32 => mapping(address => struct FantomBundleMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)8644_storage)": {
              "label": "mapping(address => struct FantomBundleMarketplace.Offer)"
            },
            "t_struct(Offer)8644_storage": {
              "label": "struct FantomBundleMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1980"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1980": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)8500": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomMarketplace": {
        "src": "contracts\\FantomMarketplace.sol:71",
        "version": {
          "withMetadata": "f59cf2f57630405672c7081ae743b97f6b2aea7058d8bcd94b62f66298b0e2f0",
          "withoutMetadata": "f59cf2f57630405672c7081ae743b97f6b2aea7058d8bcd94b62f66298b0e2f0",
          "linkedWithoutMetadata": "f59cf2f57630405672c7081ae743b97f6b2aea7058d8bcd94b62f66298b0e2f0"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable,uint16)",
          "listItem(address,uint256,uint256,address,uint256,uint256)",
          "cancelListing(address,uint256)",
          "updateListing(address,uint256,address,uint256)",
          "buyItem(address,uint256,address,address)",
          "createOffer(address,uint256,address,uint256,uint256,uint256)",
          "cancelOffer(address,uint256)",
          "acceptOffer(address,uint256,address)",
          "registerRoyalty(address,uint256,uint16)",
          "registerCollectionRoyalty(address,address,uint16,address)",
          "getPrice(address)",
          "updatePlatformFee(uint16)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomMarketplace",
              "label": "minters",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
              "src": "contracts\\FantomMarketplace.sol:151"
            },
            {
              "contract": "FantomMarketplace",
              "label": "royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint16))",
              "src": "contracts\\FantomMarketplace.sol:154"
            },
            {
              "contract": "FantomMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10841_storage)))",
              "src": "contracts\\FantomMarketplace.sol:157"
            },
            {
              "contract": "FantomMarketplace",
              "label": "offers",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10850_storage)))",
              "src": "contracts\\FantomMarketplace.sol:161"
            },
            {
              "contract": "FantomMarketplace",
              "label": "platformFee",
              "type": "t_uint16",
              "src": "contracts\\FantomMarketplace.sol:165"
            },
            {
              "contract": "FantomMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomMarketplace.sol:168"
            },
            {
              "contract": "FantomMarketplace",
              "label": "collectionRoyalties",
              "type": "t_mapping(t_address,t_struct(CollectionRoyalty)10857_storage)",
              "src": "contracts\\FantomMarketplace.sol:171"
            },
            {
              "contract": "FantomMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)10671",
              "src": "contracts\\FantomMarketplace.sol:174"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
              "label": "mapping(address => mapping(uint256 => address))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint16))": {
              "label": "mapping(address => mapping(uint256 => uint16))"
            },
            "t_mapping(t_uint256,t_uint16)": {
              "label": "mapping(uint256 => uint16)"
            },
            "t_uint16": {
              "label": "uint16"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10841_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Listing)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10841_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Listing))"
            },
            "t_mapping(t_address,t_struct(Listing)10841_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Listing)"
            },
            "t_struct(Listing)10841_storage": {
              "label": "struct FantomMarketplace.Listing",
              "members": [
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10850_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Offer)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10850_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)10850_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Offer)"
            },
            "t_struct(Offer)10850_storage": {
              "label": "struct FantomMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1980"
                },
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1980": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_struct(CollectionRoyalty)10857_storage)": {
              "label": "mapping(address => struct FantomMarketplace.CollectionRoyalty)"
            },
            "t_struct(CollectionRoyalty)10857_storage": {
              "label": "struct FantomMarketplace.CollectionRoyalty",
              "members": [
                {
                  "label": "royalty",
                  "type": "t_uint16"
                },
                {
                  "label": "creator",
                  "type": "t_address"
                },
                {
                  "label": "feeRecipient",
                  "type": "t_address"
                }
              ]
            },
            "t_contract(IFantomAddressRegistry)10671": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAuction": {
        "src": "contracts\\FantomMarketplace.sol:35",
        "inherit": [],
        "libraries": [],
        "methods": [
          "auctions(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomNFTFactory": {
        "src": "contracts\\FantomMarketplace.sol:57",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exists(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomPriceFeed": {
        "src": "contracts\\FantomMarketplace.sol:65",
        "inherit": [],
        "libraries": [],
        "methods": [
          "wFTM()",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactory": {
        "src": "contracts\\FantomNFTFactory.sol:8",
        "version": {
          "withMetadata": "e213646b1abd3df7e7d728be53caa090c9a63c69de693128cf293b4ce49fbd20",
          "withoutMetadata": "e213646b1abd3df7e7d728be53caa090c9a63c69de693128cf293b4ce49fbd20",
          "linkedWithoutMetadata": "e213646b1abd3df7e7d728be53caa090c9a63c69de693128cf293b4ce49fbd20"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactory",
            "src": "contracts\\FantomNFTFactory.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactory",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:14"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:17"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:20"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactory.sol:23"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactory.sol:26"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTFactory.sol:29"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomNFTFactory.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactoryPrivate": {
        "src": "contracts\\FantomNFTFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "0487dd72b4e58be01c1984618c03964b3fc492482cd0f62a547d06f73a35fc03",
          "withoutMetadata": "0487dd72b4e58be01c1984618c03964b3fc492482cd0f62a547d06f73a35fc03",
          "linkedWithoutMetadata": "0487dd72b4e58be01c1984618c03964b3fc492482cd0f62a547d06f73a35fc03"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactoryPrivate",
            "src": "contracts\\FantomNFTFactoryPrivate.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:29"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradable": {
        "src": "contracts\\FantomNFTTradable.sol:12",
        "version": {
          "withMetadata": "ebfb5cde50fd0230e1a40f125d277ad1fe7691d898ff9f8097916e9378446acb",
          "withoutMetadata": "ebfb5cde50fd0230e1a40f125d277ad1fe7691d898ff9f8097916e9378446acb",
          "linkedWithoutMetadata": "ebfb5cde50fd0230e1a40f125d277ad1fe7691d898ff9f8097916e9378446acb"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradable",
            "src": "contracts\\FantomNFTTradable.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts\\FantomNFTTradable.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradable",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:27"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:28"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:29"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradable.sol:30"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradable.sol:33"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTTradable.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradablePrivate": {
        "src": "contracts\\FantomNFTTradablePrivate.sol:12",
        "version": {
          "withMetadata": "8ac05d68d3c513b9b21725d149d1f1bb0045563abbb7908621d92d8939e5182f",
          "withoutMetadata": "8ac05d68d3c513b9b21725d149d1f1bb0045563abbb7908621d92d8939e5182f",
          "linkedWithoutMetadata": "8ac05d68d3c513b9b21725d149d1f1bb0045563abbb7908621d92d8939e5182f"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradablePrivate",
            "src": "contracts\\FantomNFTTradablePrivate.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts\\FantomNFTTradablePrivate.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:27"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:28"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:29"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradablePrivate.sol:30"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradablePrivate.sol:33"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTTradablePrivate.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomPriceFeed": {
        "src": "contracts\\FantomPriceFeed.sol:21",
        "version": {
          "withMetadata": "2179f4724517738e1fb353bf1cb098d7a0480bddecf6b18e59184405ea804515",
          "withoutMetadata": "2179f4724517738e1fb353bf1cb098d7a0480bddecf6b18e59184405ea804515",
          "linkedWithoutMetadata": "2179f4724517738e1fb353bf1cb098d7a0480bddecf6b18e59184405ea804515"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerOracle(address,address)",
          "updateOracle(address,address)",
          "getPrice(address)",
          "updateAddressRegistry(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomPriceFeed",
            "src": "contracts\\FantomPriceFeed.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomPriceFeed",
              "label": "oracles",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts\\FantomPriceFeed.sol:23"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "addressRegistry",
              "type": "t_address",
              "src": "contracts\\FantomPriceFeed.sol:26"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "wFTM",
              "type": "t_address",
              "src": "contracts\\FantomPriceFeed.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IOracle": {
        "src": "contracts\\FantomPriceFeed.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestAnswer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomTokenRegistry": {
        "src": "contracts\\FantomTokenRegistry.sol:7",
        "version": {
          "withMetadata": "f557aeb9df5f2a6d4d41c6ed338fe625912760f47b04da7f88e543b786055f16",
          "withoutMetadata": "f557aeb9df5f2a6d4d41c6ed338fe625912760f47b04da7f88e543b786055f16",
          "linkedWithoutMetadata": "f557aeb9df5f2a6d4d41c6ed338fe625912760f47b04da7f88e543b786055f16"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "add(address)",
          "remove(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomTokenRegistry",
              "label": "enabled",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomTokenRegistry.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155": {
        "src": "contracts\\library\\ERC1155.sol:11",
        "version": {
          "withMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "withoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "linkedWithoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48"
        },
        "inherit": [
          "IERC165"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155",
              "label": "balances",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts\\library\\ERC1155.sol:25"
            },
            {
              "contract": "ERC1155",
              "label": "operators",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts\\library\\ERC1155.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155Metadata": {
        "src": "contracts\\library\\ERC1155Metadata.sol:9",
        "version": {
          "withMetadata": "51a5cd7d489c53959de1b4b946e542c6c132199cdb9fc8ee5b161d795330bc09",
          "withoutMetadata": "51a5cd7d489c53959de1b4b946e542c6c132199cdb9fc8ee5b161d795330bc09",
          "linkedWithoutMetadata": "51a5cd7d489c53959de1b4b946e542c6c132199cdb9fc8ee5b161d795330bc09"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155Metadata",
              "label": "baseMetadataURI",
              "type": "t_string_storage",
              "src": "contracts\\library\\ERC1155Metadata.sol:12"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155MintBurn": {
        "src": "contracts\\library\\ERC1155MintBurn.sol:9",
        "version": {
          "withMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "withoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "linkedWithoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48"
        },
        "inherit": [
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155TokenReceiver": {
        "src": "contracts\\library\\IERC1155TokenReceiver.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BiddingContractMock": {
        "src": "contracts\\mock\\BiddingContractMock.sol:7",
        "version": {
          "withMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a",
          "withoutMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a",
          "linkedWithoutMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "bid(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BiddingContractMock",
            "src": "contracts\\mock\\BiddingContractMock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BiddingContractMock",
              "label": "auctionContract",
              "type": "t_contract(FantomAuction)8472",
              "src": "contracts\\mock\\BiddingContractMock.sol:8"
            }
          ],
          "types": {
            "t_contract(FantomAuction)8472": {
              "label": "contract FantomAuction"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuctionMock": {
        "src": "contracts\\mock\\FantomAuctionMock.sol:7",
        "version": {
          "withMetadata": "fdd785b62bd3dbeff80b266d8be027fce6fce02f5aba2d3eb253346d53c7b0e1",
          "withoutMetadata": "fdd785b62bd3dbeff80b266d8be027fce6fce02f5aba2d3eb253346d53c7b0e1",
          "linkedWithoutMetadata": "fdd785b62bd3dbeff80b266d8be027fce6fce02f5aba2d3eb253346d53c7b0e1"
        },
        "inherit": [
          "FantomAuction",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "setNowOverride(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuctionMock",
              "label": "nowOverride",
              "type": "t_uint256",
              "src": "contracts\\mock\\FantomAuctionMock.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts\\mock\\MockERC20.sol:7",
        "version": {
          "withMetadata": "d825fed50e7322ed52c283c318628220344d5aca187c9dc3813d7f5889faf0a8",
          "withoutMetadata": "d825fed50e7322ed52c283c318628220344d5aca187c9dc3813d7f5889faf0a8",
          "linkedWithoutMetadata": "d825fed50e7322ed52c283c318628220344d5aca187c9dc3813d7f5889faf0a8"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts\\mock\\MockERC20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:340",
        "version": {
          "withMetadata": "23df31985695cc4bc8d5f5dcb1401f4c9fc004973e533a48f50e2a20bb9a0308",
          "withoutMetadata": "23df31985695cc4bc8d5f5dcb1401f4c9fc004973e533a48f50e2a20bb9a0308",
          "linkedWithoutMetadata": "23df31985695cc4bc8d5f5dcb1401f4c9fc004973e533a48f50e2a20bb9a0308"
        },
        "inherit": [
          "UpgradeabilityProxy",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AdminUpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:350"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:428"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:46",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:264",
        "version": {
          "withMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298",
          "withoutMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298",
          "linkedWithoutMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298"
        },
        "inherit": [
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:273"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:277"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyAdmin": {
        "src": "contracts\\proxy\\ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "1656613df43ea9c96983bb3f81976ece2e279af8f162749eb5e29c655a156ea8",
          "withoutMetadata": "1656613df43ea9c96983bb3f81976ece2e279af8f162749eb5e29c655a156ea8",
          "linkedWithoutMetadata": "1656613df43ea9c96983bb3f81976ece2e279af8f162749eb5e29c655a156ea8"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\math\\SafeMath.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:10",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165",
            "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC165",
              "label": "_supportedInterfaces",
              "type": "t_mapping(t_bytes4,t_bool)",
              "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "contracts\\library\\IERC165.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155": {
        "src": "@openzeppelin\\contracts\\token\\ERC1155\\IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "allowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\SafeERC20.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:21",
        "version": {
          "withMetadata": "8dd4924f7080b28673c12e2814297ba24304de217db52581284f10f3e0fdae07",
          "withoutMetadata": "8dd4924f7080b28673c12e2814297ba24304de217db52581284f10f3e0fdae07",
          "linkedWithoutMetadata": "8dd4924f7080b28673c12e2814297ba24304de217db52581284f10f3e0fdae07"
        },
        "inherit": [
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address",
          "EnumerableSet",
          "EnumerableMap",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "baseURI()",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:93"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_holderTokens",
              "type": "t_mapping(t_address,t_struct(UintSet)4688_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenOwners",
              "type": "t_struct(UintToAddressMap)4065_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:42"
            },
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:45"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:48"
            },
            {
              "contract": "ERC721",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:51"
            },
            {
              "contract": "ERC721",
              "label": "_baseURI",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(UintSet)4688_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UintSet)4688_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4302_storage"
                }
              ]
            },
            "t_struct(Set)4302_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(UintToAddressMap)4065_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)3747_storage"
                }
              ]
            },
            "t_struct(Map)3747_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)3739_storage)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_struct(MapEntry)3739_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]"
            },
            "t_struct(MapEntry)3739_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Enumerable.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:118",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableMap": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableMap.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableSet.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:8",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomAddressRegistry": {
        "src": "contracts\\FantomAddressRegistry.sol:8",
        "version": {
          "withMetadata": "76d1b9dc0da2d978cc59139b9224ff1063a564d2e103e5b8c53ddf92f35c6017",
          "withoutMetadata": "76d1b9dc0da2d978cc59139b9224ff1063a564d2e103e5b8c53ddf92f35c6017",
          "linkedWithoutMetadata": "76d1b9dc0da2d978cc59139b9224ff1063a564d2e103e5b8c53ddf92f35c6017"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "updateArtion(address)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateNFTFactory(address)",
          "updateNFTFactoryPrivate(address)",
          "updateArtFactory(address)",
          "updateArtFactoryPrivate(address)",
          "updateTokenRegistry(address)",
          "updatePriceFeed(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAddressRegistry",
              "label": "artion",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:12"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:15"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:18"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:21"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "factory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:24"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:27"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "artFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:30"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateArtFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:33"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "tokenRegistry",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:36"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "priceFeed",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactory": {
        "src": "contracts\\FantomArtFactory.sol:8",
        "version": {
          "withMetadata": "d4a1e964c791a23f412a86709671395f44dddf562aa57580730cf93eff3fd50d",
          "withoutMetadata": "d4a1e964c791a23f412a86709671395f44dddf562aa57580730cf93eff3fd50d",
          "linkedWithoutMetadata": "d4a1e964c791a23f412a86709671395f44dddf562aa57580730cf93eff3fd50d"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactory",
            "src": "contracts\\FantomArtFactory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactory.sol:14"
            },
            {
              "contract": "FantomArtFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactory.sol:17"
            },
            {
              "contract": "FantomArtFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactory.sol:20"
            },
            {
              "contract": "FantomArtFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactory.sol:23"
            },
            {
              "contract": "FantomArtFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtFactory.sol:26"
            },
            {
              "contract": "FantomArtFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomArtFactory.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactoryPrivate": {
        "src": "contracts\\FantomArtFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "e0fdcfb3b16f76fdbd409fb98de3b38f5c3677f2d8b853cdb1097f3798031304",
          "withoutMetadata": "e0fdcfb3b16f76fdbd409fb98de3b38f5c3677f2d8b853cdb1097f3798031304",
          "linkedWithoutMetadata": "e0fdcfb3b16f76fdbd409fb98de3b38f5c3677f2d8b853cdb1097f3798031304"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactoryPrivate",
            "src": "contracts\\FantomArtFactoryPrivate.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomArtFactoryPrivate.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradable": {
        "src": "contracts\\FantomArtTradable.sol:22",
        "version": {
          "withMetadata": "c0adcad2251cfbd3886a61e37e058f7be8a3b59616baad692cd6d6e457da1bf7",
          "withoutMetadata": "c0adcad2251cfbd3886a61e37e058f7be8a3b59616baad692cd6d6e457da1bf7",
          "linkedWithoutMetadata": "c0adcad2251cfbd3886a61e37e058f7be8a3b59616baad692cd6d6e457da1bf7"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradable",
            "src": "contracts\\FantomArtTradable.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts\\FantomArtTradable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradable",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradable.sol:28"
            },
            {
              "contract": "FantomArtTradable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts\\FantomArtTradable.sol:31"
            },
            {
              "contract": "FantomArtTradable",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtTradable.sol:33"
            },
            {
              "contract": "FantomArtTradable",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\FantomArtTradable.sol:34"
            },
            {
              "contract": "FantomArtTradable",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradable.sol:37"
            },
            {
              "contract": "FantomArtTradable",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradable.sol:39"
            },
            {
              "contract": "FantomArtTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradable.sol:41"
            },
            {
              "contract": "FantomArtTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtTradable.sol:43"
            },
            {
              "contract": "FantomArtTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradable.sol:45"
            },
            {
              "contract": "FantomArtTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradable.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "OwnableDelegateProxy": {
        "src": "contracts\\FantomArtTradablePrivate.sol:10",
        "version": {
          "withMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "withoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "linkedWithoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyRegistry": {
        "src": "contracts\\FantomArtTradablePrivate.sol:12",
        "version": {
          "withMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9",
          "withoutMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9",
          "linkedWithoutMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ProxyRegistry",
              "label": "proxies",
              "type": "t_mapping(t_address,t_contract(OwnableDelegateProxy)5932)",
              "src": "contracts\\FantomArtTradablePrivate.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_contract(OwnableDelegateProxy)5932)": {
              "label": "mapping(address => contract OwnableDelegateProxy)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(OwnableDelegateProxy)5932": {
              "label": "contract OwnableDelegateProxy"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradablePrivate": {
        "src": "contracts\\FantomArtTradablePrivate.sol:22",
        "version": {
          "withMetadata": "bf7b7baf73c8347bd6c9b943bd6327823ae43377e0e6c356a7e92d443525e201",
          "withoutMetadata": "bf7b7baf73c8347bd6c9b943bd6327823ae43377e0e6c356a7e92d443525e201",
          "linkedWithoutMetadata": "bf7b7baf73c8347bd6c9b943bd6327823ae43377e0e6c356a7e92d443525e201"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradablePrivate",
            "src": "contracts\\FantomArtTradablePrivate.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts\\FantomArtTradablePrivate.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradablePrivate.sol:28"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts\\FantomArtTradablePrivate.sol:31"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtTradablePrivate.sol:33"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\FantomArtTradablePrivate.sol:34"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradablePrivate.sol:37"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradablePrivate.sol:39"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradablePrivate.sol:41"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtTradablePrivate.sol:43"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradablePrivate.sol:45"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradablePrivate.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Artion": {
        "src": "contracts\\FantomArtion.sol:9",
        "version": {
          "withMetadata": "db5e7f93808806b87f44d6d9a0fcfc2c0e9c9f151cc1759d18a7854746c59ef8",
          "withoutMetadata": "db5e7f93808806b87f44d6d9a0fcfc2c0e9c9f151cc1759d18a7854746c59ef8",
          "linkedWithoutMetadata": "db5e7f93808806b87f44d6d9a0fcfc2c0e9c9f151cc1759d18a7854746c59ef8"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable,uint256)",
          "mint(address,string)",
          "burn(uint256)",
          "exists(uint256)",
          "isApproved(uint256,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Artion",
            "src": "contracts\\FantomArtion.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Artion",
              "label": "tokenIdPointer",
              "type": "t_uint256",
              "src": "contracts\\FantomArtion.sol:26"
            },
            {
              "contract": "Artion",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtion.sol:29"
            },
            {
              "contract": "Artion",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtion.sol:32"
            },
            {
              "contract": "Artion",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtion.sol:35"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuction": {
        "src": "contracts\\FantomAuction.sol:55",
        "version": {
          "withMetadata": "19513f8a3837450037736bded6fd45eeccb28988ed437815908e9ca056eadc1c",
          "withoutMetadata": "19513f8a3837450037736bded6fd45eeccb28988ed437815908e9ca056eadc1c",
          "linkedWithoutMetadata": "19513f8a3837450037736bded6fd45eeccb28988ed437815908e9ca056eadc1c"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable)",
          "createAuction(address,uint256,address,uint256,uint256,bool,uint256)",
          "placeBid(address,uint256)",
          "placeBid(address,uint256,uint256)",
          "withdrawBid(address,uint256)",
          "resultAuction(address,uint256)",
          "cancelAuction(address,uint256)",
          "toggleIsPaused()",
          "updateMinBidIncrement(uint256)",
          "updateBidWithdrawalLockTime(uint256)",
          "updateAuctionReservePrice(address,uint256,uint256)",
          "updateAuctionStartTime(address,uint256,uint256)",
          "updateAuctionEndTime(address,uint256,uint256)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "getAuction(address,uint256)",
          "getHighestBidder(address,uint256)",
          "reclaimERC20(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "minBidIncrement",
            "src": "contracts\\FantomAuction.sol:156"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bidWithdrawalLockTime",
            "src": "contracts\\FantomAuction.sol:159"
          },
          {
            "kind": "state-variable-assignment",
            "name": "platformFee",
            "src": "contracts\\FantomAuction.sol:162"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuction",
              "label": "auctions",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6741_storage))",
              "src": "contracts\\FantomAuction.sol:150"
            },
            {
              "contract": "FantomAuction",
              "label": "highestBids",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6748_storage))",
              "src": "contracts\\FantomAuction.sol:153"
            },
            {
              "contract": "FantomAuction",
              "label": "minBidIncrement",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:156"
            },
            {
              "contract": "FantomAuction",
              "label": "bidWithdrawalLockTime",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:159"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:162"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFeeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomAuction.sol:165"
            },
            {
              "contract": "FantomAuction",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)6548",
              "src": "contracts\\FantomAuction.sol:168"
            },
            {
              "contract": "FantomAuction",
              "label": "isPaused",
              "type": "t_bool",
              "src": "contracts\\FantomAuction.sol:171"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6741_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.Auction))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(Auction)6741_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.Auction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Auction)6741_storage": {
              "label": "struct FantomAuction.Auction",
              "members": [
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "minBid",
                  "type": "t_uint256"
                },
                {
                  "label": "reservePrice",
                  "type": "t_uint256"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256"
                },
                {
                  "label": "resulted",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6748_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.HighestBid))"
            },
            "t_mapping(t_uint256,t_struct(HighestBid)6748_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.HighestBid)"
            },
            "t_struct(HighestBid)6748_storage": {
              "label": "struct FantomAuction.HighestBid",
              "members": [
                {
                  "label": "bidder",
                  "type": "t_address_payable"
                },
                {
                  "label": "bid",
                  "type": "t_uint256"
                },
                {
                  "label": "lastBidTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)6548": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAddressRegistry": {
        "src": "contracts\\FantomPriceFeed.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenRegistry()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomBundleMarketplace": {
        "src": "contracts\\FantomMarketplace.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,address,address)",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomTokenRegistry": {
        "src": "contracts\\FantomPriceFeed.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enabled(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomBundleMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:39",
        "version": {
          "withMetadata": "799fbd51d29c85719d4442f9b1abe166ef22751846c662130b29731ef95365e3",
          "withoutMetadata": "799fbd51d29c85719d4442f9b1abe166ef22751846c662130b29731ef95365e3",
          "linkedWithoutMetadata": "799fbd51d29c85719d4442f9b1abe166ef22751846c662130b29731ef95365e3"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20",
          "EnumerableSet"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "getListing(address,string)",
          "listItem(string,address[],uint256[],uint256[],address,uint256,uint256)",
          "cancelListing(string)",
          "updateListing(string,address,uint256)",
          "buyItem(string)",
          "buyItem(string,address)",
          "createOffer(string,address,uint256,uint256)",
          "cancelOffer(string)",
          "acceptOffer(string,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomBundleMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8645_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:106"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "owners",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts\\FantomBundleMarketplace.sol:109"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIdsPerItem",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4482_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:111"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "nftIndexes",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))",
              "src": "contracts\\FantomBundleMarketplace.sol:113"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIds",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "src": "contracts\\FantomBundleMarketplace.sol:115"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "offers",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8652_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:118"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomBundleMarketplace.sol:121"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomBundleMarketplace.sol:124"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)8508",
              "src": "contracts\\FantomBundleMarketplace.sol:127"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8645_storage))": {
              "label": "mapping(address => mapping(bytes32 => struct FantomBundleMarketplace.Listing))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_struct(Listing)8645_storage)": {
              "label": "mapping(bytes32 => struct FantomBundleMarketplace.Listing)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Listing)8645_storage": {
              "label": "struct FantomBundleMarketplace.Listing",
              "members": [
                {
                  "label": "nfts",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "tokenIds",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "quantities",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4482_storage))": {
              "label": "mapping(address => mapping(uint256 => struct EnumerableSet.Bytes32Set))"
            },
            "t_mapping(t_uint256,t_struct(Bytes32Set)4482_storage)": {
              "label": "mapping(uint256 => struct EnumerableSet.Bytes32Set)"
            },
            "t_struct(Bytes32Set)4482_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4302_storage"
                }
              ]
            },
            "t_struct(Set)4302_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
              "label": "mapping(bytes32 => mapping(address => mapping(uint256 => uint256)))"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8652_storage))": {
              "label": "mapping(bytes32 => mapping(address => struct FantomBundleMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)8652_storage)": {
              "label": "mapping(address => struct FantomBundleMarketplace.Offer)"
            },
            "t_struct(Offer)8652_storage": {
              "label": "struct FantomBundleMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1988"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1988": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)8508": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomMarketplace": {
        "src": "contracts\\FantomMarketplace.sol:71",
        "version": {
          "withMetadata": "f59cf2f57630405672c7081ae743b97f6b2aea7058d8bcd94b62f66298b0e2f0",
          "withoutMetadata": "f59cf2f57630405672c7081ae743b97f6b2aea7058d8bcd94b62f66298b0e2f0",
          "linkedWithoutMetadata": "f59cf2f57630405672c7081ae743b97f6b2aea7058d8bcd94b62f66298b0e2f0"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable,uint16)",
          "listItem(address,uint256,uint256,address,uint256,uint256)",
          "cancelListing(address,uint256)",
          "updateListing(address,uint256,address,uint256)",
          "buyItem(address,uint256,address,address)",
          "createOffer(address,uint256,address,uint256,uint256,uint256)",
          "cancelOffer(address,uint256)",
          "acceptOffer(address,uint256,address)",
          "registerRoyalty(address,uint256,uint16)",
          "registerCollectionRoyalty(address,address,uint16,address)",
          "getPrice(address)",
          "updatePlatformFee(uint16)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomMarketplace",
              "label": "minters",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
              "src": "contracts\\FantomMarketplace.sol:151"
            },
            {
              "contract": "FantomMarketplace",
              "label": "royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint16))",
              "src": "contracts\\FantomMarketplace.sol:154"
            },
            {
              "contract": "FantomMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10849_storage)))",
              "src": "contracts\\FantomMarketplace.sol:157"
            },
            {
              "contract": "FantomMarketplace",
              "label": "offers",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10858_storage)))",
              "src": "contracts\\FantomMarketplace.sol:161"
            },
            {
              "contract": "FantomMarketplace",
              "label": "platformFee",
              "type": "t_uint16",
              "src": "contracts\\FantomMarketplace.sol:165"
            },
            {
              "contract": "FantomMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomMarketplace.sol:168"
            },
            {
              "contract": "FantomMarketplace",
              "label": "collectionRoyalties",
              "type": "t_mapping(t_address,t_struct(CollectionRoyalty)10865_storage)",
              "src": "contracts\\FantomMarketplace.sol:171"
            },
            {
              "contract": "FantomMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)10679",
              "src": "contracts\\FantomMarketplace.sol:174"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
              "label": "mapping(address => mapping(uint256 => address))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint16))": {
              "label": "mapping(address => mapping(uint256 => uint16))"
            },
            "t_mapping(t_uint256,t_uint16)": {
              "label": "mapping(uint256 => uint16)"
            },
            "t_uint16": {
              "label": "uint16"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10849_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Listing)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10849_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Listing))"
            },
            "t_mapping(t_address,t_struct(Listing)10849_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Listing)"
            },
            "t_struct(Listing)10849_storage": {
              "label": "struct FantomMarketplace.Listing",
              "members": [
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10858_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Offer)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10858_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)10858_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Offer)"
            },
            "t_struct(Offer)10858_storage": {
              "label": "struct FantomMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1988"
                },
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1988": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_struct(CollectionRoyalty)10865_storage)": {
              "label": "mapping(address => struct FantomMarketplace.CollectionRoyalty)"
            },
            "t_struct(CollectionRoyalty)10865_storage": {
              "label": "struct FantomMarketplace.CollectionRoyalty",
              "members": [
                {
                  "label": "royalty",
                  "type": "t_uint16"
                },
                {
                  "label": "creator",
                  "type": "t_address"
                },
                {
                  "label": "feeRecipient",
                  "type": "t_address"
                }
              ]
            },
            "t_contract(IFantomAddressRegistry)10679": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAuction": {
        "src": "contracts\\FantomMarketplace.sol:35",
        "inherit": [],
        "libraries": [],
        "methods": [
          "auctions(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomNFTFactory": {
        "src": "contracts\\FantomMarketplace.sol:57",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exists(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomPriceFeed": {
        "src": "contracts\\FantomMarketplace.sol:65",
        "inherit": [],
        "libraries": [],
        "methods": [
          "wFTM()",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactory": {
        "src": "contracts\\FantomNFTFactory.sol:8",
        "version": {
          "withMetadata": "e213646b1abd3df7e7d728be53caa090c9a63c69de693128cf293b4ce49fbd20",
          "withoutMetadata": "e213646b1abd3df7e7d728be53caa090c9a63c69de693128cf293b4ce49fbd20",
          "linkedWithoutMetadata": "e213646b1abd3df7e7d728be53caa090c9a63c69de693128cf293b4ce49fbd20"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactory",
            "src": "contracts\\FantomNFTFactory.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactory",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:14"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:17"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:20"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactory.sol:23"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactory.sol:26"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTFactory.sol:29"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomNFTFactory.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactoryPrivate": {
        "src": "contracts\\FantomNFTFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "0487dd72b4e58be01c1984618c03964b3fc492482cd0f62a547d06f73a35fc03",
          "withoutMetadata": "0487dd72b4e58be01c1984618c03964b3fc492482cd0f62a547d06f73a35fc03",
          "linkedWithoutMetadata": "0487dd72b4e58be01c1984618c03964b3fc492482cd0f62a547d06f73a35fc03"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactoryPrivate",
            "src": "contracts\\FantomNFTFactoryPrivate.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:29"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradable": {
        "src": "contracts\\FantomNFTTradable.sol:12",
        "version": {
          "withMetadata": "ebfb5cde50fd0230e1a40f125d277ad1fe7691d898ff9f8097916e9378446acb",
          "withoutMetadata": "ebfb5cde50fd0230e1a40f125d277ad1fe7691d898ff9f8097916e9378446acb",
          "linkedWithoutMetadata": "ebfb5cde50fd0230e1a40f125d277ad1fe7691d898ff9f8097916e9378446acb"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradable",
            "src": "contracts\\FantomNFTTradable.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts\\FantomNFTTradable.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradable",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:27"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:28"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:29"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradable.sol:30"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradable.sol:33"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTTradable.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradablePrivate": {
        "src": "contracts\\FantomNFTTradablePrivate.sol:12",
        "version": {
          "withMetadata": "8ac05d68d3c513b9b21725d149d1f1bb0045563abbb7908621d92d8939e5182f",
          "withoutMetadata": "8ac05d68d3c513b9b21725d149d1f1bb0045563abbb7908621d92d8939e5182f",
          "linkedWithoutMetadata": "8ac05d68d3c513b9b21725d149d1f1bb0045563abbb7908621d92d8939e5182f"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradablePrivate",
            "src": "contracts\\FantomNFTTradablePrivate.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts\\FantomNFTTradablePrivate.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:27"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:28"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:29"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradablePrivate.sol:30"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradablePrivate.sol:33"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTTradablePrivate.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomPriceFeed": {
        "src": "contracts\\FantomPriceFeed.sol:21",
        "version": {
          "withMetadata": "2179f4724517738e1fb353bf1cb098d7a0480bddecf6b18e59184405ea804515",
          "withoutMetadata": "2179f4724517738e1fb353bf1cb098d7a0480bddecf6b18e59184405ea804515",
          "linkedWithoutMetadata": "2179f4724517738e1fb353bf1cb098d7a0480bddecf6b18e59184405ea804515"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerOracle(address,address)",
          "updateOracle(address,address)",
          "getPrice(address)",
          "updateAddressRegistry(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomPriceFeed",
            "src": "contracts\\FantomPriceFeed.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomPriceFeed",
              "label": "oracles",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts\\FantomPriceFeed.sol:23"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "addressRegistry",
              "type": "t_address",
              "src": "contracts\\FantomPriceFeed.sol:26"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "wFTM",
              "type": "t_address",
              "src": "contracts\\FantomPriceFeed.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IOracle": {
        "src": "contracts\\FantomPriceFeed.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestAnswer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomTokenRegistry": {
        "src": "contracts\\FantomTokenRegistry.sol:7",
        "version": {
          "withMetadata": "f557aeb9df5f2a6d4d41c6ed338fe625912760f47b04da7f88e543b786055f16",
          "withoutMetadata": "f557aeb9df5f2a6d4d41c6ed338fe625912760f47b04da7f88e543b786055f16",
          "linkedWithoutMetadata": "f557aeb9df5f2a6d4d41c6ed338fe625912760f47b04da7f88e543b786055f16"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "add(address)",
          "remove(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomTokenRegistry",
              "label": "enabled",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomTokenRegistry.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155": {
        "src": "contracts\\library\\ERC1155.sol:11",
        "version": {
          "withMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "withoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "linkedWithoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48"
        },
        "inherit": [
          "IERC165"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155",
              "label": "balances",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts\\library\\ERC1155.sol:25"
            },
            {
              "contract": "ERC1155",
              "label": "operators",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts\\library\\ERC1155.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155Metadata": {
        "src": "contracts\\library\\ERC1155Metadata.sol:9",
        "version": {
          "withMetadata": "51a5cd7d489c53959de1b4b946e542c6c132199cdb9fc8ee5b161d795330bc09",
          "withoutMetadata": "51a5cd7d489c53959de1b4b946e542c6c132199cdb9fc8ee5b161d795330bc09",
          "linkedWithoutMetadata": "51a5cd7d489c53959de1b4b946e542c6c132199cdb9fc8ee5b161d795330bc09"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155Metadata",
              "label": "baseMetadataURI",
              "type": "t_string_storage",
              "src": "contracts\\library\\ERC1155Metadata.sol:12"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155MintBurn": {
        "src": "contracts\\library\\ERC1155MintBurn.sol:9",
        "version": {
          "withMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "withoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "linkedWithoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48"
        },
        "inherit": [
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155TokenReceiver": {
        "src": "contracts\\library\\IERC1155TokenReceiver.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BiddingContractMock": {
        "src": "contracts\\mock\\BiddingContractMock.sol:7",
        "version": {
          "withMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a",
          "withoutMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a",
          "linkedWithoutMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "bid(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BiddingContractMock",
            "src": "contracts\\mock\\BiddingContractMock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BiddingContractMock",
              "label": "auctionContract",
              "type": "t_contract(FantomAuction)8480",
              "src": "contracts\\mock\\BiddingContractMock.sol:8"
            }
          ],
          "types": {
            "t_contract(FantomAuction)8480": {
              "label": "contract FantomAuction"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuctionMock": {
        "src": "contracts\\mock\\FantomAuctionMock.sol:7",
        "version": {
          "withMetadata": "fdd785b62bd3dbeff80b266d8be027fce6fce02f5aba2d3eb253346d53c7b0e1",
          "withoutMetadata": "fdd785b62bd3dbeff80b266d8be027fce6fce02f5aba2d3eb253346d53c7b0e1",
          "linkedWithoutMetadata": "fdd785b62bd3dbeff80b266d8be027fce6fce02f5aba2d3eb253346d53c7b0e1"
        },
        "inherit": [
          "FantomAuction",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "setNowOverride(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuctionMock",
              "label": "nowOverride",
              "type": "t_uint256",
              "src": "contracts\\mock\\FantomAuctionMock.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts\\mock\\MockERC20.sol:7",
        "version": {
          "withMetadata": "d825fed50e7322ed52c283c318628220344d5aca187c9dc3813d7f5889faf0a8",
          "withoutMetadata": "d825fed50e7322ed52c283c318628220344d5aca187c9dc3813d7f5889faf0a8",
          "linkedWithoutMetadata": "d825fed50e7322ed52c283c318628220344d5aca187c9dc3813d7f5889faf0a8"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts\\mock\\MockERC20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:340",
        "version": {
          "withMetadata": "23df31985695cc4bc8d5f5dcb1401f4c9fc004973e533a48f50e2a20bb9a0308",
          "withoutMetadata": "23df31985695cc4bc8d5f5dcb1401f4c9fc004973e533a48f50e2a20bb9a0308",
          "linkedWithoutMetadata": "23df31985695cc4bc8d5f5dcb1401f4c9fc004973e533a48f50e2a20bb9a0308"
        },
        "inherit": [
          "UpgradeabilityProxy",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AdminUpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:350"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:428"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:46",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:264",
        "version": {
          "withMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298",
          "withoutMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298",
          "linkedWithoutMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298"
        },
        "inherit": [
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:273"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:277"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyAdmin": {
        "src": "contracts\\proxy\\ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "1656613df43ea9c96983bb3f81976ece2e279af8f162749eb5e29c655a156ea8",
          "withoutMetadata": "1656613df43ea9c96983bb3f81976ece2e279af8f162749eb5e29c655a156ea8",
          "linkedWithoutMetadata": "1656613df43ea9c96983bb3f81976ece2e279af8f162749eb5e29c655a156ea8"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\math\\SafeMath.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:42",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20I": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "allowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165",
            "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC165",
              "label": "_supportedInterfaces",
              "type": "t_mapping(t_bytes4,t_bool)",
              "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "contracts\\library\\IERC165.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155": {
        "src": "@openzeppelin\\contracts\\token\\ERC1155\\IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "allowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\SafeERC20.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:21",
        "version": {
          "withMetadata": "8dd4924f7080b28673c12e2814297ba24304de217db52581284f10f3e0fdae07",
          "withoutMetadata": "8dd4924f7080b28673c12e2814297ba24304de217db52581284f10f3e0fdae07",
          "linkedWithoutMetadata": "8dd4924f7080b28673c12e2814297ba24304de217db52581284f10f3e0fdae07"
        },
        "inherit": [
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address",
          "EnumerableSet",
          "EnumerableMap",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "baseURI()",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:93"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_holderTokens",
              "type": "t_mapping(t_address,t_struct(UintSet)4754_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenOwners",
              "type": "t_struct(UintToAddressMap)4131_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:42"
            },
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:45"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:48"
            },
            {
              "contract": "ERC721",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:51"
            },
            {
              "contract": "ERC721",
              "label": "_baseURI",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(UintSet)4754_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UintSet)4754_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4368_storage"
                }
              ]
            },
            "t_struct(Set)4368_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(UintToAddressMap)4131_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)3813_storage"
                }
              ]
            },
            "t_struct(Map)3813_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)3805_storage)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_struct(MapEntry)3805_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]"
            },
            "t_struct(MapEntry)3805_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Enumerable.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:118",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableMap": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableMap.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableSet.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:8",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomAddressRegistry": {
        "src": "contracts\\FantomAddressRegistry.sol:8",
        "version": {
          "withMetadata": "76d1b9dc0da2d978cc59139b9224ff1063a564d2e103e5b8c53ddf92f35c6017",
          "withoutMetadata": "76d1b9dc0da2d978cc59139b9224ff1063a564d2e103e5b8c53ddf92f35c6017",
          "linkedWithoutMetadata": "76d1b9dc0da2d978cc59139b9224ff1063a564d2e103e5b8c53ddf92f35c6017"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "updateArtion(address)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateNFTFactory(address)",
          "updateNFTFactoryPrivate(address)",
          "updateArtFactory(address)",
          "updateArtFactoryPrivate(address)",
          "updateTokenRegistry(address)",
          "updatePriceFeed(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAddressRegistry",
              "label": "artion",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:12"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:15"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:18"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:21"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "factory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:24"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:27"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "artFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:30"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateArtFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:33"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "tokenRegistry",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:36"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "priceFeed",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactory": {
        "src": "contracts\\FantomArtFactory.sol:8",
        "version": {
          "withMetadata": "d4a1e964c791a23f412a86709671395f44dddf562aa57580730cf93eff3fd50d",
          "withoutMetadata": "d4a1e964c791a23f412a86709671395f44dddf562aa57580730cf93eff3fd50d",
          "linkedWithoutMetadata": "d4a1e964c791a23f412a86709671395f44dddf562aa57580730cf93eff3fd50d"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactory",
            "src": "contracts\\FantomArtFactory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactory.sol:14"
            },
            {
              "contract": "FantomArtFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactory.sol:17"
            },
            {
              "contract": "FantomArtFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactory.sol:20"
            },
            {
              "contract": "FantomArtFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactory.sol:23"
            },
            {
              "contract": "FantomArtFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtFactory.sol:26"
            },
            {
              "contract": "FantomArtFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomArtFactory.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactoryPrivate": {
        "src": "contracts\\FantomArtFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "e0fdcfb3b16f76fdbd409fb98de3b38f5c3677f2d8b853cdb1097f3798031304",
          "withoutMetadata": "e0fdcfb3b16f76fdbd409fb98de3b38f5c3677f2d8b853cdb1097f3798031304",
          "linkedWithoutMetadata": "e0fdcfb3b16f76fdbd409fb98de3b38f5c3677f2d8b853cdb1097f3798031304"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactoryPrivate",
            "src": "contracts\\FantomArtFactoryPrivate.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomArtFactoryPrivate.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradable": {
        "src": "contracts\\FantomArtTradable.sol:22",
        "version": {
          "withMetadata": "c0adcad2251cfbd3886a61e37e058f7be8a3b59616baad692cd6d6e457da1bf7",
          "withoutMetadata": "c0adcad2251cfbd3886a61e37e058f7be8a3b59616baad692cd6d6e457da1bf7",
          "linkedWithoutMetadata": "c0adcad2251cfbd3886a61e37e058f7be8a3b59616baad692cd6d6e457da1bf7"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradable",
            "src": "contracts\\FantomArtTradable.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts\\FantomArtTradable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradable",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradable.sol:28"
            },
            {
              "contract": "FantomArtTradable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts\\FantomArtTradable.sol:31"
            },
            {
              "contract": "FantomArtTradable",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtTradable.sol:33"
            },
            {
              "contract": "FantomArtTradable",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\FantomArtTradable.sol:34"
            },
            {
              "contract": "FantomArtTradable",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradable.sol:37"
            },
            {
              "contract": "FantomArtTradable",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradable.sol:39"
            },
            {
              "contract": "FantomArtTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradable.sol:41"
            },
            {
              "contract": "FantomArtTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtTradable.sol:43"
            },
            {
              "contract": "FantomArtTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradable.sol:45"
            },
            {
              "contract": "FantomArtTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradable.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "OwnableDelegateProxy": {
        "src": "contracts\\FantomArtTradablePrivate.sol:10",
        "version": {
          "withMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "withoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "linkedWithoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyRegistry": {
        "src": "contracts\\FantomArtTradablePrivate.sol:12",
        "version": {
          "withMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9",
          "withoutMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9",
          "linkedWithoutMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ProxyRegistry",
              "label": "proxies",
              "type": "t_mapping(t_address,t_contract(OwnableDelegateProxy)5998)",
              "src": "contracts\\FantomArtTradablePrivate.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_contract(OwnableDelegateProxy)5998)": {
              "label": "mapping(address => contract OwnableDelegateProxy)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(OwnableDelegateProxy)5998": {
              "label": "contract OwnableDelegateProxy"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradablePrivate": {
        "src": "contracts\\FantomArtTradablePrivate.sol:22",
        "version": {
          "withMetadata": "bf7b7baf73c8347bd6c9b943bd6327823ae43377e0e6c356a7e92d443525e201",
          "withoutMetadata": "bf7b7baf73c8347bd6c9b943bd6327823ae43377e0e6c356a7e92d443525e201",
          "linkedWithoutMetadata": "bf7b7baf73c8347bd6c9b943bd6327823ae43377e0e6c356a7e92d443525e201"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradablePrivate",
            "src": "contracts\\FantomArtTradablePrivate.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts\\FantomArtTradablePrivate.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradablePrivate.sol:28"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts\\FantomArtTradablePrivate.sol:31"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtTradablePrivate.sol:33"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\FantomArtTradablePrivate.sol:34"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradablePrivate.sol:37"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradablePrivate.sol:39"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradablePrivate.sol:41"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtTradablePrivate.sol:43"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradablePrivate.sol:45"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradablePrivate.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Artion": {
        "src": "contracts\\FantomArtion.sol:9",
        "version": {
          "withMetadata": "db5e7f93808806b87f44d6d9a0fcfc2c0e9c9f151cc1759d18a7854746c59ef8",
          "withoutMetadata": "db5e7f93808806b87f44d6d9a0fcfc2c0e9c9f151cc1759d18a7854746c59ef8",
          "linkedWithoutMetadata": "db5e7f93808806b87f44d6d9a0fcfc2c0e9c9f151cc1759d18a7854746c59ef8"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable,uint256)",
          "mint(address,string)",
          "burn(uint256)",
          "exists(uint256)",
          "isApproved(uint256,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Artion",
            "src": "contracts\\FantomArtion.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Artion",
              "label": "tokenIdPointer",
              "type": "t_uint256",
              "src": "contracts\\FantomArtion.sol:26"
            },
            {
              "contract": "Artion",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtion.sol:29"
            },
            {
              "contract": "Artion",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtion.sol:32"
            },
            {
              "contract": "Artion",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtion.sol:35"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuction": {
        "src": "contracts\\FantomAuction.sol:55",
        "version": {
          "withMetadata": "19513f8a3837450037736bded6fd45eeccb28988ed437815908e9ca056eadc1c",
          "withoutMetadata": "19513f8a3837450037736bded6fd45eeccb28988ed437815908e9ca056eadc1c",
          "linkedWithoutMetadata": "19513f8a3837450037736bded6fd45eeccb28988ed437815908e9ca056eadc1c"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable)",
          "createAuction(address,uint256,address,uint256,uint256,bool,uint256)",
          "placeBid(address,uint256)",
          "placeBid(address,uint256,uint256)",
          "withdrawBid(address,uint256)",
          "resultAuction(address,uint256)",
          "cancelAuction(address,uint256)",
          "toggleIsPaused()",
          "updateMinBidIncrement(uint256)",
          "updateBidWithdrawalLockTime(uint256)",
          "updateAuctionReservePrice(address,uint256,uint256)",
          "updateAuctionStartTime(address,uint256,uint256)",
          "updateAuctionEndTime(address,uint256,uint256)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "getAuction(address,uint256)",
          "getHighestBidder(address,uint256)",
          "reclaimERC20(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "minBidIncrement",
            "src": "contracts\\FantomAuction.sol:156"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bidWithdrawalLockTime",
            "src": "contracts\\FantomAuction.sol:159"
          },
          {
            "kind": "state-variable-assignment",
            "name": "platformFee",
            "src": "contracts\\FantomAuction.sol:162"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuction",
              "label": "auctions",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6807_storage))",
              "src": "contracts\\FantomAuction.sol:150"
            },
            {
              "contract": "FantomAuction",
              "label": "highestBids",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6814_storage))",
              "src": "contracts\\FantomAuction.sol:153"
            },
            {
              "contract": "FantomAuction",
              "label": "minBidIncrement",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:156"
            },
            {
              "contract": "FantomAuction",
              "label": "bidWithdrawalLockTime",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:159"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:162"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFeeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomAuction.sol:165"
            },
            {
              "contract": "FantomAuction",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)6614",
              "src": "contracts\\FantomAuction.sol:168"
            },
            {
              "contract": "FantomAuction",
              "label": "isPaused",
              "type": "t_bool",
              "src": "contracts\\FantomAuction.sol:171"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6807_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.Auction))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(Auction)6807_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.Auction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Auction)6807_storage": {
              "label": "struct FantomAuction.Auction",
              "members": [
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "minBid",
                  "type": "t_uint256"
                },
                {
                  "label": "reservePrice",
                  "type": "t_uint256"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256"
                },
                {
                  "label": "resulted",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6814_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.HighestBid))"
            },
            "t_mapping(t_uint256,t_struct(HighestBid)6814_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.HighestBid)"
            },
            "t_struct(HighestBid)6814_storage": {
              "label": "struct FantomAuction.HighestBid",
              "members": [
                {
                  "label": "bidder",
                  "type": "t_address_payable"
                },
                {
                  "label": "bid",
                  "type": "t_uint256"
                },
                {
                  "label": "lastBidTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)6614": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAddressRegistry": {
        "src": "contracts\\FantomPriceFeed.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenRegistry()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomBundleMarketplace": {
        "src": "contracts\\FantomMarketplace.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,address,address)",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomTokenRegistry": {
        "src": "contracts\\FantomPriceFeed.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enabled(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomBundleMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:39",
        "version": {
          "withMetadata": "799fbd51d29c85719d4442f9b1abe166ef22751846c662130b29731ef95365e3",
          "withoutMetadata": "799fbd51d29c85719d4442f9b1abe166ef22751846c662130b29731ef95365e3",
          "linkedWithoutMetadata": "799fbd51d29c85719d4442f9b1abe166ef22751846c662130b29731ef95365e3"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20",
          "EnumerableSet"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "getListing(address,string)",
          "listItem(string,address[],uint256[],uint256[],address,uint256,uint256)",
          "cancelListing(string)",
          "updateListing(string,address,uint256)",
          "buyItem(string)",
          "buyItem(string,address)",
          "createOffer(string,address,uint256,uint256)",
          "cancelOffer(string)",
          "acceptOffer(string,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomBundleMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8711_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:106"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "owners",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts\\FantomBundleMarketplace.sol:109"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIdsPerItem",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4548_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:111"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "nftIndexes",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))",
              "src": "contracts\\FantomBundleMarketplace.sol:113"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIds",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "src": "contracts\\FantomBundleMarketplace.sol:115"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "offers",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8718_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:118"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomBundleMarketplace.sol:121"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomBundleMarketplace.sol:124"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)8574",
              "src": "contracts\\FantomBundleMarketplace.sol:127"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8711_storage))": {
              "label": "mapping(address => mapping(bytes32 => struct FantomBundleMarketplace.Listing))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_struct(Listing)8711_storage)": {
              "label": "mapping(bytes32 => struct FantomBundleMarketplace.Listing)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Listing)8711_storage": {
              "label": "struct FantomBundleMarketplace.Listing",
              "members": [
                {
                  "label": "nfts",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "tokenIds",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "quantities",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4548_storage))": {
              "label": "mapping(address => mapping(uint256 => struct EnumerableSet.Bytes32Set))"
            },
            "t_mapping(t_uint256,t_struct(Bytes32Set)4548_storage)": {
              "label": "mapping(uint256 => struct EnumerableSet.Bytes32Set)"
            },
            "t_struct(Bytes32Set)4548_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4368_storage"
                }
              ]
            },
            "t_struct(Set)4368_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
              "label": "mapping(bytes32 => mapping(address => mapping(uint256 => uint256)))"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8718_storage))": {
              "label": "mapping(bytes32 => mapping(address => struct FantomBundleMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)8718_storage)": {
              "label": "mapping(address => struct FantomBundleMarketplace.Offer)"
            },
            "t_struct(Offer)8718_storage": {
              "label": "struct FantomBundleMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)2054"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)2054": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)8574": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomMarketplace": {
        "src": "contracts\\FantomMarketplace.sol:71",
        "version": {
          "withMetadata": "f59cf2f57630405672c7081ae743b97f6b2aea7058d8bcd94b62f66298b0e2f0",
          "withoutMetadata": "f59cf2f57630405672c7081ae743b97f6b2aea7058d8bcd94b62f66298b0e2f0",
          "linkedWithoutMetadata": "f59cf2f57630405672c7081ae743b97f6b2aea7058d8bcd94b62f66298b0e2f0"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable,uint16)",
          "listItem(address,uint256,uint256,address,uint256,uint256)",
          "cancelListing(address,uint256)",
          "updateListing(address,uint256,address,uint256)",
          "buyItem(address,uint256,address,address)",
          "createOffer(address,uint256,address,uint256,uint256,uint256)",
          "cancelOffer(address,uint256)",
          "acceptOffer(address,uint256,address)",
          "registerRoyalty(address,uint256,uint16)",
          "registerCollectionRoyalty(address,address,uint16,address)",
          "getPrice(address)",
          "updatePlatformFee(uint16)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomMarketplace",
              "label": "minters",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
              "src": "contracts\\FantomMarketplace.sol:151"
            },
            {
              "contract": "FantomMarketplace",
              "label": "royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint16))",
              "src": "contracts\\FantomMarketplace.sol:154"
            },
            {
              "contract": "FantomMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10915_storage)))",
              "src": "contracts\\FantomMarketplace.sol:157"
            },
            {
              "contract": "FantomMarketplace",
              "label": "offers",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10924_storage)))",
              "src": "contracts\\FantomMarketplace.sol:161"
            },
            {
              "contract": "FantomMarketplace",
              "label": "platformFee",
              "type": "t_uint16",
              "src": "contracts\\FantomMarketplace.sol:165"
            },
            {
              "contract": "FantomMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomMarketplace.sol:168"
            },
            {
              "contract": "FantomMarketplace",
              "label": "collectionRoyalties",
              "type": "t_mapping(t_address,t_struct(CollectionRoyalty)10931_storage)",
              "src": "contracts\\FantomMarketplace.sol:171"
            },
            {
              "contract": "FantomMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)10745",
              "src": "contracts\\FantomMarketplace.sol:174"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
              "label": "mapping(address => mapping(uint256 => address))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint16))": {
              "label": "mapping(address => mapping(uint256 => uint16))"
            },
            "t_mapping(t_uint256,t_uint16)": {
              "label": "mapping(uint256 => uint16)"
            },
            "t_uint16": {
              "label": "uint16"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10915_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Listing)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10915_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Listing))"
            },
            "t_mapping(t_address,t_struct(Listing)10915_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Listing)"
            },
            "t_struct(Listing)10915_storage": {
              "label": "struct FantomMarketplace.Listing",
              "members": [
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10924_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Offer)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10924_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)10924_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Offer)"
            },
            "t_struct(Offer)10924_storage": {
              "label": "struct FantomMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)2054"
                },
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)2054": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_struct(CollectionRoyalty)10931_storage)": {
              "label": "mapping(address => struct FantomMarketplace.CollectionRoyalty)"
            },
            "t_struct(CollectionRoyalty)10931_storage": {
              "label": "struct FantomMarketplace.CollectionRoyalty",
              "members": [
                {
                  "label": "royalty",
                  "type": "t_uint16"
                },
                {
                  "label": "creator",
                  "type": "t_address"
                },
                {
                  "label": "feeRecipient",
                  "type": "t_address"
                }
              ]
            },
            "t_contract(IFantomAddressRegistry)10745": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAuction": {
        "src": "contracts\\FantomMarketplace.sol:35",
        "inherit": [],
        "libraries": [],
        "methods": [
          "auctions(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomNFTFactory": {
        "src": "contracts\\FantomMarketplace.sol:57",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exists(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomPriceFeed": {
        "src": "contracts\\FantomMarketplace.sol:65",
        "inherit": [],
        "libraries": [],
        "methods": [
          "wFTM()",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactory": {
        "src": "contracts\\FantomNFTFactory.sol:8",
        "version": {
          "withMetadata": "e213646b1abd3df7e7d728be53caa090c9a63c69de693128cf293b4ce49fbd20",
          "withoutMetadata": "e213646b1abd3df7e7d728be53caa090c9a63c69de693128cf293b4ce49fbd20",
          "linkedWithoutMetadata": "e213646b1abd3df7e7d728be53caa090c9a63c69de693128cf293b4ce49fbd20"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactory",
            "src": "contracts\\FantomNFTFactory.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactory",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:14"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:17"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:20"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactory.sol:23"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactory.sol:26"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTFactory.sol:29"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomNFTFactory.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactoryPrivate": {
        "src": "contracts\\FantomNFTFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "0487dd72b4e58be01c1984618c03964b3fc492482cd0f62a547d06f73a35fc03",
          "withoutMetadata": "0487dd72b4e58be01c1984618c03964b3fc492482cd0f62a547d06f73a35fc03",
          "linkedWithoutMetadata": "0487dd72b4e58be01c1984618c03964b3fc492482cd0f62a547d06f73a35fc03"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactoryPrivate",
            "src": "contracts\\FantomNFTFactoryPrivate.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:29"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradable": {
        "src": "contracts\\FantomNFTTradable.sol:12",
        "version": {
          "withMetadata": "ebfb5cde50fd0230e1a40f125d277ad1fe7691d898ff9f8097916e9378446acb",
          "withoutMetadata": "ebfb5cde50fd0230e1a40f125d277ad1fe7691d898ff9f8097916e9378446acb",
          "linkedWithoutMetadata": "ebfb5cde50fd0230e1a40f125d277ad1fe7691d898ff9f8097916e9378446acb"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradable",
            "src": "contracts\\FantomNFTTradable.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts\\FantomNFTTradable.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradable",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:27"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:28"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:29"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradable.sol:30"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradable.sol:33"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTTradable.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradablePrivate": {
        "src": "contracts\\FantomNFTTradablePrivate.sol:12",
        "version": {
          "withMetadata": "8ac05d68d3c513b9b21725d149d1f1bb0045563abbb7908621d92d8939e5182f",
          "withoutMetadata": "8ac05d68d3c513b9b21725d149d1f1bb0045563abbb7908621d92d8939e5182f",
          "linkedWithoutMetadata": "8ac05d68d3c513b9b21725d149d1f1bb0045563abbb7908621d92d8939e5182f"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradablePrivate",
            "src": "contracts\\FantomNFTTradablePrivate.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts\\FantomNFTTradablePrivate.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:27"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:28"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:29"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradablePrivate.sol:30"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradablePrivate.sol:33"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTTradablePrivate.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomPriceFeed": {
        "src": "contracts\\FantomPriceFeed.sol:21",
        "version": {
          "withMetadata": "2179f4724517738e1fb353bf1cb098d7a0480bddecf6b18e59184405ea804515",
          "withoutMetadata": "2179f4724517738e1fb353bf1cb098d7a0480bddecf6b18e59184405ea804515",
          "linkedWithoutMetadata": "2179f4724517738e1fb353bf1cb098d7a0480bddecf6b18e59184405ea804515"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerOracle(address,address)",
          "updateOracle(address,address)",
          "getPrice(address)",
          "updateAddressRegistry(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomPriceFeed",
            "src": "contracts\\FantomPriceFeed.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomPriceFeed",
              "label": "oracles",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts\\FantomPriceFeed.sol:23"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "addressRegistry",
              "type": "t_address",
              "src": "contracts\\FantomPriceFeed.sol:26"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "wFTM",
              "type": "t_address",
              "src": "contracts\\FantomPriceFeed.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IOracle": {
        "src": "contracts\\FantomPriceFeed.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestAnswer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomTokenRegistry": {
        "src": "contracts\\FantomTokenRegistry.sol:7",
        "version": {
          "withMetadata": "f557aeb9df5f2a6d4d41c6ed338fe625912760f47b04da7f88e543b786055f16",
          "withoutMetadata": "f557aeb9df5f2a6d4d41c6ed338fe625912760f47b04da7f88e543b786055f16",
          "linkedWithoutMetadata": "f557aeb9df5f2a6d4d41c6ed338fe625912760f47b04da7f88e543b786055f16"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "add(address)",
          "remove(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomTokenRegistry",
              "label": "enabled",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomTokenRegistry.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155": {
        "src": "contracts\\library\\ERC1155.sol:11",
        "version": {
          "withMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "withoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "linkedWithoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48"
        },
        "inherit": [
          "IERC165"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155",
              "label": "balances",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts\\library\\ERC1155.sol:25"
            },
            {
              "contract": "ERC1155",
              "label": "operators",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts\\library\\ERC1155.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155Metadata": {
        "src": "contracts\\library\\ERC1155Metadata.sol:9",
        "version": {
          "withMetadata": "51a5cd7d489c53959de1b4b946e542c6c132199cdb9fc8ee5b161d795330bc09",
          "withoutMetadata": "51a5cd7d489c53959de1b4b946e542c6c132199cdb9fc8ee5b161d795330bc09",
          "linkedWithoutMetadata": "51a5cd7d489c53959de1b4b946e542c6c132199cdb9fc8ee5b161d795330bc09"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155Metadata",
              "label": "baseMetadataURI",
              "type": "t_string_storage",
              "src": "contracts\\library\\ERC1155Metadata.sol:12"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155MintBurn": {
        "src": "contracts\\library\\ERC1155MintBurn.sol:9",
        "version": {
          "withMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "withoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "linkedWithoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48"
        },
        "inherit": [
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155TokenReceiver": {
        "src": "contracts\\library\\IERC1155TokenReceiver.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BiddingContractMock": {
        "src": "contracts\\mock\\BiddingContractMock.sol:7",
        "version": {
          "withMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a",
          "withoutMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a",
          "linkedWithoutMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "bid(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BiddingContractMock",
            "src": "contracts\\mock\\BiddingContractMock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BiddingContractMock",
              "label": "auctionContract",
              "type": "t_contract(FantomAuction)8546",
              "src": "contracts\\mock\\BiddingContractMock.sol:8"
            }
          ],
          "types": {
            "t_contract(FantomAuction)8546": {
              "label": "contract FantomAuction"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuctionMock": {
        "src": "contracts\\mock\\FantomAuctionMock.sol:7",
        "version": {
          "withMetadata": "fdd785b62bd3dbeff80b266d8be027fce6fce02f5aba2d3eb253346d53c7b0e1",
          "withoutMetadata": "fdd785b62bd3dbeff80b266d8be027fce6fce02f5aba2d3eb253346d53c7b0e1",
          "linkedWithoutMetadata": "fdd785b62bd3dbeff80b266d8be027fce6fce02f5aba2d3eb253346d53c7b0e1"
        },
        "inherit": [
          "FantomAuction",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "setNowOverride(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuctionMock",
              "label": "nowOverride",
              "type": "t_uint256",
              "src": "contracts\\mock\\FantomAuctionMock.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts\\mock\\MockERC20.sol:7",
        "version": {
          "withMetadata": "d825fed50e7322ed52c283c318628220344d5aca187c9dc3813d7f5889faf0a8",
          "withoutMetadata": "d825fed50e7322ed52c283c318628220344d5aca187c9dc3813d7f5889faf0a8",
          "linkedWithoutMetadata": "d825fed50e7322ed52c283c318628220344d5aca187c9dc3813d7f5889faf0a8"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts\\mock\\MockERC20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:340",
        "version": {
          "withMetadata": "23df31985695cc4bc8d5f5dcb1401f4c9fc004973e533a48f50e2a20bb9a0308",
          "withoutMetadata": "23df31985695cc4bc8d5f5dcb1401f4c9fc004973e533a48f50e2a20bb9a0308",
          "linkedWithoutMetadata": "23df31985695cc4bc8d5f5dcb1401f4c9fc004973e533a48f50e2a20bb9a0308"
        },
        "inherit": [
          "UpgradeabilityProxy",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AdminUpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:350"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:428"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:46",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:264",
        "version": {
          "withMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298",
          "withoutMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298",
          "linkedWithoutMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298"
        },
        "inherit": [
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:273"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:277"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyAdmin": {
        "src": "contracts\\proxy\\ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "1656613df43ea9c96983bb3f81976ece2e279af8f162749eb5e29c655a156ea8",
          "withoutMetadata": "1656613df43ea9c96983bb3f81976ece2e279af8f162749eb5e29c655a156ea8",
          "linkedWithoutMetadata": "1656613df43ea9c96983bb3f81976ece2e279af8f162749eb5e29c655a156ea8"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\math\\SafeMath.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:42",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20I": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "allowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165",
            "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC165",
              "label": "_supportedInterfaces",
              "type": "t_mapping(t_bytes4,t_bool)",
              "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "contracts\\library\\IERC165.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155": {
        "src": "@openzeppelin\\contracts\\token\\ERC1155\\IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "allowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\SafeERC20.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:21",
        "version": {
          "withMetadata": "8dd4924f7080b28673c12e2814297ba24304de217db52581284f10f3e0fdae07",
          "withoutMetadata": "8dd4924f7080b28673c12e2814297ba24304de217db52581284f10f3e0fdae07",
          "linkedWithoutMetadata": "8dd4924f7080b28673c12e2814297ba24304de217db52581284f10f3e0fdae07"
        },
        "inherit": [
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address",
          "EnumerableSet",
          "EnumerableMap",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "baseURI()",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:93"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_holderTokens",
              "type": "t_mapping(t_address,t_struct(UintSet)4746_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenOwners",
              "type": "t_struct(UintToAddressMap)4123_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:42"
            },
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:45"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:48"
            },
            {
              "contract": "ERC721",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:51"
            },
            {
              "contract": "ERC721",
              "label": "_baseURI",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(UintSet)4746_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UintSet)4746_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4360_storage"
                }
              ]
            },
            "t_struct(Set)4360_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(UintToAddressMap)4123_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)3805_storage"
                }
              ]
            },
            "t_struct(Map)3805_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)3797_storage)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_struct(MapEntry)3797_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]"
            },
            "t_struct(MapEntry)3797_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Enumerable.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:118",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableMap": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableMap.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableSet.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:8",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomAddressRegistry": {
        "src": "contracts\\FantomAddressRegistry.sol:8",
        "version": {
          "withMetadata": "76d1b9dc0da2d978cc59139b9224ff1063a564d2e103e5b8c53ddf92f35c6017",
          "withoutMetadata": "76d1b9dc0da2d978cc59139b9224ff1063a564d2e103e5b8c53ddf92f35c6017",
          "linkedWithoutMetadata": "76d1b9dc0da2d978cc59139b9224ff1063a564d2e103e5b8c53ddf92f35c6017"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "updateArtion(address)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateNFTFactory(address)",
          "updateNFTFactoryPrivate(address)",
          "updateArtFactory(address)",
          "updateArtFactoryPrivate(address)",
          "updateTokenRegistry(address)",
          "updatePriceFeed(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAddressRegistry",
              "label": "artion",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:12"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:15"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:18"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:21"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "factory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:24"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:27"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "artFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:30"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateArtFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:33"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "tokenRegistry",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:36"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "priceFeed",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactory": {
        "src": "contracts\\FantomArtFactory.sol:8",
        "version": {
          "withMetadata": "d4a1e964c791a23f412a86709671395f44dddf562aa57580730cf93eff3fd50d",
          "withoutMetadata": "d4a1e964c791a23f412a86709671395f44dddf562aa57580730cf93eff3fd50d",
          "linkedWithoutMetadata": "d4a1e964c791a23f412a86709671395f44dddf562aa57580730cf93eff3fd50d"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactory",
            "src": "contracts\\FantomArtFactory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactory.sol:14"
            },
            {
              "contract": "FantomArtFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactory.sol:17"
            },
            {
              "contract": "FantomArtFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactory.sol:20"
            },
            {
              "contract": "FantomArtFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactory.sol:23"
            },
            {
              "contract": "FantomArtFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtFactory.sol:26"
            },
            {
              "contract": "FantomArtFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomArtFactory.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactoryPrivate": {
        "src": "contracts\\FantomArtFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "e0fdcfb3b16f76fdbd409fb98de3b38f5c3677f2d8b853cdb1097f3798031304",
          "withoutMetadata": "e0fdcfb3b16f76fdbd409fb98de3b38f5c3677f2d8b853cdb1097f3798031304",
          "linkedWithoutMetadata": "e0fdcfb3b16f76fdbd409fb98de3b38f5c3677f2d8b853cdb1097f3798031304"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactoryPrivate",
            "src": "contracts\\FantomArtFactoryPrivate.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomArtFactoryPrivate.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradable": {
        "src": "contracts\\FantomArtTradable.sol:22",
        "version": {
          "withMetadata": "c0adcad2251cfbd3886a61e37e058f7be8a3b59616baad692cd6d6e457da1bf7",
          "withoutMetadata": "c0adcad2251cfbd3886a61e37e058f7be8a3b59616baad692cd6d6e457da1bf7",
          "linkedWithoutMetadata": "c0adcad2251cfbd3886a61e37e058f7be8a3b59616baad692cd6d6e457da1bf7"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradable",
            "src": "contracts\\FantomArtTradable.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts\\FantomArtTradable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradable",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradable.sol:28"
            },
            {
              "contract": "FantomArtTradable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts\\FantomArtTradable.sol:31"
            },
            {
              "contract": "FantomArtTradable",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtTradable.sol:33"
            },
            {
              "contract": "FantomArtTradable",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\FantomArtTradable.sol:34"
            },
            {
              "contract": "FantomArtTradable",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradable.sol:37"
            },
            {
              "contract": "FantomArtTradable",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradable.sol:39"
            },
            {
              "contract": "FantomArtTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradable.sol:41"
            },
            {
              "contract": "FantomArtTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtTradable.sol:43"
            },
            {
              "contract": "FantomArtTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradable.sol:45"
            },
            {
              "contract": "FantomArtTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradable.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "OwnableDelegateProxy": {
        "src": "contracts\\FantomArtTradablePrivate.sol:10",
        "version": {
          "withMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "withoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "linkedWithoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyRegistry": {
        "src": "contracts\\FantomArtTradablePrivate.sol:12",
        "version": {
          "withMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9",
          "withoutMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9",
          "linkedWithoutMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ProxyRegistry",
              "label": "proxies",
              "type": "t_mapping(t_address,t_contract(OwnableDelegateProxy)5990)",
              "src": "contracts\\FantomArtTradablePrivate.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_contract(OwnableDelegateProxy)5990)": {
              "label": "mapping(address => contract OwnableDelegateProxy)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(OwnableDelegateProxy)5990": {
              "label": "contract OwnableDelegateProxy"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradablePrivate": {
        "src": "contracts\\FantomArtTradablePrivate.sol:22",
        "version": {
          "withMetadata": "bf7b7baf73c8347bd6c9b943bd6327823ae43377e0e6c356a7e92d443525e201",
          "withoutMetadata": "bf7b7baf73c8347bd6c9b943bd6327823ae43377e0e6c356a7e92d443525e201",
          "linkedWithoutMetadata": "bf7b7baf73c8347bd6c9b943bd6327823ae43377e0e6c356a7e92d443525e201"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradablePrivate",
            "src": "contracts\\FantomArtTradablePrivate.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts\\FantomArtTradablePrivate.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradablePrivate.sol:28"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts\\FantomArtTradablePrivate.sol:31"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtTradablePrivate.sol:33"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\FantomArtTradablePrivate.sol:34"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradablePrivate.sol:37"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradablePrivate.sol:39"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradablePrivate.sol:41"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtTradablePrivate.sol:43"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradablePrivate.sol:45"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradablePrivate.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Artion": {
        "src": "contracts\\FantomArtion.sol:9",
        "version": {
          "withMetadata": "db5e7f93808806b87f44d6d9a0fcfc2c0e9c9f151cc1759d18a7854746c59ef8",
          "withoutMetadata": "db5e7f93808806b87f44d6d9a0fcfc2c0e9c9f151cc1759d18a7854746c59ef8",
          "linkedWithoutMetadata": "db5e7f93808806b87f44d6d9a0fcfc2c0e9c9f151cc1759d18a7854746c59ef8"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable,uint256)",
          "mint(address,string)",
          "burn(uint256)",
          "exists(uint256)",
          "isApproved(uint256,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Artion",
            "src": "contracts\\FantomArtion.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Artion",
              "label": "tokenIdPointer",
              "type": "t_uint256",
              "src": "contracts\\FantomArtion.sol:26"
            },
            {
              "contract": "Artion",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtion.sol:29"
            },
            {
              "contract": "Artion",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtion.sol:32"
            },
            {
              "contract": "Artion",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtion.sol:35"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuction": {
        "src": "contracts\\FantomAuction.sol:55",
        "version": {
          "withMetadata": "19513f8a3837450037736bded6fd45eeccb28988ed437815908e9ca056eadc1c",
          "withoutMetadata": "19513f8a3837450037736bded6fd45eeccb28988ed437815908e9ca056eadc1c",
          "linkedWithoutMetadata": "19513f8a3837450037736bded6fd45eeccb28988ed437815908e9ca056eadc1c"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable)",
          "createAuction(address,uint256,address,uint256,uint256,bool,uint256)",
          "placeBid(address,uint256)",
          "placeBid(address,uint256,uint256)",
          "withdrawBid(address,uint256)",
          "resultAuction(address,uint256)",
          "cancelAuction(address,uint256)",
          "toggleIsPaused()",
          "updateMinBidIncrement(uint256)",
          "updateBidWithdrawalLockTime(uint256)",
          "updateAuctionReservePrice(address,uint256,uint256)",
          "updateAuctionStartTime(address,uint256,uint256)",
          "updateAuctionEndTime(address,uint256,uint256)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "getAuction(address,uint256)",
          "getHighestBidder(address,uint256)",
          "reclaimERC20(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "minBidIncrement",
            "src": "contracts\\FantomAuction.sol:156"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bidWithdrawalLockTime",
            "src": "contracts\\FantomAuction.sol:159"
          },
          {
            "kind": "state-variable-assignment",
            "name": "platformFee",
            "src": "contracts\\FantomAuction.sol:162"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuction",
              "label": "auctions",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6799_storage))",
              "src": "contracts\\FantomAuction.sol:150"
            },
            {
              "contract": "FantomAuction",
              "label": "highestBids",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6806_storage))",
              "src": "contracts\\FantomAuction.sol:153"
            },
            {
              "contract": "FantomAuction",
              "label": "minBidIncrement",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:156"
            },
            {
              "contract": "FantomAuction",
              "label": "bidWithdrawalLockTime",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:159"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:162"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFeeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomAuction.sol:165"
            },
            {
              "contract": "FantomAuction",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)6606",
              "src": "contracts\\FantomAuction.sol:168"
            },
            {
              "contract": "FantomAuction",
              "label": "isPaused",
              "type": "t_bool",
              "src": "contracts\\FantomAuction.sol:171"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6799_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.Auction))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(Auction)6799_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.Auction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Auction)6799_storage": {
              "label": "struct FantomAuction.Auction",
              "members": [
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "minBid",
                  "type": "t_uint256"
                },
                {
                  "label": "reservePrice",
                  "type": "t_uint256"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256"
                },
                {
                  "label": "resulted",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6806_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.HighestBid))"
            },
            "t_mapping(t_uint256,t_struct(HighestBid)6806_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.HighestBid)"
            },
            "t_struct(HighestBid)6806_storage": {
              "label": "struct FantomAuction.HighestBid",
              "members": [
                {
                  "label": "bidder",
                  "type": "t_address_payable"
                },
                {
                  "label": "bid",
                  "type": "t_uint256"
                },
                {
                  "label": "lastBidTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)6606": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAddressRegistry": {
        "src": "contracts\\FantomPriceFeed.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenRegistry()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomBundleMarketplace": {
        "src": "contracts\\FantomMarketplace.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,address,address)",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomTokenRegistry": {
        "src": "contracts\\FantomPriceFeed.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enabled(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomBundleMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:39",
        "version": {
          "withMetadata": "799fbd51d29c85719d4442f9b1abe166ef22751846c662130b29731ef95365e3",
          "withoutMetadata": "799fbd51d29c85719d4442f9b1abe166ef22751846c662130b29731ef95365e3",
          "linkedWithoutMetadata": "799fbd51d29c85719d4442f9b1abe166ef22751846c662130b29731ef95365e3"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20",
          "EnumerableSet"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "getListing(address,string)",
          "listItem(string,address[],uint256[],uint256[],address,uint256,uint256)",
          "cancelListing(string)",
          "updateListing(string,address,uint256)",
          "buyItem(string)",
          "buyItem(string,address)",
          "createOffer(string,address,uint256,uint256)",
          "cancelOffer(string)",
          "acceptOffer(string,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomBundleMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8703_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:106"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "owners",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts\\FantomBundleMarketplace.sol:109"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIdsPerItem",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4540_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:111"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "nftIndexes",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))",
              "src": "contracts\\FantomBundleMarketplace.sol:113"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIds",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "src": "contracts\\FantomBundleMarketplace.sol:115"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "offers",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8710_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:118"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomBundleMarketplace.sol:121"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomBundleMarketplace.sol:124"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)8566",
              "src": "contracts\\FantomBundleMarketplace.sol:127"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8703_storage))": {
              "label": "mapping(address => mapping(bytes32 => struct FantomBundleMarketplace.Listing))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_struct(Listing)8703_storage)": {
              "label": "mapping(bytes32 => struct FantomBundleMarketplace.Listing)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Listing)8703_storage": {
              "label": "struct FantomBundleMarketplace.Listing",
              "members": [
                {
                  "label": "nfts",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "tokenIds",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "quantities",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4540_storage))": {
              "label": "mapping(address => mapping(uint256 => struct EnumerableSet.Bytes32Set))"
            },
            "t_mapping(t_uint256,t_struct(Bytes32Set)4540_storage)": {
              "label": "mapping(uint256 => struct EnumerableSet.Bytes32Set)"
            },
            "t_struct(Bytes32Set)4540_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4360_storage"
                }
              ]
            },
            "t_struct(Set)4360_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
              "label": "mapping(bytes32 => mapping(address => mapping(uint256 => uint256)))"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8710_storage))": {
              "label": "mapping(bytes32 => mapping(address => struct FantomBundleMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)8710_storage)": {
              "label": "mapping(address => struct FantomBundleMarketplace.Offer)"
            },
            "t_struct(Offer)8710_storage": {
              "label": "struct FantomBundleMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)2046"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)2046": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)8566": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomMarketplace": {
        "src": "contracts\\FantomMarketplace.sol:71",
        "version": {
          "withMetadata": "f59cf2f57630405672c7081ae743b97f6b2aea7058d8bcd94b62f66298b0e2f0",
          "withoutMetadata": "f59cf2f57630405672c7081ae743b97f6b2aea7058d8bcd94b62f66298b0e2f0",
          "linkedWithoutMetadata": "f59cf2f57630405672c7081ae743b97f6b2aea7058d8bcd94b62f66298b0e2f0"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable,uint16)",
          "listItem(address,uint256,uint256,address,uint256,uint256)",
          "cancelListing(address,uint256)",
          "updateListing(address,uint256,address,uint256)",
          "buyItem(address,uint256,address,address)",
          "createOffer(address,uint256,address,uint256,uint256,uint256)",
          "cancelOffer(address,uint256)",
          "acceptOffer(address,uint256,address)",
          "registerRoyalty(address,uint256,uint16)",
          "registerCollectionRoyalty(address,address,uint16,address)",
          "getPrice(address)",
          "updatePlatformFee(uint16)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomMarketplace",
              "label": "minters",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
              "src": "contracts\\FantomMarketplace.sol:151"
            },
            {
              "contract": "FantomMarketplace",
              "label": "royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint16))",
              "src": "contracts\\FantomMarketplace.sol:154"
            },
            {
              "contract": "FantomMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10907_storage)))",
              "src": "contracts\\FantomMarketplace.sol:157"
            },
            {
              "contract": "FantomMarketplace",
              "label": "offers",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10916_storage)))",
              "src": "contracts\\FantomMarketplace.sol:161"
            },
            {
              "contract": "FantomMarketplace",
              "label": "platformFee",
              "type": "t_uint16",
              "src": "contracts\\FantomMarketplace.sol:165"
            },
            {
              "contract": "FantomMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomMarketplace.sol:168"
            },
            {
              "contract": "FantomMarketplace",
              "label": "collectionRoyalties",
              "type": "t_mapping(t_address,t_struct(CollectionRoyalty)10923_storage)",
              "src": "contracts\\FantomMarketplace.sol:171"
            },
            {
              "contract": "FantomMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)10737",
              "src": "contracts\\FantomMarketplace.sol:174"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
              "label": "mapping(address => mapping(uint256 => address))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint16))": {
              "label": "mapping(address => mapping(uint256 => uint16))"
            },
            "t_mapping(t_uint256,t_uint16)": {
              "label": "mapping(uint256 => uint16)"
            },
            "t_uint16": {
              "label": "uint16"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10907_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Listing)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10907_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Listing))"
            },
            "t_mapping(t_address,t_struct(Listing)10907_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Listing)"
            },
            "t_struct(Listing)10907_storage": {
              "label": "struct FantomMarketplace.Listing",
              "members": [
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10916_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Offer)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10916_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)10916_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Offer)"
            },
            "t_struct(Offer)10916_storage": {
              "label": "struct FantomMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)2046"
                },
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)2046": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_struct(CollectionRoyalty)10923_storage)": {
              "label": "mapping(address => struct FantomMarketplace.CollectionRoyalty)"
            },
            "t_struct(CollectionRoyalty)10923_storage": {
              "label": "struct FantomMarketplace.CollectionRoyalty",
              "members": [
                {
                  "label": "royalty",
                  "type": "t_uint16"
                },
                {
                  "label": "creator",
                  "type": "t_address"
                },
                {
                  "label": "feeRecipient",
                  "type": "t_address"
                }
              ]
            },
            "t_contract(IFantomAddressRegistry)10737": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAuction": {
        "src": "contracts\\FantomMarketplace.sol:35",
        "inherit": [],
        "libraries": [],
        "methods": [
          "auctions(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomNFTFactory": {
        "src": "contracts\\FantomMarketplace.sol:57",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exists(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomPriceFeed": {
        "src": "contracts\\FantomMarketplace.sol:65",
        "inherit": [],
        "libraries": [],
        "methods": [
          "wFTM()",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactory": {
        "src": "contracts\\FantomNFTFactory.sol:8",
        "version": {
          "withMetadata": "e213646b1abd3df7e7d728be53caa090c9a63c69de693128cf293b4ce49fbd20",
          "withoutMetadata": "e213646b1abd3df7e7d728be53caa090c9a63c69de693128cf293b4ce49fbd20",
          "linkedWithoutMetadata": "e213646b1abd3df7e7d728be53caa090c9a63c69de693128cf293b4ce49fbd20"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactory",
            "src": "contracts\\FantomNFTFactory.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactory",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:14"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:17"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:20"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactory.sol:23"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactory.sol:26"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTFactory.sol:29"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomNFTFactory.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactoryPrivate": {
        "src": "contracts\\FantomNFTFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "0487dd72b4e58be01c1984618c03964b3fc492482cd0f62a547d06f73a35fc03",
          "withoutMetadata": "0487dd72b4e58be01c1984618c03964b3fc492482cd0f62a547d06f73a35fc03",
          "linkedWithoutMetadata": "0487dd72b4e58be01c1984618c03964b3fc492482cd0f62a547d06f73a35fc03"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactoryPrivate",
            "src": "contracts\\FantomNFTFactoryPrivate.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:29"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradable": {
        "src": "contracts\\FantomNFTTradable.sol:12",
        "version": {
          "withMetadata": "ebfb5cde50fd0230e1a40f125d277ad1fe7691d898ff9f8097916e9378446acb",
          "withoutMetadata": "ebfb5cde50fd0230e1a40f125d277ad1fe7691d898ff9f8097916e9378446acb",
          "linkedWithoutMetadata": "ebfb5cde50fd0230e1a40f125d277ad1fe7691d898ff9f8097916e9378446acb"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradable",
            "src": "contracts\\FantomNFTTradable.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts\\FantomNFTTradable.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradable",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:27"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:28"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:29"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradable.sol:30"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradable.sol:33"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTTradable.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradablePrivate": {
        "src": "contracts\\FantomNFTTradablePrivate.sol:12",
        "version": {
          "withMetadata": "8ac05d68d3c513b9b21725d149d1f1bb0045563abbb7908621d92d8939e5182f",
          "withoutMetadata": "8ac05d68d3c513b9b21725d149d1f1bb0045563abbb7908621d92d8939e5182f",
          "linkedWithoutMetadata": "8ac05d68d3c513b9b21725d149d1f1bb0045563abbb7908621d92d8939e5182f"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradablePrivate",
            "src": "contracts\\FantomNFTTradablePrivate.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts\\FantomNFTTradablePrivate.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:27"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:28"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:29"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradablePrivate.sol:30"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradablePrivate.sol:33"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTTradablePrivate.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomPriceFeed": {
        "src": "contracts\\FantomPriceFeed.sol:21",
        "version": {
          "withMetadata": "2179f4724517738e1fb353bf1cb098d7a0480bddecf6b18e59184405ea804515",
          "withoutMetadata": "2179f4724517738e1fb353bf1cb098d7a0480bddecf6b18e59184405ea804515",
          "linkedWithoutMetadata": "2179f4724517738e1fb353bf1cb098d7a0480bddecf6b18e59184405ea804515"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerOracle(address,address)",
          "updateOracle(address,address)",
          "getPrice(address)",
          "updateAddressRegistry(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomPriceFeed",
            "src": "contracts\\FantomPriceFeed.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomPriceFeed",
              "label": "oracles",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts\\FantomPriceFeed.sol:23"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "addressRegistry",
              "type": "t_address",
              "src": "contracts\\FantomPriceFeed.sol:26"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "wFTM",
              "type": "t_address",
              "src": "contracts\\FantomPriceFeed.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IOracle": {
        "src": "contracts\\FantomPriceFeed.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestAnswer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomTokenRegistry": {
        "src": "contracts\\FantomTokenRegistry.sol:7",
        "version": {
          "withMetadata": "f557aeb9df5f2a6d4d41c6ed338fe625912760f47b04da7f88e543b786055f16",
          "withoutMetadata": "f557aeb9df5f2a6d4d41c6ed338fe625912760f47b04da7f88e543b786055f16",
          "linkedWithoutMetadata": "f557aeb9df5f2a6d4d41c6ed338fe625912760f47b04da7f88e543b786055f16"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "add(address)",
          "remove(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomTokenRegistry",
              "label": "enabled",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomTokenRegistry.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155": {
        "src": "contracts\\library\\ERC1155.sol:11",
        "version": {
          "withMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "withoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "linkedWithoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48"
        },
        "inherit": [
          "IERC165"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155",
              "label": "balances",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts\\library\\ERC1155.sol:25"
            },
            {
              "contract": "ERC1155",
              "label": "operators",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts\\library\\ERC1155.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155Metadata": {
        "src": "contracts\\library\\ERC1155Metadata.sol:9",
        "version": {
          "withMetadata": "51a5cd7d489c53959de1b4b946e542c6c132199cdb9fc8ee5b161d795330bc09",
          "withoutMetadata": "51a5cd7d489c53959de1b4b946e542c6c132199cdb9fc8ee5b161d795330bc09",
          "linkedWithoutMetadata": "51a5cd7d489c53959de1b4b946e542c6c132199cdb9fc8ee5b161d795330bc09"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155Metadata",
              "label": "baseMetadataURI",
              "type": "t_string_storage",
              "src": "contracts\\library\\ERC1155Metadata.sol:12"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155MintBurn": {
        "src": "contracts\\library\\ERC1155MintBurn.sol:9",
        "version": {
          "withMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "withoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "linkedWithoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48"
        },
        "inherit": [
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155TokenReceiver": {
        "src": "contracts\\library\\IERC1155TokenReceiver.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BiddingContractMock": {
        "src": "contracts\\mock\\BiddingContractMock.sol:7",
        "version": {
          "withMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a",
          "withoutMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a",
          "linkedWithoutMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "bid(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BiddingContractMock",
            "src": "contracts\\mock\\BiddingContractMock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BiddingContractMock",
              "label": "auctionContract",
              "type": "t_contract(FantomAuction)8538",
              "src": "contracts\\mock\\BiddingContractMock.sol:8"
            }
          ],
          "types": {
            "t_contract(FantomAuction)8538": {
              "label": "contract FantomAuction"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuctionMock": {
        "src": "contracts\\mock\\FantomAuctionMock.sol:7",
        "version": {
          "withMetadata": "fdd785b62bd3dbeff80b266d8be027fce6fce02f5aba2d3eb253346d53c7b0e1",
          "withoutMetadata": "fdd785b62bd3dbeff80b266d8be027fce6fce02f5aba2d3eb253346d53c7b0e1",
          "linkedWithoutMetadata": "fdd785b62bd3dbeff80b266d8be027fce6fce02f5aba2d3eb253346d53c7b0e1"
        },
        "inherit": [
          "FantomAuction",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "setNowOverride(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuctionMock",
              "label": "nowOverride",
              "type": "t_uint256",
              "src": "contracts\\mock\\FantomAuctionMock.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts\\mock\\MockERC20.sol:7",
        "version": {
          "withMetadata": "d825fed50e7322ed52c283c318628220344d5aca187c9dc3813d7f5889faf0a8",
          "withoutMetadata": "d825fed50e7322ed52c283c318628220344d5aca187c9dc3813d7f5889faf0a8",
          "linkedWithoutMetadata": "d825fed50e7322ed52c283c318628220344d5aca187c9dc3813d7f5889faf0a8"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts\\mock\\MockERC20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:340",
        "version": {
          "withMetadata": "23df31985695cc4bc8d5f5dcb1401f4c9fc004973e533a48f50e2a20bb9a0308",
          "withoutMetadata": "23df31985695cc4bc8d5f5dcb1401f4c9fc004973e533a48f50e2a20bb9a0308",
          "linkedWithoutMetadata": "23df31985695cc4bc8d5f5dcb1401f4c9fc004973e533a48f50e2a20bb9a0308"
        },
        "inherit": [
          "UpgradeabilityProxy",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AdminUpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:350"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:428"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:46",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:264",
        "version": {
          "withMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298",
          "withoutMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298",
          "linkedWithoutMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298"
        },
        "inherit": [
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:273"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:277"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyAdmin": {
        "src": "contracts\\proxy\\ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "1656613df43ea9c96983bb3f81976ece2e279af8f162749eb5e29c655a156ea8",
          "withoutMetadata": "1656613df43ea9c96983bb3f81976ece2e279af8f162749eb5e29c655a156ea8",
          "linkedWithoutMetadata": "1656613df43ea9c96983bb3f81976ece2e279af8f162749eb5e29c655a156ea8"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\math\\SafeMath.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:42",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20I": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "allowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165",
            "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC165",
              "label": "_supportedInterfaces",
              "type": "t_mapping(t_bytes4,t_bool)",
              "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "contracts\\library\\IERC165.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155": {
        "src": "@openzeppelin\\contracts\\token\\ERC1155\\IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "allowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\SafeERC20.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:21",
        "version": {
          "withMetadata": "8dd4924f7080b28673c12e2814297ba24304de217db52581284f10f3e0fdae07",
          "withoutMetadata": "8dd4924f7080b28673c12e2814297ba24304de217db52581284f10f3e0fdae07",
          "linkedWithoutMetadata": "8dd4924f7080b28673c12e2814297ba24304de217db52581284f10f3e0fdae07"
        },
        "inherit": [
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address",
          "EnumerableSet",
          "EnumerableMap",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "baseURI()",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:93"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_holderTokens",
              "type": "t_mapping(t_address,t_struct(UintSet)4754_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenOwners",
              "type": "t_struct(UintToAddressMap)4131_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:42"
            },
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:45"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:48"
            },
            {
              "contract": "ERC721",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:51"
            },
            {
              "contract": "ERC721",
              "label": "_baseURI",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(UintSet)4754_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UintSet)4754_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4368_storage"
                }
              ]
            },
            "t_struct(Set)4368_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(UintToAddressMap)4131_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)3813_storage"
                }
              ]
            },
            "t_struct(Map)3813_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)3805_storage)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_struct(MapEntry)3805_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]"
            },
            "t_struct(MapEntry)3805_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Enumerable.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:118",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableMap": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableMap.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableSet.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:8",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomAddressRegistry": {
        "src": "contracts\\FantomAddressRegistry.sol:8",
        "version": {
          "withMetadata": "76d1b9dc0da2d978cc59139b9224ff1063a564d2e103e5b8c53ddf92f35c6017",
          "withoutMetadata": "76d1b9dc0da2d978cc59139b9224ff1063a564d2e103e5b8c53ddf92f35c6017",
          "linkedWithoutMetadata": "76d1b9dc0da2d978cc59139b9224ff1063a564d2e103e5b8c53ddf92f35c6017"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "updateArtion(address)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateNFTFactory(address)",
          "updateNFTFactoryPrivate(address)",
          "updateArtFactory(address)",
          "updateArtFactoryPrivate(address)",
          "updateTokenRegistry(address)",
          "updatePriceFeed(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAddressRegistry",
              "label": "artion",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:12"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:15"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:18"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:21"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "factory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:24"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:27"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "artFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:30"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateArtFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:33"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "tokenRegistry",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:36"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "priceFeed",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactory": {
        "src": "contracts\\FantomArtFactory.sol:8",
        "version": {
          "withMetadata": "d4a1e964c791a23f412a86709671395f44dddf562aa57580730cf93eff3fd50d",
          "withoutMetadata": "d4a1e964c791a23f412a86709671395f44dddf562aa57580730cf93eff3fd50d",
          "linkedWithoutMetadata": "d4a1e964c791a23f412a86709671395f44dddf562aa57580730cf93eff3fd50d"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactory",
            "src": "contracts\\FantomArtFactory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactory.sol:14"
            },
            {
              "contract": "FantomArtFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactory.sol:17"
            },
            {
              "contract": "FantomArtFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactory.sol:20"
            },
            {
              "contract": "FantomArtFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactory.sol:23"
            },
            {
              "contract": "FantomArtFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtFactory.sol:26"
            },
            {
              "contract": "FantomArtFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomArtFactory.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactoryPrivate": {
        "src": "contracts\\FantomArtFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "e0fdcfb3b16f76fdbd409fb98de3b38f5c3677f2d8b853cdb1097f3798031304",
          "withoutMetadata": "e0fdcfb3b16f76fdbd409fb98de3b38f5c3677f2d8b853cdb1097f3798031304",
          "linkedWithoutMetadata": "e0fdcfb3b16f76fdbd409fb98de3b38f5c3677f2d8b853cdb1097f3798031304"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactoryPrivate",
            "src": "contracts\\FantomArtFactoryPrivate.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomArtFactoryPrivate.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradable": {
        "src": "contracts\\FantomArtTradable.sol:22",
        "version": {
          "withMetadata": "c0adcad2251cfbd3886a61e37e058f7be8a3b59616baad692cd6d6e457da1bf7",
          "withoutMetadata": "c0adcad2251cfbd3886a61e37e058f7be8a3b59616baad692cd6d6e457da1bf7",
          "linkedWithoutMetadata": "c0adcad2251cfbd3886a61e37e058f7be8a3b59616baad692cd6d6e457da1bf7"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradable",
            "src": "contracts\\FantomArtTradable.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts\\FantomArtTradable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradable",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradable.sol:28"
            },
            {
              "contract": "FantomArtTradable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts\\FantomArtTradable.sol:31"
            },
            {
              "contract": "FantomArtTradable",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtTradable.sol:33"
            },
            {
              "contract": "FantomArtTradable",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\FantomArtTradable.sol:34"
            },
            {
              "contract": "FantomArtTradable",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradable.sol:37"
            },
            {
              "contract": "FantomArtTradable",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradable.sol:39"
            },
            {
              "contract": "FantomArtTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradable.sol:41"
            },
            {
              "contract": "FantomArtTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtTradable.sol:43"
            },
            {
              "contract": "FantomArtTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradable.sol:45"
            },
            {
              "contract": "FantomArtTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradable.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "OwnableDelegateProxy": {
        "src": "contracts\\FantomArtTradablePrivate.sol:10",
        "version": {
          "withMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "withoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "linkedWithoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyRegistry": {
        "src": "contracts\\FantomArtTradablePrivate.sol:12",
        "version": {
          "withMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9",
          "withoutMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9",
          "linkedWithoutMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ProxyRegistry",
              "label": "proxies",
              "type": "t_mapping(t_address,t_contract(OwnableDelegateProxy)5998)",
              "src": "contracts\\FantomArtTradablePrivate.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_contract(OwnableDelegateProxy)5998)": {
              "label": "mapping(address => contract OwnableDelegateProxy)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(OwnableDelegateProxy)5998": {
              "label": "contract OwnableDelegateProxy"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradablePrivate": {
        "src": "contracts\\FantomArtTradablePrivate.sol:22",
        "version": {
          "withMetadata": "bf7b7baf73c8347bd6c9b943bd6327823ae43377e0e6c356a7e92d443525e201",
          "withoutMetadata": "bf7b7baf73c8347bd6c9b943bd6327823ae43377e0e6c356a7e92d443525e201",
          "linkedWithoutMetadata": "bf7b7baf73c8347bd6c9b943bd6327823ae43377e0e6c356a7e92d443525e201"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradablePrivate",
            "src": "contracts\\FantomArtTradablePrivate.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts\\FantomArtTradablePrivate.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradablePrivate.sol:28"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts\\FantomArtTradablePrivate.sol:31"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtTradablePrivate.sol:33"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\FantomArtTradablePrivate.sol:34"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradablePrivate.sol:37"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradablePrivate.sol:39"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradablePrivate.sol:41"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtTradablePrivate.sol:43"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradablePrivate.sol:45"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradablePrivate.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Artion": {
        "src": "contracts\\FantomArtion.sol:9",
        "version": {
          "withMetadata": "db5e7f93808806b87f44d6d9a0fcfc2c0e9c9f151cc1759d18a7854746c59ef8",
          "withoutMetadata": "db5e7f93808806b87f44d6d9a0fcfc2c0e9c9f151cc1759d18a7854746c59ef8",
          "linkedWithoutMetadata": "db5e7f93808806b87f44d6d9a0fcfc2c0e9c9f151cc1759d18a7854746c59ef8"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable,uint256)",
          "mint(address,string)",
          "burn(uint256)",
          "exists(uint256)",
          "isApproved(uint256,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Artion",
            "src": "contracts\\FantomArtion.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Artion",
              "label": "tokenIdPointer",
              "type": "t_uint256",
              "src": "contracts\\FantomArtion.sol:26"
            },
            {
              "contract": "Artion",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtion.sol:29"
            },
            {
              "contract": "Artion",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtion.sol:32"
            },
            {
              "contract": "Artion",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtion.sol:35"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuction": {
        "src": "contracts\\FantomAuction.sol:55",
        "version": {
          "withMetadata": "19513f8a3837450037736bded6fd45eeccb28988ed437815908e9ca056eadc1c",
          "withoutMetadata": "19513f8a3837450037736bded6fd45eeccb28988ed437815908e9ca056eadc1c",
          "linkedWithoutMetadata": "19513f8a3837450037736bded6fd45eeccb28988ed437815908e9ca056eadc1c"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable)",
          "createAuction(address,uint256,address,uint256,uint256,bool,uint256)",
          "placeBid(address,uint256)",
          "placeBid(address,uint256,uint256)",
          "withdrawBid(address,uint256)",
          "resultAuction(address,uint256)",
          "cancelAuction(address,uint256)",
          "toggleIsPaused()",
          "updateMinBidIncrement(uint256)",
          "updateBidWithdrawalLockTime(uint256)",
          "updateAuctionReservePrice(address,uint256,uint256)",
          "updateAuctionStartTime(address,uint256,uint256)",
          "updateAuctionEndTime(address,uint256,uint256)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "getAuction(address,uint256)",
          "getHighestBidder(address,uint256)",
          "reclaimERC20(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "minBidIncrement",
            "src": "contracts\\FantomAuction.sol:156"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bidWithdrawalLockTime",
            "src": "contracts\\FantomAuction.sol:159"
          },
          {
            "kind": "state-variable-assignment",
            "name": "platformFee",
            "src": "contracts\\FantomAuction.sol:162"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuction",
              "label": "auctions",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6807_storage))",
              "src": "contracts\\FantomAuction.sol:150"
            },
            {
              "contract": "FantomAuction",
              "label": "highestBids",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6814_storage))",
              "src": "contracts\\FantomAuction.sol:153"
            },
            {
              "contract": "FantomAuction",
              "label": "minBidIncrement",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:156"
            },
            {
              "contract": "FantomAuction",
              "label": "bidWithdrawalLockTime",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:159"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:162"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFeeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomAuction.sol:165"
            },
            {
              "contract": "FantomAuction",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)6614",
              "src": "contracts\\FantomAuction.sol:168"
            },
            {
              "contract": "FantomAuction",
              "label": "isPaused",
              "type": "t_bool",
              "src": "contracts\\FantomAuction.sol:171"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6807_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.Auction))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(Auction)6807_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.Auction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Auction)6807_storage": {
              "label": "struct FantomAuction.Auction",
              "members": [
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "minBid",
                  "type": "t_uint256"
                },
                {
                  "label": "reservePrice",
                  "type": "t_uint256"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256"
                },
                {
                  "label": "resulted",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6814_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.HighestBid))"
            },
            "t_mapping(t_uint256,t_struct(HighestBid)6814_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.HighestBid)"
            },
            "t_struct(HighestBid)6814_storage": {
              "label": "struct FantomAuction.HighestBid",
              "members": [
                {
                  "label": "bidder",
                  "type": "t_address_payable"
                },
                {
                  "label": "bid",
                  "type": "t_uint256"
                },
                {
                  "label": "lastBidTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)6614": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAddressRegistry": {
        "src": "contracts\\FantomPriceFeed.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenRegistry()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomBundleMarketplace": {
        "src": "contracts\\FantomMarketplace.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,address,address)",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomTokenRegistry": {
        "src": "contracts\\FantomPriceFeed.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enabled(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomBundleMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:39",
        "version": {
          "withMetadata": "799fbd51d29c85719d4442f9b1abe166ef22751846c662130b29731ef95365e3",
          "withoutMetadata": "799fbd51d29c85719d4442f9b1abe166ef22751846c662130b29731ef95365e3",
          "linkedWithoutMetadata": "799fbd51d29c85719d4442f9b1abe166ef22751846c662130b29731ef95365e3"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20",
          "EnumerableSet"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "getListing(address,string)",
          "listItem(string,address[],uint256[],uint256[],address,uint256,uint256)",
          "cancelListing(string)",
          "updateListing(string,address,uint256)",
          "buyItem(string)",
          "buyItem(string,address)",
          "createOffer(string,address,uint256,uint256)",
          "cancelOffer(string)",
          "acceptOffer(string,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomBundleMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8711_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:106"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "owners",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts\\FantomBundleMarketplace.sol:109"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIdsPerItem",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4548_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:111"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "nftIndexes",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))",
              "src": "contracts\\FantomBundleMarketplace.sol:113"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIds",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "src": "contracts\\FantomBundleMarketplace.sol:115"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "offers",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8718_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:118"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomBundleMarketplace.sol:121"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomBundleMarketplace.sol:124"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)8574",
              "src": "contracts\\FantomBundleMarketplace.sol:127"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8711_storage))": {
              "label": "mapping(address => mapping(bytes32 => struct FantomBundleMarketplace.Listing))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_struct(Listing)8711_storage)": {
              "label": "mapping(bytes32 => struct FantomBundleMarketplace.Listing)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Listing)8711_storage": {
              "label": "struct FantomBundleMarketplace.Listing",
              "members": [
                {
                  "label": "nfts",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "tokenIds",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "quantities",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4548_storage))": {
              "label": "mapping(address => mapping(uint256 => struct EnumerableSet.Bytes32Set))"
            },
            "t_mapping(t_uint256,t_struct(Bytes32Set)4548_storage)": {
              "label": "mapping(uint256 => struct EnumerableSet.Bytes32Set)"
            },
            "t_struct(Bytes32Set)4548_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4368_storage"
                }
              ]
            },
            "t_struct(Set)4368_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
              "label": "mapping(bytes32 => mapping(address => mapping(uint256 => uint256)))"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8718_storage))": {
              "label": "mapping(bytes32 => mapping(address => struct FantomBundleMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)8718_storage)": {
              "label": "mapping(address => struct FantomBundleMarketplace.Offer)"
            },
            "t_struct(Offer)8718_storage": {
              "label": "struct FantomBundleMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)2054"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)2054": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)8574": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomMarketplace": {
        "src": "contracts\\FantomMarketplace.sol:71",
        "version": {
          "withMetadata": "f59cf2f57630405672c7081ae743b97f6b2aea7058d8bcd94b62f66298b0e2f0",
          "withoutMetadata": "f59cf2f57630405672c7081ae743b97f6b2aea7058d8bcd94b62f66298b0e2f0",
          "linkedWithoutMetadata": "f59cf2f57630405672c7081ae743b97f6b2aea7058d8bcd94b62f66298b0e2f0"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable,uint16)",
          "listItem(address,uint256,uint256,address,uint256,uint256)",
          "cancelListing(address,uint256)",
          "updateListing(address,uint256,address,uint256)",
          "buyItem(address,uint256,address,address)",
          "createOffer(address,uint256,address,uint256,uint256,uint256)",
          "cancelOffer(address,uint256)",
          "acceptOffer(address,uint256,address)",
          "registerRoyalty(address,uint256,uint16)",
          "registerCollectionRoyalty(address,address,uint16,address)",
          "getPrice(address)",
          "updatePlatformFee(uint16)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomMarketplace",
              "label": "minters",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
              "src": "contracts\\FantomMarketplace.sol:151"
            },
            {
              "contract": "FantomMarketplace",
              "label": "royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint16))",
              "src": "contracts\\FantomMarketplace.sol:154"
            },
            {
              "contract": "FantomMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10915_storage)))",
              "src": "contracts\\FantomMarketplace.sol:157"
            },
            {
              "contract": "FantomMarketplace",
              "label": "offers",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10924_storage)))",
              "src": "contracts\\FantomMarketplace.sol:161"
            },
            {
              "contract": "FantomMarketplace",
              "label": "platformFee",
              "type": "t_uint16",
              "src": "contracts\\FantomMarketplace.sol:165"
            },
            {
              "contract": "FantomMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomMarketplace.sol:168"
            },
            {
              "contract": "FantomMarketplace",
              "label": "collectionRoyalties",
              "type": "t_mapping(t_address,t_struct(CollectionRoyalty)10931_storage)",
              "src": "contracts\\FantomMarketplace.sol:171"
            },
            {
              "contract": "FantomMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)10745",
              "src": "contracts\\FantomMarketplace.sol:174"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
              "label": "mapping(address => mapping(uint256 => address))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint16))": {
              "label": "mapping(address => mapping(uint256 => uint16))"
            },
            "t_mapping(t_uint256,t_uint16)": {
              "label": "mapping(uint256 => uint16)"
            },
            "t_uint16": {
              "label": "uint16"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10915_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Listing)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10915_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Listing))"
            },
            "t_mapping(t_address,t_struct(Listing)10915_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Listing)"
            },
            "t_struct(Listing)10915_storage": {
              "label": "struct FantomMarketplace.Listing",
              "members": [
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10924_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Offer)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10924_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)10924_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Offer)"
            },
            "t_struct(Offer)10924_storage": {
              "label": "struct FantomMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)2054"
                },
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)2054": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_struct(CollectionRoyalty)10931_storage)": {
              "label": "mapping(address => struct FantomMarketplace.CollectionRoyalty)"
            },
            "t_struct(CollectionRoyalty)10931_storage": {
              "label": "struct FantomMarketplace.CollectionRoyalty",
              "members": [
                {
                  "label": "royalty",
                  "type": "t_uint16"
                },
                {
                  "label": "creator",
                  "type": "t_address"
                },
                {
                  "label": "feeRecipient",
                  "type": "t_address"
                }
              ]
            },
            "t_contract(IFantomAddressRegistry)10745": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAuction": {
        "src": "contracts\\FantomMarketplace.sol:35",
        "inherit": [],
        "libraries": [],
        "methods": [
          "auctions(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomNFTFactory": {
        "src": "contracts\\FantomMarketplace.sol:57",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exists(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomPriceFeed": {
        "src": "contracts\\FantomMarketplace.sol:65",
        "inherit": [],
        "libraries": [],
        "methods": [
          "wFTM()",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactory": {
        "src": "contracts\\FantomNFTFactory.sol:8",
        "version": {
          "withMetadata": "e213646b1abd3df7e7d728be53caa090c9a63c69de693128cf293b4ce49fbd20",
          "withoutMetadata": "e213646b1abd3df7e7d728be53caa090c9a63c69de693128cf293b4ce49fbd20",
          "linkedWithoutMetadata": "e213646b1abd3df7e7d728be53caa090c9a63c69de693128cf293b4ce49fbd20"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactory",
            "src": "contracts\\FantomNFTFactory.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactory",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:14"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:17"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:20"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactory.sol:23"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactory.sol:26"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTFactory.sol:29"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomNFTFactory.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactoryPrivate": {
        "src": "contracts\\FantomNFTFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "0487dd72b4e58be01c1984618c03964b3fc492482cd0f62a547d06f73a35fc03",
          "withoutMetadata": "0487dd72b4e58be01c1984618c03964b3fc492482cd0f62a547d06f73a35fc03",
          "linkedWithoutMetadata": "0487dd72b4e58be01c1984618c03964b3fc492482cd0f62a547d06f73a35fc03"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactoryPrivate",
            "src": "contracts\\FantomNFTFactoryPrivate.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:29"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradable": {
        "src": "contracts\\FantomNFTTradable.sol:12",
        "version": {
          "withMetadata": "ebfb5cde50fd0230e1a40f125d277ad1fe7691d898ff9f8097916e9378446acb",
          "withoutMetadata": "ebfb5cde50fd0230e1a40f125d277ad1fe7691d898ff9f8097916e9378446acb",
          "linkedWithoutMetadata": "ebfb5cde50fd0230e1a40f125d277ad1fe7691d898ff9f8097916e9378446acb"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradable",
            "src": "contracts\\FantomNFTTradable.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts\\FantomNFTTradable.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradable",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:27"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:28"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:29"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradable.sol:30"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradable.sol:33"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTTradable.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradablePrivate": {
        "src": "contracts\\FantomNFTTradablePrivate.sol:12",
        "version": {
          "withMetadata": "8ac05d68d3c513b9b21725d149d1f1bb0045563abbb7908621d92d8939e5182f",
          "withoutMetadata": "8ac05d68d3c513b9b21725d149d1f1bb0045563abbb7908621d92d8939e5182f",
          "linkedWithoutMetadata": "8ac05d68d3c513b9b21725d149d1f1bb0045563abbb7908621d92d8939e5182f"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradablePrivate",
            "src": "contracts\\FantomNFTTradablePrivate.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts\\FantomNFTTradablePrivate.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:27"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:28"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:29"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradablePrivate.sol:30"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradablePrivate.sol:33"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTTradablePrivate.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomPriceFeed": {
        "src": "contracts\\FantomPriceFeed.sol:21",
        "version": {
          "withMetadata": "2179f4724517738e1fb353bf1cb098d7a0480bddecf6b18e59184405ea804515",
          "withoutMetadata": "2179f4724517738e1fb353bf1cb098d7a0480bddecf6b18e59184405ea804515",
          "linkedWithoutMetadata": "2179f4724517738e1fb353bf1cb098d7a0480bddecf6b18e59184405ea804515"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerOracle(address,address)",
          "updateOracle(address,address)",
          "getPrice(address)",
          "updateAddressRegistry(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomPriceFeed",
            "src": "contracts\\FantomPriceFeed.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomPriceFeed",
              "label": "oracles",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts\\FantomPriceFeed.sol:23"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "addressRegistry",
              "type": "t_address",
              "src": "contracts\\FantomPriceFeed.sol:26"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "wFTM",
              "type": "t_address",
              "src": "contracts\\FantomPriceFeed.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IOracle": {
        "src": "contracts\\FantomPriceFeed.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestAnswer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomTokenRegistry": {
        "src": "contracts\\FantomTokenRegistry.sol:7",
        "version": {
          "withMetadata": "f557aeb9df5f2a6d4d41c6ed338fe625912760f47b04da7f88e543b786055f16",
          "withoutMetadata": "f557aeb9df5f2a6d4d41c6ed338fe625912760f47b04da7f88e543b786055f16",
          "linkedWithoutMetadata": "f557aeb9df5f2a6d4d41c6ed338fe625912760f47b04da7f88e543b786055f16"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "add(address)",
          "remove(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomTokenRegistry",
              "label": "enabled",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomTokenRegistry.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155": {
        "src": "contracts\\library\\ERC1155.sol:11",
        "version": {
          "withMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "withoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "linkedWithoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48"
        },
        "inherit": [
          "IERC165"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155",
              "label": "balances",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts\\library\\ERC1155.sol:25"
            },
            {
              "contract": "ERC1155",
              "label": "operators",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts\\library\\ERC1155.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155Metadata": {
        "src": "contracts\\library\\ERC1155Metadata.sol:9",
        "version": {
          "withMetadata": "51a5cd7d489c53959de1b4b946e542c6c132199cdb9fc8ee5b161d795330bc09",
          "withoutMetadata": "51a5cd7d489c53959de1b4b946e542c6c132199cdb9fc8ee5b161d795330bc09",
          "linkedWithoutMetadata": "51a5cd7d489c53959de1b4b946e542c6c132199cdb9fc8ee5b161d795330bc09"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155Metadata",
              "label": "baseMetadataURI",
              "type": "t_string_storage",
              "src": "contracts\\library\\ERC1155Metadata.sol:12"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155MintBurn": {
        "src": "contracts\\library\\ERC1155MintBurn.sol:9",
        "version": {
          "withMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "withoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "linkedWithoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48"
        },
        "inherit": [
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155TokenReceiver": {
        "src": "contracts\\library\\IERC1155TokenReceiver.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BiddingContractMock": {
        "src": "contracts\\mock\\BiddingContractMock.sol:7",
        "version": {
          "withMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a",
          "withoutMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a",
          "linkedWithoutMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "bid(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BiddingContractMock",
            "src": "contracts\\mock\\BiddingContractMock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BiddingContractMock",
              "label": "auctionContract",
              "type": "t_contract(FantomAuction)8546",
              "src": "contracts\\mock\\BiddingContractMock.sol:8"
            }
          ],
          "types": {
            "t_contract(FantomAuction)8546": {
              "label": "contract FantomAuction"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuctionMock": {
        "src": "contracts\\mock\\FantomAuctionMock.sol:7",
        "version": {
          "withMetadata": "fdd785b62bd3dbeff80b266d8be027fce6fce02f5aba2d3eb253346d53c7b0e1",
          "withoutMetadata": "fdd785b62bd3dbeff80b266d8be027fce6fce02f5aba2d3eb253346d53c7b0e1",
          "linkedWithoutMetadata": "fdd785b62bd3dbeff80b266d8be027fce6fce02f5aba2d3eb253346d53c7b0e1"
        },
        "inherit": [
          "FantomAuction",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "setNowOverride(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuctionMock",
              "label": "nowOverride",
              "type": "t_uint256",
              "src": "contracts\\mock\\FantomAuctionMock.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts\\mock\\MockERC20.sol:7",
        "version": {
          "withMetadata": "d825fed50e7322ed52c283c318628220344d5aca187c9dc3813d7f5889faf0a8",
          "withoutMetadata": "d825fed50e7322ed52c283c318628220344d5aca187c9dc3813d7f5889faf0a8",
          "linkedWithoutMetadata": "d825fed50e7322ed52c283c318628220344d5aca187c9dc3813d7f5889faf0a8"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts\\mock\\MockERC20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:340",
        "version": {
          "withMetadata": "23df31985695cc4bc8d5f5dcb1401f4c9fc004973e533a48f50e2a20bb9a0308",
          "withoutMetadata": "23df31985695cc4bc8d5f5dcb1401f4c9fc004973e533a48f50e2a20bb9a0308",
          "linkedWithoutMetadata": "23df31985695cc4bc8d5f5dcb1401f4c9fc004973e533a48f50e2a20bb9a0308"
        },
        "inherit": [
          "UpgradeabilityProxy",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AdminUpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:350"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:428"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:46",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:264",
        "version": {
          "withMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298",
          "withoutMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298",
          "linkedWithoutMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298"
        },
        "inherit": [
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:273"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:277"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyAdmin": {
        "src": "contracts\\proxy\\ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "1656613df43ea9c96983bb3f81976ece2e279af8f162749eb5e29c655a156ea8",
          "withoutMetadata": "1656613df43ea9c96983bb3f81976ece2e279af8f162749eb5e29c655a156ea8",
          "linkedWithoutMetadata": "1656613df43ea9c96983bb3f81976ece2e279af8f162749eb5e29c655a156ea8"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\math\\SafeMath.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165",
            "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC165",
              "label": "_supportedInterfaces",
              "type": "t_mapping(t_bytes4,t_bool)",
              "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "contracts\\library\\IERC165.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155": {
        "src": "@openzeppelin\\contracts\\token\\ERC1155\\IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "allowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\SafeERC20.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:21",
        "version": {
          "withMetadata": "8dd4924f7080b28673c12e2814297ba24304de217db52581284f10f3e0fdae07",
          "withoutMetadata": "8dd4924f7080b28673c12e2814297ba24304de217db52581284f10f3e0fdae07",
          "linkedWithoutMetadata": "8dd4924f7080b28673c12e2814297ba24304de217db52581284f10f3e0fdae07"
        },
        "inherit": [
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address",
          "EnumerableSet",
          "EnumerableMap",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "baseURI()",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:93"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_holderTokens",
              "type": "t_mapping(t_address,t_struct(UintSet)4679_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenOwners",
              "type": "t_struct(UintToAddressMap)4056_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:42"
            },
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:45"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:48"
            },
            {
              "contract": "ERC721",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:51"
            },
            {
              "contract": "ERC721",
              "label": "_baseURI",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(UintSet)4679_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UintSet)4679_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4293_storage"
                }
              ]
            },
            "t_struct(Set)4293_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(UintToAddressMap)4056_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)3738_storage"
                }
              ]
            },
            "t_struct(Map)3738_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)3730_storage)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_struct(MapEntry)3730_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]"
            },
            "t_struct(MapEntry)3730_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Enumerable.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:118",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableMap": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableMap.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableSet.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:8",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomAddressRegistry": {
        "src": "contracts\\FantomAddressRegistry.sol:8",
        "version": {
          "withMetadata": "76d1b9dc0da2d978cc59139b9224ff1063a564d2e103e5b8c53ddf92f35c6017",
          "withoutMetadata": "76d1b9dc0da2d978cc59139b9224ff1063a564d2e103e5b8c53ddf92f35c6017",
          "linkedWithoutMetadata": "76d1b9dc0da2d978cc59139b9224ff1063a564d2e103e5b8c53ddf92f35c6017"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "updateArtion(address)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateNFTFactory(address)",
          "updateNFTFactoryPrivate(address)",
          "updateArtFactory(address)",
          "updateArtFactoryPrivate(address)",
          "updateTokenRegistry(address)",
          "updatePriceFeed(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAddressRegistry",
              "label": "artion",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:12"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:15"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:18"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:21"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "factory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:24"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:27"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "artFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:30"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateArtFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:33"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "tokenRegistry",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:36"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "priceFeed",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactory": {
        "src": "contracts\\FantomArtFactory.sol:8",
        "version": {
          "withMetadata": "d4a1e964c791a23f412a86709671395f44dddf562aa57580730cf93eff3fd50d",
          "withoutMetadata": "d4a1e964c791a23f412a86709671395f44dddf562aa57580730cf93eff3fd50d",
          "linkedWithoutMetadata": "d4a1e964c791a23f412a86709671395f44dddf562aa57580730cf93eff3fd50d"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactory",
            "src": "contracts\\FantomArtFactory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactory.sol:14"
            },
            {
              "contract": "FantomArtFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactory.sol:17"
            },
            {
              "contract": "FantomArtFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactory.sol:20"
            },
            {
              "contract": "FantomArtFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactory.sol:23"
            },
            {
              "contract": "FantomArtFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtFactory.sol:26"
            },
            {
              "contract": "FantomArtFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomArtFactory.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactoryPrivate": {
        "src": "contracts\\FantomArtFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "e0fdcfb3b16f76fdbd409fb98de3b38f5c3677f2d8b853cdb1097f3798031304",
          "withoutMetadata": "e0fdcfb3b16f76fdbd409fb98de3b38f5c3677f2d8b853cdb1097f3798031304",
          "linkedWithoutMetadata": "e0fdcfb3b16f76fdbd409fb98de3b38f5c3677f2d8b853cdb1097f3798031304"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactoryPrivate",
            "src": "contracts\\FantomArtFactoryPrivate.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomArtFactoryPrivate.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradable": {
        "src": "contracts\\FantomArtTradable.sol:22",
        "version": {
          "withMetadata": "c0adcad2251cfbd3886a61e37e058f7be8a3b59616baad692cd6d6e457da1bf7",
          "withoutMetadata": "c0adcad2251cfbd3886a61e37e058f7be8a3b59616baad692cd6d6e457da1bf7",
          "linkedWithoutMetadata": "c0adcad2251cfbd3886a61e37e058f7be8a3b59616baad692cd6d6e457da1bf7"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradable",
            "src": "contracts\\FantomArtTradable.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts\\FantomArtTradable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradable",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradable.sol:28"
            },
            {
              "contract": "FantomArtTradable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts\\FantomArtTradable.sol:31"
            },
            {
              "contract": "FantomArtTradable",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtTradable.sol:33"
            },
            {
              "contract": "FantomArtTradable",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\FantomArtTradable.sol:34"
            },
            {
              "contract": "FantomArtTradable",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradable.sol:37"
            },
            {
              "contract": "FantomArtTradable",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradable.sol:39"
            },
            {
              "contract": "FantomArtTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradable.sol:41"
            },
            {
              "contract": "FantomArtTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtTradable.sol:43"
            },
            {
              "contract": "FantomArtTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradable.sol:45"
            },
            {
              "contract": "FantomArtTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradable.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "OwnableDelegateProxy": {
        "src": "contracts\\FantomArtTradablePrivate.sol:10",
        "version": {
          "withMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "withoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "linkedWithoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyRegistry": {
        "src": "contracts\\FantomArtTradablePrivate.sol:12",
        "version": {
          "withMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9",
          "withoutMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9",
          "linkedWithoutMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ProxyRegistry",
              "label": "proxies",
              "type": "t_mapping(t_address,t_contract(OwnableDelegateProxy)5923)",
              "src": "contracts\\FantomArtTradablePrivate.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_contract(OwnableDelegateProxy)5923)": {
              "label": "mapping(address => contract OwnableDelegateProxy)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(OwnableDelegateProxy)5923": {
              "label": "contract OwnableDelegateProxy"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradablePrivate": {
        "src": "contracts\\FantomArtTradablePrivate.sol:22",
        "version": {
          "withMetadata": "bf7b7baf73c8347bd6c9b943bd6327823ae43377e0e6c356a7e92d443525e201",
          "withoutMetadata": "bf7b7baf73c8347bd6c9b943bd6327823ae43377e0e6c356a7e92d443525e201",
          "linkedWithoutMetadata": "bf7b7baf73c8347bd6c9b943bd6327823ae43377e0e6c356a7e92d443525e201"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradablePrivate",
            "src": "contracts\\FantomArtTradablePrivate.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts\\FantomArtTradablePrivate.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradablePrivate.sol:28"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts\\FantomArtTradablePrivate.sol:31"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtTradablePrivate.sol:33"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\FantomArtTradablePrivate.sol:34"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradablePrivate.sol:37"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradablePrivate.sol:39"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradablePrivate.sol:41"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtTradablePrivate.sol:43"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradablePrivate.sol:45"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradablePrivate.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Artion": {
        "src": "contracts\\FantomArtion.sol:9",
        "version": {
          "withMetadata": "db5e7f93808806b87f44d6d9a0fcfc2c0e9c9f151cc1759d18a7854746c59ef8",
          "withoutMetadata": "db5e7f93808806b87f44d6d9a0fcfc2c0e9c9f151cc1759d18a7854746c59ef8",
          "linkedWithoutMetadata": "db5e7f93808806b87f44d6d9a0fcfc2c0e9c9f151cc1759d18a7854746c59ef8"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable,uint256)",
          "mint(address,string)",
          "burn(uint256)",
          "exists(uint256)",
          "isApproved(uint256,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Artion",
            "src": "contracts\\FantomArtion.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Artion",
              "label": "tokenIdPointer",
              "type": "t_uint256",
              "src": "contracts\\FantomArtion.sol:26"
            },
            {
              "contract": "Artion",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtion.sol:29"
            },
            {
              "contract": "Artion",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtion.sol:32"
            },
            {
              "contract": "Artion",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtion.sol:35"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuction": {
        "src": "contracts\\FantomAuction.sol:55",
        "version": {
          "withMetadata": "19513f8a3837450037736bded6fd45eeccb28988ed437815908e9ca056eadc1c",
          "withoutMetadata": "19513f8a3837450037736bded6fd45eeccb28988ed437815908e9ca056eadc1c",
          "linkedWithoutMetadata": "19513f8a3837450037736bded6fd45eeccb28988ed437815908e9ca056eadc1c"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable)",
          "createAuction(address,uint256,address,uint256,uint256,bool,uint256)",
          "placeBid(address,uint256)",
          "placeBid(address,uint256,uint256)",
          "withdrawBid(address,uint256)",
          "resultAuction(address,uint256)",
          "cancelAuction(address,uint256)",
          "toggleIsPaused()",
          "updateMinBidIncrement(uint256)",
          "updateBidWithdrawalLockTime(uint256)",
          "updateAuctionReservePrice(address,uint256,uint256)",
          "updateAuctionStartTime(address,uint256,uint256)",
          "updateAuctionEndTime(address,uint256,uint256)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "getAuction(address,uint256)",
          "getHighestBidder(address,uint256)",
          "reclaimERC20(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "minBidIncrement",
            "src": "contracts\\FantomAuction.sol:156"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bidWithdrawalLockTime",
            "src": "contracts\\FantomAuction.sol:159"
          },
          {
            "kind": "state-variable-assignment",
            "name": "platformFee",
            "src": "contracts\\FantomAuction.sol:162"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuction",
              "label": "auctions",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6732_storage))",
              "src": "contracts\\FantomAuction.sol:150"
            },
            {
              "contract": "FantomAuction",
              "label": "highestBids",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6739_storage))",
              "src": "contracts\\FantomAuction.sol:153"
            },
            {
              "contract": "FantomAuction",
              "label": "minBidIncrement",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:156"
            },
            {
              "contract": "FantomAuction",
              "label": "bidWithdrawalLockTime",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:159"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:162"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFeeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomAuction.sol:165"
            },
            {
              "contract": "FantomAuction",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)6539",
              "src": "contracts\\FantomAuction.sol:168"
            },
            {
              "contract": "FantomAuction",
              "label": "isPaused",
              "type": "t_bool",
              "src": "contracts\\FantomAuction.sol:171"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6732_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.Auction))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(Auction)6732_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.Auction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Auction)6732_storage": {
              "label": "struct FantomAuction.Auction",
              "members": [
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "minBid",
                  "type": "t_uint256"
                },
                {
                  "label": "reservePrice",
                  "type": "t_uint256"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256"
                },
                {
                  "label": "resulted",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6739_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.HighestBid))"
            },
            "t_mapping(t_uint256,t_struct(HighestBid)6739_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.HighestBid)"
            },
            "t_struct(HighestBid)6739_storage": {
              "label": "struct FantomAuction.HighestBid",
              "members": [
                {
                  "label": "bidder",
                  "type": "t_address_payable"
                },
                {
                  "label": "bid",
                  "type": "t_uint256"
                },
                {
                  "label": "lastBidTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)6539": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAddressRegistry": {
        "src": "contracts\\FantomPriceFeed.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenRegistry()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomBundleMarketplace": {
        "src": "contracts\\FantomMarketplace.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,address,address)",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomTokenRegistry": {
        "src": "contracts\\FantomPriceFeed.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enabled(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomBundleMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:39",
        "version": {
          "withMetadata": "799fbd51d29c85719d4442f9b1abe166ef22751846c662130b29731ef95365e3",
          "withoutMetadata": "799fbd51d29c85719d4442f9b1abe166ef22751846c662130b29731ef95365e3",
          "linkedWithoutMetadata": "799fbd51d29c85719d4442f9b1abe166ef22751846c662130b29731ef95365e3"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20",
          "EnumerableSet"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "getListing(address,string)",
          "listItem(string,address[],uint256[],uint256[],address,uint256,uint256)",
          "cancelListing(string)",
          "updateListing(string,address,uint256)",
          "buyItem(string)",
          "buyItem(string,address)",
          "createOffer(string,address,uint256,uint256)",
          "cancelOffer(string)",
          "acceptOffer(string,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomBundleMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8636_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:106"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "owners",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts\\FantomBundleMarketplace.sol:109"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIdsPerItem",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4473_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:111"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "nftIndexes",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))",
              "src": "contracts\\FantomBundleMarketplace.sol:113"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIds",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "src": "contracts\\FantomBundleMarketplace.sol:115"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "offers",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8643_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:118"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomBundleMarketplace.sol:121"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomBundleMarketplace.sol:124"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)8499",
              "src": "contracts\\FantomBundleMarketplace.sol:127"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8636_storage))": {
              "label": "mapping(address => mapping(bytes32 => struct FantomBundleMarketplace.Listing))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_struct(Listing)8636_storage)": {
              "label": "mapping(bytes32 => struct FantomBundleMarketplace.Listing)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Listing)8636_storage": {
              "label": "struct FantomBundleMarketplace.Listing",
              "members": [
                {
                  "label": "nfts",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "tokenIds",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "quantities",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4473_storage))": {
              "label": "mapping(address => mapping(uint256 => struct EnumerableSet.Bytes32Set))"
            },
            "t_mapping(t_uint256,t_struct(Bytes32Set)4473_storage)": {
              "label": "mapping(uint256 => struct EnumerableSet.Bytes32Set)"
            },
            "t_struct(Bytes32Set)4473_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4293_storage"
                }
              ]
            },
            "t_struct(Set)4293_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
              "label": "mapping(bytes32 => mapping(address => mapping(uint256 => uint256)))"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8643_storage))": {
              "label": "mapping(bytes32 => mapping(address => struct FantomBundleMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)8643_storage)": {
              "label": "mapping(address => struct FantomBundleMarketplace.Offer)"
            },
            "t_struct(Offer)8643_storage": {
              "label": "struct FantomBundleMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)8499": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomMarketplace": {
        "src": "contracts\\FantomMarketplace.sol:71",
        "version": {
          "withMetadata": "f59cf2f57630405672c7081ae743b97f6b2aea7058d8bcd94b62f66298b0e2f0",
          "withoutMetadata": "f59cf2f57630405672c7081ae743b97f6b2aea7058d8bcd94b62f66298b0e2f0",
          "linkedWithoutMetadata": "f59cf2f57630405672c7081ae743b97f6b2aea7058d8bcd94b62f66298b0e2f0"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable,uint16)",
          "listItem(address,uint256,uint256,address,uint256,uint256)",
          "cancelListing(address,uint256)",
          "updateListing(address,uint256,address,uint256)",
          "buyItem(address,uint256,address,address)",
          "createOffer(address,uint256,address,uint256,uint256,uint256)",
          "cancelOffer(address,uint256)",
          "acceptOffer(address,uint256,address)",
          "registerRoyalty(address,uint256,uint16)",
          "registerCollectionRoyalty(address,address,uint16,address)",
          "getPrice(address)",
          "updatePlatformFee(uint16)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomMarketplace",
              "label": "minters",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
              "src": "contracts\\FantomMarketplace.sol:151"
            },
            {
              "contract": "FantomMarketplace",
              "label": "royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint16))",
              "src": "contracts\\FantomMarketplace.sol:154"
            },
            {
              "contract": "FantomMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10840_storage)))",
              "src": "contracts\\FantomMarketplace.sol:157"
            },
            {
              "contract": "FantomMarketplace",
              "label": "offers",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10849_storage)))",
              "src": "contracts\\FantomMarketplace.sol:161"
            },
            {
              "contract": "FantomMarketplace",
              "label": "platformFee",
              "type": "t_uint16",
              "src": "contracts\\FantomMarketplace.sol:165"
            },
            {
              "contract": "FantomMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomMarketplace.sol:168"
            },
            {
              "contract": "FantomMarketplace",
              "label": "collectionRoyalties",
              "type": "t_mapping(t_address,t_struct(CollectionRoyalty)10856_storage)",
              "src": "contracts\\FantomMarketplace.sol:171"
            },
            {
              "contract": "FantomMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)10670",
              "src": "contracts\\FantomMarketplace.sol:174"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
              "label": "mapping(address => mapping(uint256 => address))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint16))": {
              "label": "mapping(address => mapping(uint256 => uint16))"
            },
            "t_mapping(t_uint256,t_uint16)": {
              "label": "mapping(uint256 => uint16)"
            },
            "t_uint16": {
              "label": "uint16"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10840_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Listing)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10840_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Listing))"
            },
            "t_mapping(t_address,t_struct(Listing)10840_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Listing)"
            },
            "t_struct(Listing)10840_storage": {
              "label": "struct FantomMarketplace.Listing",
              "members": [
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10849_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Offer)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10849_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)10849_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Offer)"
            },
            "t_struct(Offer)10849_storage": {
              "label": "struct FantomMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_struct(CollectionRoyalty)10856_storage)": {
              "label": "mapping(address => struct FantomMarketplace.CollectionRoyalty)"
            },
            "t_struct(CollectionRoyalty)10856_storage": {
              "label": "struct FantomMarketplace.CollectionRoyalty",
              "members": [
                {
                  "label": "royalty",
                  "type": "t_uint16"
                },
                {
                  "label": "creator",
                  "type": "t_address"
                },
                {
                  "label": "feeRecipient",
                  "type": "t_address"
                }
              ]
            },
            "t_contract(IFantomAddressRegistry)10670": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAuction": {
        "src": "contracts\\FantomMarketplace.sol:35",
        "inherit": [],
        "libraries": [],
        "methods": [
          "auctions(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomNFTFactory": {
        "src": "contracts\\FantomMarketplace.sol:57",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exists(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomPriceFeed": {
        "src": "contracts\\FantomMarketplace.sol:65",
        "inherit": [],
        "libraries": [],
        "methods": [
          "wFTM()",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactory": {
        "src": "contracts\\FantomNFTFactory.sol:8",
        "version": {
          "withMetadata": "e213646b1abd3df7e7d728be53caa090c9a63c69de693128cf293b4ce49fbd20",
          "withoutMetadata": "e213646b1abd3df7e7d728be53caa090c9a63c69de693128cf293b4ce49fbd20",
          "linkedWithoutMetadata": "e213646b1abd3df7e7d728be53caa090c9a63c69de693128cf293b4ce49fbd20"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactory",
            "src": "contracts\\FantomNFTFactory.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactory",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:14"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:17"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:20"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactory.sol:23"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactory.sol:26"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTFactory.sol:29"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomNFTFactory.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactoryPrivate": {
        "src": "contracts\\FantomNFTFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "0487dd72b4e58be01c1984618c03964b3fc492482cd0f62a547d06f73a35fc03",
          "withoutMetadata": "0487dd72b4e58be01c1984618c03964b3fc492482cd0f62a547d06f73a35fc03",
          "linkedWithoutMetadata": "0487dd72b4e58be01c1984618c03964b3fc492482cd0f62a547d06f73a35fc03"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactoryPrivate",
            "src": "contracts\\FantomNFTFactoryPrivate.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:29"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradable": {
        "src": "contracts\\FantomNFTTradable.sol:12",
        "version": {
          "withMetadata": "ebfb5cde50fd0230e1a40f125d277ad1fe7691d898ff9f8097916e9378446acb",
          "withoutMetadata": "ebfb5cde50fd0230e1a40f125d277ad1fe7691d898ff9f8097916e9378446acb",
          "linkedWithoutMetadata": "ebfb5cde50fd0230e1a40f125d277ad1fe7691d898ff9f8097916e9378446acb"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradable",
            "src": "contracts\\FantomNFTTradable.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts\\FantomNFTTradable.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradable",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:27"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:28"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:29"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradable.sol:30"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradable.sol:33"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTTradable.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradablePrivate": {
        "src": "contracts\\FantomNFTTradablePrivate.sol:12",
        "version": {
          "withMetadata": "8ac05d68d3c513b9b21725d149d1f1bb0045563abbb7908621d92d8939e5182f",
          "withoutMetadata": "8ac05d68d3c513b9b21725d149d1f1bb0045563abbb7908621d92d8939e5182f",
          "linkedWithoutMetadata": "8ac05d68d3c513b9b21725d149d1f1bb0045563abbb7908621d92d8939e5182f"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradablePrivate",
            "src": "contracts\\FantomNFTTradablePrivate.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts\\FantomNFTTradablePrivate.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:27"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:28"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:29"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradablePrivate.sol:30"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradablePrivate.sol:33"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTTradablePrivate.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomPriceFeed": {
        "src": "contracts\\FantomPriceFeed.sol:21",
        "version": {
          "withMetadata": "2179f4724517738e1fb353bf1cb098d7a0480bddecf6b18e59184405ea804515",
          "withoutMetadata": "2179f4724517738e1fb353bf1cb098d7a0480bddecf6b18e59184405ea804515",
          "linkedWithoutMetadata": "2179f4724517738e1fb353bf1cb098d7a0480bddecf6b18e59184405ea804515"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerOracle(address,address)",
          "updateOracle(address,address)",
          "getPrice(address)",
          "updateAddressRegistry(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomPriceFeed",
            "src": "contracts\\FantomPriceFeed.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomPriceFeed",
              "label": "oracles",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts\\FantomPriceFeed.sol:23"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "addressRegistry",
              "type": "t_address",
              "src": "contracts\\FantomPriceFeed.sol:26"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "wFTM",
              "type": "t_address",
              "src": "contracts\\FantomPriceFeed.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IOracle": {
        "src": "contracts\\FantomPriceFeed.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestAnswer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomTokenRegistry": {
        "src": "contracts\\FantomTokenRegistry.sol:7",
        "version": {
          "withMetadata": "f557aeb9df5f2a6d4d41c6ed338fe625912760f47b04da7f88e543b786055f16",
          "withoutMetadata": "f557aeb9df5f2a6d4d41c6ed338fe625912760f47b04da7f88e543b786055f16",
          "linkedWithoutMetadata": "f557aeb9df5f2a6d4d41c6ed338fe625912760f47b04da7f88e543b786055f16"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "add(address)",
          "remove(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomTokenRegistry",
              "label": "enabled",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomTokenRegistry.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155": {
        "src": "contracts\\library\\ERC1155.sol:11",
        "version": {
          "withMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "withoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "linkedWithoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48"
        },
        "inherit": [
          "IERC165"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155",
              "label": "balances",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts\\library\\ERC1155.sol:25"
            },
            {
              "contract": "ERC1155",
              "label": "operators",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts\\library\\ERC1155.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155Metadata": {
        "src": "contracts\\library\\ERC1155Metadata.sol:9",
        "version": {
          "withMetadata": "51a5cd7d489c53959de1b4b946e542c6c132199cdb9fc8ee5b161d795330bc09",
          "withoutMetadata": "51a5cd7d489c53959de1b4b946e542c6c132199cdb9fc8ee5b161d795330bc09",
          "linkedWithoutMetadata": "51a5cd7d489c53959de1b4b946e542c6c132199cdb9fc8ee5b161d795330bc09"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155Metadata",
              "label": "baseMetadataURI",
              "type": "t_string_storage",
              "src": "contracts\\library\\ERC1155Metadata.sol:12"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155MintBurn": {
        "src": "contracts\\library\\ERC1155MintBurn.sol:9",
        "version": {
          "withMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "withoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "linkedWithoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48"
        },
        "inherit": [
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155TokenReceiver": {
        "src": "contracts\\library\\IERC1155TokenReceiver.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BiddingContractMock": {
        "src": "contracts\\mock\\BiddingContractMock.sol:7",
        "version": {
          "withMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a",
          "withoutMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a",
          "linkedWithoutMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "bid(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BiddingContractMock",
            "src": "contracts\\mock\\BiddingContractMock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BiddingContractMock",
              "label": "auctionContract",
              "type": "t_contract(FantomAuction)8471",
              "src": "contracts\\mock\\BiddingContractMock.sol:8"
            }
          ],
          "types": {
            "t_contract(FantomAuction)8471": {
              "label": "contract FantomAuction"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuctionMock": {
        "src": "contracts\\mock\\FantomAuctionMock.sol:7",
        "version": {
          "withMetadata": "fdd785b62bd3dbeff80b266d8be027fce6fce02f5aba2d3eb253346d53c7b0e1",
          "withoutMetadata": "fdd785b62bd3dbeff80b266d8be027fce6fce02f5aba2d3eb253346d53c7b0e1",
          "linkedWithoutMetadata": "fdd785b62bd3dbeff80b266d8be027fce6fce02f5aba2d3eb253346d53c7b0e1"
        },
        "inherit": [
          "FantomAuction",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "setNowOverride(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuctionMock",
              "label": "nowOverride",
              "type": "t_uint256",
              "src": "contracts\\mock\\FantomAuctionMock.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts\\mock\\MockERC20.sol:7",
        "version": {
          "withMetadata": "d825fed50e7322ed52c283c318628220344d5aca187c9dc3813d7f5889faf0a8",
          "withoutMetadata": "d825fed50e7322ed52c283c318628220344d5aca187c9dc3813d7f5889faf0a8",
          "linkedWithoutMetadata": "d825fed50e7322ed52c283c318628220344d5aca187c9dc3813d7f5889faf0a8"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts\\mock\\MockERC20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:340",
        "version": {
          "withMetadata": "23df31985695cc4bc8d5f5dcb1401f4c9fc004973e533a48f50e2a20bb9a0308",
          "withoutMetadata": "23df31985695cc4bc8d5f5dcb1401f4c9fc004973e533a48f50e2a20bb9a0308",
          "linkedWithoutMetadata": "23df31985695cc4bc8d5f5dcb1401f4c9fc004973e533a48f50e2a20bb9a0308"
        },
        "inherit": [
          "UpgradeabilityProxy",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AdminUpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:350"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:428"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:46",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:264",
        "version": {
          "withMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298",
          "withoutMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298",
          "linkedWithoutMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298"
        },
        "inherit": [
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:273"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:277"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyAdmin": {
        "src": "contracts\\proxy\\ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "1656613df43ea9c96983bb3f81976ece2e279af8f162749eb5e29c655a156ea8",
          "withoutMetadata": "1656613df43ea9c96983bb3f81976ece2e279af8f162749eb5e29c655a156ea8",
          "linkedWithoutMetadata": "1656613df43ea9c96983bb3f81976ece2e279af8f162749eb5e29c655a156ea8"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\math\\SafeMath.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165",
            "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC165",
              "label": "_supportedInterfaces",
              "type": "t_mapping(t_bytes4,t_bool)",
              "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "contracts\\library\\IERC165.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155": {
        "src": "@openzeppelin\\contracts\\token\\ERC1155\\IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "allowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\SafeERC20.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:21",
        "version": {
          "withMetadata": "8dd4924f7080b28673c12e2814297ba24304de217db52581284f10f3e0fdae07",
          "withoutMetadata": "8dd4924f7080b28673c12e2814297ba24304de217db52581284f10f3e0fdae07",
          "linkedWithoutMetadata": "8dd4924f7080b28673c12e2814297ba24304de217db52581284f10f3e0fdae07"
        },
        "inherit": [
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address",
          "EnumerableSet",
          "EnumerableMap",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "baseURI()",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:93"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_holderTokens",
              "type": "t_mapping(t_address,t_struct(UintSet)4679_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenOwners",
              "type": "t_struct(UintToAddressMap)4056_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:42"
            },
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:45"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:48"
            },
            {
              "contract": "ERC721",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:51"
            },
            {
              "contract": "ERC721",
              "label": "_baseURI",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(UintSet)4679_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UintSet)4679_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4293_storage"
                }
              ]
            },
            "t_struct(Set)4293_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(UintToAddressMap)4056_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)3738_storage"
                }
              ]
            },
            "t_struct(Map)3738_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)3730_storage)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_struct(MapEntry)3730_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]"
            },
            "t_struct(MapEntry)3730_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Enumerable.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:118",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableMap": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableMap.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableSet.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:8",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomAddressRegistry": {
        "src": "contracts\\FantomAddressRegistry.sol:8",
        "version": {
          "withMetadata": "76d1b9dc0da2d978cc59139b9224ff1063a564d2e103e5b8c53ddf92f35c6017",
          "withoutMetadata": "76d1b9dc0da2d978cc59139b9224ff1063a564d2e103e5b8c53ddf92f35c6017",
          "linkedWithoutMetadata": "76d1b9dc0da2d978cc59139b9224ff1063a564d2e103e5b8c53ddf92f35c6017"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "updateArtion(address)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateNFTFactory(address)",
          "updateNFTFactoryPrivate(address)",
          "updateArtFactory(address)",
          "updateArtFactoryPrivate(address)",
          "updateTokenRegistry(address)",
          "updatePriceFeed(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAddressRegistry",
              "label": "artion",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:12"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:15"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:18"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:21"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "factory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:24"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:27"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "artFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:30"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateArtFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:33"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "tokenRegistry",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:36"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "priceFeed",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactory": {
        "src": "contracts\\FantomArtFactory.sol:8",
        "version": {
          "withMetadata": "d4a1e964c791a23f412a86709671395f44dddf562aa57580730cf93eff3fd50d",
          "withoutMetadata": "d4a1e964c791a23f412a86709671395f44dddf562aa57580730cf93eff3fd50d",
          "linkedWithoutMetadata": "d4a1e964c791a23f412a86709671395f44dddf562aa57580730cf93eff3fd50d"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactory",
            "src": "contracts\\FantomArtFactory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactory.sol:14"
            },
            {
              "contract": "FantomArtFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactory.sol:17"
            },
            {
              "contract": "FantomArtFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactory.sol:20"
            },
            {
              "contract": "FantomArtFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactory.sol:23"
            },
            {
              "contract": "FantomArtFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtFactory.sol:26"
            },
            {
              "contract": "FantomArtFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomArtFactory.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactoryPrivate": {
        "src": "contracts\\FantomArtFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "e0fdcfb3b16f76fdbd409fb98de3b38f5c3677f2d8b853cdb1097f3798031304",
          "withoutMetadata": "e0fdcfb3b16f76fdbd409fb98de3b38f5c3677f2d8b853cdb1097f3798031304",
          "linkedWithoutMetadata": "e0fdcfb3b16f76fdbd409fb98de3b38f5c3677f2d8b853cdb1097f3798031304"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactoryPrivate",
            "src": "contracts\\FantomArtFactoryPrivate.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomArtFactoryPrivate.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradable": {
        "src": "contracts\\FantomArtTradable.sol:22",
        "version": {
          "withMetadata": "c0adcad2251cfbd3886a61e37e058f7be8a3b59616baad692cd6d6e457da1bf7",
          "withoutMetadata": "c0adcad2251cfbd3886a61e37e058f7be8a3b59616baad692cd6d6e457da1bf7",
          "linkedWithoutMetadata": "c0adcad2251cfbd3886a61e37e058f7be8a3b59616baad692cd6d6e457da1bf7"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradable",
            "src": "contracts\\FantomArtTradable.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts\\FantomArtTradable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradable",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradable.sol:28"
            },
            {
              "contract": "FantomArtTradable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts\\FantomArtTradable.sol:31"
            },
            {
              "contract": "FantomArtTradable",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtTradable.sol:33"
            },
            {
              "contract": "FantomArtTradable",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\FantomArtTradable.sol:34"
            },
            {
              "contract": "FantomArtTradable",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradable.sol:37"
            },
            {
              "contract": "FantomArtTradable",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradable.sol:39"
            },
            {
              "contract": "FantomArtTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradable.sol:41"
            },
            {
              "contract": "FantomArtTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtTradable.sol:43"
            },
            {
              "contract": "FantomArtTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradable.sol:45"
            },
            {
              "contract": "FantomArtTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradable.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "OwnableDelegateProxy": {
        "src": "contracts\\FantomArtTradablePrivate.sol:10",
        "version": {
          "withMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "withoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "linkedWithoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyRegistry": {
        "src": "contracts\\FantomArtTradablePrivate.sol:12",
        "version": {
          "withMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9",
          "withoutMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9",
          "linkedWithoutMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ProxyRegistry",
              "label": "proxies",
              "type": "t_mapping(t_address,t_contract(OwnableDelegateProxy)5923)",
              "src": "contracts\\FantomArtTradablePrivate.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_contract(OwnableDelegateProxy)5923)": {
              "label": "mapping(address => contract OwnableDelegateProxy)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(OwnableDelegateProxy)5923": {
              "label": "contract OwnableDelegateProxy"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradablePrivate": {
        "src": "contracts\\FantomArtTradablePrivate.sol:22",
        "version": {
          "withMetadata": "bf7b7baf73c8347bd6c9b943bd6327823ae43377e0e6c356a7e92d443525e201",
          "withoutMetadata": "bf7b7baf73c8347bd6c9b943bd6327823ae43377e0e6c356a7e92d443525e201",
          "linkedWithoutMetadata": "bf7b7baf73c8347bd6c9b943bd6327823ae43377e0e6c356a7e92d443525e201"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradablePrivate",
            "src": "contracts\\FantomArtTradablePrivate.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts\\FantomArtTradablePrivate.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradablePrivate.sol:28"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts\\FantomArtTradablePrivate.sol:31"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtTradablePrivate.sol:33"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\FantomArtTradablePrivate.sol:34"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradablePrivate.sol:37"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradablePrivate.sol:39"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradablePrivate.sol:41"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtTradablePrivate.sol:43"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradablePrivate.sol:45"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradablePrivate.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Artion": {
        "src": "contracts\\FantomArtion.sol:9",
        "version": {
          "withMetadata": "db5e7f93808806b87f44d6d9a0fcfc2c0e9c9f151cc1759d18a7854746c59ef8",
          "withoutMetadata": "db5e7f93808806b87f44d6d9a0fcfc2c0e9c9f151cc1759d18a7854746c59ef8",
          "linkedWithoutMetadata": "db5e7f93808806b87f44d6d9a0fcfc2c0e9c9f151cc1759d18a7854746c59ef8"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable,uint256)",
          "mint(address,string)",
          "burn(uint256)",
          "exists(uint256)",
          "isApproved(uint256,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Artion",
            "src": "contracts\\FantomArtion.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Artion",
              "label": "tokenIdPointer",
              "type": "t_uint256",
              "src": "contracts\\FantomArtion.sol:26"
            },
            {
              "contract": "Artion",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtion.sol:29"
            },
            {
              "contract": "Artion",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtion.sol:32"
            },
            {
              "contract": "Artion",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtion.sol:35"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuction": {
        "src": "contracts\\FantomAuction.sol:55",
        "version": {
          "withMetadata": "19513f8a3837450037736bded6fd45eeccb28988ed437815908e9ca056eadc1c",
          "withoutMetadata": "19513f8a3837450037736bded6fd45eeccb28988ed437815908e9ca056eadc1c",
          "linkedWithoutMetadata": "19513f8a3837450037736bded6fd45eeccb28988ed437815908e9ca056eadc1c"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable)",
          "createAuction(address,uint256,address,uint256,uint256,bool,uint256)",
          "placeBid(address,uint256)",
          "placeBid(address,uint256,uint256)",
          "withdrawBid(address,uint256)",
          "resultAuction(address,uint256)",
          "cancelAuction(address,uint256)",
          "toggleIsPaused()",
          "updateMinBidIncrement(uint256)",
          "updateBidWithdrawalLockTime(uint256)",
          "updateAuctionReservePrice(address,uint256,uint256)",
          "updateAuctionStartTime(address,uint256,uint256)",
          "updateAuctionEndTime(address,uint256,uint256)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "getAuction(address,uint256)",
          "getHighestBidder(address,uint256)",
          "reclaimERC20(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "minBidIncrement",
            "src": "contracts\\FantomAuction.sol:156"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bidWithdrawalLockTime",
            "src": "contracts\\FantomAuction.sol:159"
          },
          {
            "kind": "state-variable-assignment",
            "name": "platformFee",
            "src": "contracts\\FantomAuction.sol:162"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuction",
              "label": "auctions",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6732_storage))",
              "src": "contracts\\FantomAuction.sol:150"
            },
            {
              "contract": "FantomAuction",
              "label": "highestBids",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6739_storage))",
              "src": "contracts\\FantomAuction.sol:153"
            },
            {
              "contract": "FantomAuction",
              "label": "minBidIncrement",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:156"
            },
            {
              "contract": "FantomAuction",
              "label": "bidWithdrawalLockTime",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:159"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:162"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFeeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomAuction.sol:165"
            },
            {
              "contract": "FantomAuction",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)6539",
              "src": "contracts\\FantomAuction.sol:168"
            },
            {
              "contract": "FantomAuction",
              "label": "isPaused",
              "type": "t_bool",
              "src": "contracts\\FantomAuction.sol:171"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6732_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.Auction))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(Auction)6732_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.Auction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Auction)6732_storage": {
              "label": "struct FantomAuction.Auction",
              "members": [
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "minBid",
                  "type": "t_uint256"
                },
                {
                  "label": "reservePrice",
                  "type": "t_uint256"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256"
                },
                {
                  "label": "resulted",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6739_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.HighestBid))"
            },
            "t_mapping(t_uint256,t_struct(HighestBid)6739_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.HighestBid)"
            },
            "t_struct(HighestBid)6739_storage": {
              "label": "struct FantomAuction.HighestBid",
              "members": [
                {
                  "label": "bidder",
                  "type": "t_address_payable"
                },
                {
                  "label": "bid",
                  "type": "t_uint256"
                },
                {
                  "label": "lastBidTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)6539": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAddressRegistry": {
        "src": "contracts\\FantomPriceFeed.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenRegistry()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomBundleMarketplace": {
        "src": "contracts\\FantomMarketplace.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,address,address)",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomTokenRegistry": {
        "src": "contracts\\FantomPriceFeed.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enabled(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomBundleMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:39",
        "version": {
          "withMetadata": "799fbd51d29c85719d4442f9b1abe166ef22751846c662130b29731ef95365e3",
          "withoutMetadata": "799fbd51d29c85719d4442f9b1abe166ef22751846c662130b29731ef95365e3",
          "linkedWithoutMetadata": "799fbd51d29c85719d4442f9b1abe166ef22751846c662130b29731ef95365e3"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20",
          "EnumerableSet"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "getListing(address,string)",
          "listItem(string,address[],uint256[],uint256[],address,uint256,uint256)",
          "cancelListing(string)",
          "updateListing(string,address,uint256)",
          "buyItem(string)",
          "buyItem(string,address)",
          "createOffer(string,address,uint256,uint256)",
          "cancelOffer(string)",
          "acceptOffer(string,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomBundleMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8636_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:106"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "owners",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts\\FantomBundleMarketplace.sol:109"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIdsPerItem",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4473_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:111"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "nftIndexes",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))",
              "src": "contracts\\FantomBundleMarketplace.sol:113"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIds",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "src": "contracts\\FantomBundleMarketplace.sol:115"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "offers",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8643_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:118"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomBundleMarketplace.sol:121"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomBundleMarketplace.sol:124"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)8499",
              "src": "contracts\\FantomBundleMarketplace.sol:127"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8636_storage))": {
              "label": "mapping(address => mapping(bytes32 => struct FantomBundleMarketplace.Listing))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_struct(Listing)8636_storage)": {
              "label": "mapping(bytes32 => struct FantomBundleMarketplace.Listing)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Listing)8636_storage": {
              "label": "struct FantomBundleMarketplace.Listing",
              "members": [
                {
                  "label": "nfts",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "tokenIds",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "quantities",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4473_storage))": {
              "label": "mapping(address => mapping(uint256 => struct EnumerableSet.Bytes32Set))"
            },
            "t_mapping(t_uint256,t_struct(Bytes32Set)4473_storage)": {
              "label": "mapping(uint256 => struct EnumerableSet.Bytes32Set)"
            },
            "t_struct(Bytes32Set)4473_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4293_storage"
                }
              ]
            },
            "t_struct(Set)4293_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
              "label": "mapping(bytes32 => mapping(address => mapping(uint256 => uint256)))"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8643_storage))": {
              "label": "mapping(bytes32 => mapping(address => struct FantomBundleMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)8643_storage)": {
              "label": "mapping(address => struct FantomBundleMarketplace.Offer)"
            },
            "t_struct(Offer)8643_storage": {
              "label": "struct FantomBundleMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)8499": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomMarketplace": {
        "src": "contracts\\FantomMarketplace.sol:71",
        "version": {
          "withMetadata": "f59cf2f57630405672c7081ae743b97f6b2aea7058d8bcd94b62f66298b0e2f0",
          "withoutMetadata": "f59cf2f57630405672c7081ae743b97f6b2aea7058d8bcd94b62f66298b0e2f0",
          "linkedWithoutMetadata": "f59cf2f57630405672c7081ae743b97f6b2aea7058d8bcd94b62f66298b0e2f0"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable,uint16)",
          "listItem(address,uint256,uint256,address,uint256,uint256)",
          "cancelListing(address,uint256)",
          "updateListing(address,uint256,address,uint256)",
          "buyItem(address,uint256,address,address)",
          "createOffer(address,uint256,address,uint256,uint256,uint256)",
          "cancelOffer(address,uint256)",
          "acceptOffer(address,uint256,address)",
          "registerRoyalty(address,uint256,uint16)",
          "registerCollectionRoyalty(address,address,uint16,address)",
          "getPrice(address)",
          "updatePlatformFee(uint16)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomMarketplace",
              "label": "minters",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
              "src": "contracts\\FantomMarketplace.sol:151"
            },
            {
              "contract": "FantomMarketplace",
              "label": "royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint16))",
              "src": "contracts\\FantomMarketplace.sol:154"
            },
            {
              "contract": "FantomMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10840_storage)))",
              "src": "contracts\\FantomMarketplace.sol:157"
            },
            {
              "contract": "FantomMarketplace",
              "label": "offers",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10849_storage)))",
              "src": "contracts\\FantomMarketplace.sol:161"
            },
            {
              "contract": "FantomMarketplace",
              "label": "platformFee",
              "type": "t_uint16",
              "src": "contracts\\FantomMarketplace.sol:165"
            },
            {
              "contract": "FantomMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomMarketplace.sol:168"
            },
            {
              "contract": "FantomMarketplace",
              "label": "collectionRoyalties",
              "type": "t_mapping(t_address,t_struct(CollectionRoyalty)10856_storage)",
              "src": "contracts\\FantomMarketplace.sol:171"
            },
            {
              "contract": "FantomMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)10670",
              "src": "contracts\\FantomMarketplace.sol:174"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
              "label": "mapping(address => mapping(uint256 => address))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint16))": {
              "label": "mapping(address => mapping(uint256 => uint16))"
            },
            "t_mapping(t_uint256,t_uint16)": {
              "label": "mapping(uint256 => uint16)"
            },
            "t_uint16": {
              "label": "uint16"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10840_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Listing)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10840_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Listing))"
            },
            "t_mapping(t_address,t_struct(Listing)10840_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Listing)"
            },
            "t_struct(Listing)10840_storage": {
              "label": "struct FantomMarketplace.Listing",
              "members": [
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10849_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Offer)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10849_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)10849_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Offer)"
            },
            "t_struct(Offer)10849_storage": {
              "label": "struct FantomMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_struct(CollectionRoyalty)10856_storage)": {
              "label": "mapping(address => struct FantomMarketplace.CollectionRoyalty)"
            },
            "t_struct(CollectionRoyalty)10856_storage": {
              "label": "struct FantomMarketplace.CollectionRoyalty",
              "members": [
                {
                  "label": "royalty",
                  "type": "t_uint16"
                },
                {
                  "label": "creator",
                  "type": "t_address"
                },
                {
                  "label": "feeRecipient",
                  "type": "t_address"
                }
              ]
            },
            "t_contract(IFantomAddressRegistry)10670": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAuction": {
        "src": "contracts\\FantomMarketplace.sol:35",
        "inherit": [],
        "libraries": [],
        "methods": [
          "auctions(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomNFTFactory": {
        "src": "contracts\\FantomMarketplace.sol:57",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exists(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomPriceFeed": {
        "src": "contracts\\FantomMarketplace.sol:65",
        "inherit": [],
        "libraries": [],
        "methods": [
          "wFTM()",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactory": {
        "src": "contracts\\FantomNFTFactory.sol:8",
        "version": {
          "withMetadata": "e213646b1abd3df7e7d728be53caa090c9a63c69de693128cf293b4ce49fbd20",
          "withoutMetadata": "e213646b1abd3df7e7d728be53caa090c9a63c69de693128cf293b4ce49fbd20",
          "linkedWithoutMetadata": "e213646b1abd3df7e7d728be53caa090c9a63c69de693128cf293b4ce49fbd20"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactory",
            "src": "contracts\\FantomNFTFactory.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactory",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:14"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:17"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:20"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactory.sol:23"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactory.sol:26"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTFactory.sol:29"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomNFTFactory.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactoryPrivate": {
        "src": "contracts\\FantomNFTFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "0487dd72b4e58be01c1984618c03964b3fc492482cd0f62a547d06f73a35fc03",
          "withoutMetadata": "0487dd72b4e58be01c1984618c03964b3fc492482cd0f62a547d06f73a35fc03",
          "linkedWithoutMetadata": "0487dd72b4e58be01c1984618c03964b3fc492482cd0f62a547d06f73a35fc03"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactoryPrivate",
            "src": "contracts\\FantomNFTFactoryPrivate.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:29"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradable": {
        "src": "contracts\\FantomNFTTradable.sol:12",
        "version": {
          "withMetadata": "ebfb5cde50fd0230e1a40f125d277ad1fe7691d898ff9f8097916e9378446acb",
          "withoutMetadata": "ebfb5cde50fd0230e1a40f125d277ad1fe7691d898ff9f8097916e9378446acb",
          "linkedWithoutMetadata": "ebfb5cde50fd0230e1a40f125d277ad1fe7691d898ff9f8097916e9378446acb"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradable",
            "src": "contracts\\FantomNFTTradable.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts\\FantomNFTTradable.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradable",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:27"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:28"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:29"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradable.sol:30"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradable.sol:33"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTTradable.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradablePrivate": {
        "src": "contracts\\FantomNFTTradablePrivate.sol:12",
        "version": {
          "withMetadata": "8ac05d68d3c513b9b21725d149d1f1bb0045563abbb7908621d92d8939e5182f",
          "withoutMetadata": "8ac05d68d3c513b9b21725d149d1f1bb0045563abbb7908621d92d8939e5182f",
          "linkedWithoutMetadata": "8ac05d68d3c513b9b21725d149d1f1bb0045563abbb7908621d92d8939e5182f"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradablePrivate",
            "src": "contracts\\FantomNFTTradablePrivate.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts\\FantomNFTTradablePrivate.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:27"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:28"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:29"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradablePrivate.sol:30"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradablePrivate.sol:33"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTTradablePrivate.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomPriceFeed": {
        "src": "contracts\\FantomPriceFeed.sol:21",
        "version": {
          "withMetadata": "2179f4724517738e1fb353bf1cb098d7a0480bddecf6b18e59184405ea804515",
          "withoutMetadata": "2179f4724517738e1fb353bf1cb098d7a0480bddecf6b18e59184405ea804515",
          "linkedWithoutMetadata": "2179f4724517738e1fb353bf1cb098d7a0480bddecf6b18e59184405ea804515"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerOracle(address,address)",
          "updateOracle(address,address)",
          "getPrice(address)",
          "updateAddressRegistry(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomPriceFeed",
            "src": "contracts\\FantomPriceFeed.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomPriceFeed",
              "label": "oracles",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts\\FantomPriceFeed.sol:23"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "addressRegistry",
              "type": "t_address",
              "src": "contracts\\FantomPriceFeed.sol:26"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "wFTM",
              "type": "t_address",
              "src": "contracts\\FantomPriceFeed.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IOracle": {
        "src": "contracts\\FantomPriceFeed.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestAnswer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomTokenRegistry": {
        "src": "contracts\\FantomTokenRegistry.sol:7",
        "version": {
          "withMetadata": "f557aeb9df5f2a6d4d41c6ed338fe625912760f47b04da7f88e543b786055f16",
          "withoutMetadata": "f557aeb9df5f2a6d4d41c6ed338fe625912760f47b04da7f88e543b786055f16",
          "linkedWithoutMetadata": "f557aeb9df5f2a6d4d41c6ed338fe625912760f47b04da7f88e543b786055f16"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "add(address)",
          "remove(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomTokenRegistry",
              "label": "enabled",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomTokenRegistry.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155": {
        "src": "contracts\\library\\ERC1155.sol:11",
        "version": {
          "withMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "withoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "linkedWithoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48"
        },
        "inherit": [
          "IERC165"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155",
              "label": "balances",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts\\library\\ERC1155.sol:25"
            },
            {
              "contract": "ERC1155",
              "label": "operators",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts\\library\\ERC1155.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155Metadata": {
        "src": "contracts\\library\\ERC1155Metadata.sol:9",
        "version": {
          "withMetadata": "51a5cd7d489c53959de1b4b946e542c6c132199cdb9fc8ee5b161d795330bc09",
          "withoutMetadata": "51a5cd7d489c53959de1b4b946e542c6c132199cdb9fc8ee5b161d795330bc09",
          "linkedWithoutMetadata": "51a5cd7d489c53959de1b4b946e542c6c132199cdb9fc8ee5b161d795330bc09"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155Metadata",
              "label": "baseMetadataURI",
              "type": "t_string_storage",
              "src": "contracts\\library\\ERC1155Metadata.sol:12"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155MintBurn": {
        "src": "contracts\\library\\ERC1155MintBurn.sol:9",
        "version": {
          "withMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "withoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "linkedWithoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48"
        },
        "inherit": [
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155TokenReceiver": {
        "src": "contracts\\library\\IERC1155TokenReceiver.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BiddingContractMock": {
        "src": "contracts\\mock\\BiddingContractMock.sol:7",
        "version": {
          "withMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a",
          "withoutMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a",
          "linkedWithoutMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "bid(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BiddingContractMock",
            "src": "contracts\\mock\\BiddingContractMock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BiddingContractMock",
              "label": "auctionContract",
              "type": "t_contract(FantomAuction)8471",
              "src": "contracts\\mock\\BiddingContractMock.sol:8"
            }
          ],
          "types": {
            "t_contract(FantomAuction)8471": {
              "label": "contract FantomAuction"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuctionMock": {
        "src": "contracts\\mock\\FantomAuctionMock.sol:7",
        "version": {
          "withMetadata": "fdd785b62bd3dbeff80b266d8be027fce6fce02f5aba2d3eb253346d53c7b0e1",
          "withoutMetadata": "fdd785b62bd3dbeff80b266d8be027fce6fce02f5aba2d3eb253346d53c7b0e1",
          "linkedWithoutMetadata": "fdd785b62bd3dbeff80b266d8be027fce6fce02f5aba2d3eb253346d53c7b0e1"
        },
        "inherit": [
          "FantomAuction",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "setNowOverride(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuctionMock",
              "label": "nowOverride",
              "type": "t_uint256",
              "src": "contracts\\mock\\FantomAuctionMock.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts\\mock\\MockERC20.sol:7",
        "version": {
          "withMetadata": "d825fed50e7322ed52c283c318628220344d5aca187c9dc3813d7f5889faf0a8",
          "withoutMetadata": "d825fed50e7322ed52c283c318628220344d5aca187c9dc3813d7f5889faf0a8",
          "linkedWithoutMetadata": "d825fed50e7322ed52c283c318628220344d5aca187c9dc3813d7f5889faf0a8"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts\\mock\\MockERC20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:340",
        "version": {
          "withMetadata": "23df31985695cc4bc8d5f5dcb1401f4c9fc004973e533a48f50e2a20bb9a0308",
          "withoutMetadata": "23df31985695cc4bc8d5f5dcb1401f4c9fc004973e533a48f50e2a20bb9a0308",
          "linkedWithoutMetadata": "23df31985695cc4bc8d5f5dcb1401f4c9fc004973e533a48f50e2a20bb9a0308"
        },
        "inherit": [
          "UpgradeabilityProxy",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AdminUpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:350"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:428"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:46",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:264",
        "version": {
          "withMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298",
          "withoutMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298",
          "linkedWithoutMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298"
        },
        "inherit": [
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:273"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:277"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyAdmin": {
        "src": "contracts\\proxy\\ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "1656613df43ea9c96983bb3f81976ece2e279af8f162749eb5e29c655a156ea8",
          "withoutMetadata": "1656613df43ea9c96983bb3f81976ece2e279af8f162749eb5e29c655a156ea8",
          "linkedWithoutMetadata": "1656613df43ea9c96983bb3f81976ece2e279af8f162749eb5e29c655a156ea8"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\math\\SafeMath.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165",
            "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC165",
              "label": "_supportedInterfaces",
              "type": "t_mapping(t_bytes4,t_bool)",
              "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "contracts\\library\\IERC165.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155": {
        "src": "@openzeppelin\\contracts\\token\\ERC1155\\IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "allowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\SafeERC20.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:21",
        "version": {
          "withMetadata": "8dd4924f7080b28673c12e2814297ba24304de217db52581284f10f3e0fdae07",
          "withoutMetadata": "8dd4924f7080b28673c12e2814297ba24304de217db52581284f10f3e0fdae07",
          "linkedWithoutMetadata": "8dd4924f7080b28673c12e2814297ba24304de217db52581284f10f3e0fdae07"
        },
        "inherit": [
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address",
          "EnumerableSet",
          "EnumerableMap",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "baseURI()",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:93"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_holderTokens",
              "type": "t_mapping(t_address,t_struct(UintSet)4679_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenOwners",
              "type": "t_struct(UintToAddressMap)4056_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:42"
            },
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:45"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:48"
            },
            {
              "contract": "ERC721",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:51"
            },
            {
              "contract": "ERC721",
              "label": "_baseURI",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(UintSet)4679_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UintSet)4679_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4293_storage"
                }
              ]
            },
            "t_struct(Set)4293_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(UintToAddressMap)4056_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)3738_storage"
                }
              ]
            },
            "t_struct(Map)3738_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)3730_storage)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_struct(MapEntry)3730_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]"
            },
            "t_struct(MapEntry)3730_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Enumerable.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:118",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableMap": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableMap.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableSet.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:8",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomAddressRegistry": {
        "src": "contracts\\FantomAddressRegistry.sol:8",
        "version": {
          "withMetadata": "76d1b9dc0da2d978cc59139b9224ff1063a564d2e103e5b8c53ddf92f35c6017",
          "withoutMetadata": "76d1b9dc0da2d978cc59139b9224ff1063a564d2e103e5b8c53ddf92f35c6017",
          "linkedWithoutMetadata": "76d1b9dc0da2d978cc59139b9224ff1063a564d2e103e5b8c53ddf92f35c6017"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "updateArtion(address)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateNFTFactory(address)",
          "updateNFTFactoryPrivate(address)",
          "updateArtFactory(address)",
          "updateArtFactoryPrivate(address)",
          "updateTokenRegistry(address)",
          "updatePriceFeed(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAddressRegistry",
              "label": "artion",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:12"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:15"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:18"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:21"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "factory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:24"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:27"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "artFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:30"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateArtFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:33"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "tokenRegistry",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:36"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "priceFeed",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactory": {
        "src": "contracts\\FantomArtFactory.sol:8",
        "version": {
          "withMetadata": "d4a1e964c791a23f412a86709671395f44dddf562aa57580730cf93eff3fd50d",
          "withoutMetadata": "d4a1e964c791a23f412a86709671395f44dddf562aa57580730cf93eff3fd50d",
          "linkedWithoutMetadata": "d4a1e964c791a23f412a86709671395f44dddf562aa57580730cf93eff3fd50d"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactory",
            "src": "contracts\\FantomArtFactory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactory.sol:14"
            },
            {
              "contract": "FantomArtFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactory.sol:17"
            },
            {
              "contract": "FantomArtFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactory.sol:20"
            },
            {
              "contract": "FantomArtFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactory.sol:23"
            },
            {
              "contract": "FantomArtFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtFactory.sol:26"
            },
            {
              "contract": "FantomArtFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomArtFactory.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactoryPrivate": {
        "src": "contracts\\FantomArtFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "e0fdcfb3b16f76fdbd409fb98de3b38f5c3677f2d8b853cdb1097f3798031304",
          "withoutMetadata": "e0fdcfb3b16f76fdbd409fb98de3b38f5c3677f2d8b853cdb1097f3798031304",
          "linkedWithoutMetadata": "e0fdcfb3b16f76fdbd409fb98de3b38f5c3677f2d8b853cdb1097f3798031304"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactoryPrivate",
            "src": "contracts\\FantomArtFactoryPrivate.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomArtFactoryPrivate.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradable": {
        "src": "contracts\\FantomArtTradable.sol:22",
        "version": {
          "withMetadata": "c0adcad2251cfbd3886a61e37e058f7be8a3b59616baad692cd6d6e457da1bf7",
          "withoutMetadata": "c0adcad2251cfbd3886a61e37e058f7be8a3b59616baad692cd6d6e457da1bf7",
          "linkedWithoutMetadata": "c0adcad2251cfbd3886a61e37e058f7be8a3b59616baad692cd6d6e457da1bf7"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradable",
            "src": "contracts\\FantomArtTradable.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts\\FantomArtTradable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradable",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradable.sol:28"
            },
            {
              "contract": "FantomArtTradable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts\\FantomArtTradable.sol:31"
            },
            {
              "contract": "FantomArtTradable",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtTradable.sol:33"
            },
            {
              "contract": "FantomArtTradable",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\FantomArtTradable.sol:34"
            },
            {
              "contract": "FantomArtTradable",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradable.sol:37"
            },
            {
              "contract": "FantomArtTradable",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradable.sol:39"
            },
            {
              "contract": "FantomArtTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradable.sol:41"
            },
            {
              "contract": "FantomArtTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtTradable.sol:43"
            },
            {
              "contract": "FantomArtTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradable.sol:45"
            },
            {
              "contract": "FantomArtTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradable.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "OwnableDelegateProxy": {
        "src": "contracts\\FantomArtTradablePrivate.sol:10",
        "version": {
          "withMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "withoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "linkedWithoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyRegistry": {
        "src": "contracts\\FantomArtTradablePrivate.sol:12",
        "version": {
          "withMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9",
          "withoutMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9",
          "linkedWithoutMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ProxyRegistry",
              "label": "proxies",
              "type": "t_mapping(t_address,t_contract(OwnableDelegateProxy)5923)",
              "src": "contracts\\FantomArtTradablePrivate.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_contract(OwnableDelegateProxy)5923)": {
              "label": "mapping(address => contract OwnableDelegateProxy)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(OwnableDelegateProxy)5923": {
              "label": "contract OwnableDelegateProxy"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradablePrivate": {
        "src": "contracts\\FantomArtTradablePrivate.sol:22",
        "version": {
          "withMetadata": "bf7b7baf73c8347bd6c9b943bd6327823ae43377e0e6c356a7e92d443525e201",
          "withoutMetadata": "bf7b7baf73c8347bd6c9b943bd6327823ae43377e0e6c356a7e92d443525e201",
          "linkedWithoutMetadata": "bf7b7baf73c8347bd6c9b943bd6327823ae43377e0e6c356a7e92d443525e201"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradablePrivate",
            "src": "contracts\\FantomArtTradablePrivate.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts\\FantomArtTradablePrivate.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradablePrivate.sol:28"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts\\FantomArtTradablePrivate.sol:31"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtTradablePrivate.sol:33"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\FantomArtTradablePrivate.sol:34"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradablePrivate.sol:37"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradablePrivate.sol:39"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradablePrivate.sol:41"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtTradablePrivate.sol:43"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradablePrivate.sol:45"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradablePrivate.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Artion": {
        "src": "contracts\\FantomArtion.sol:9",
        "version": {
          "withMetadata": "db5e7f93808806b87f44d6d9a0fcfc2c0e9c9f151cc1759d18a7854746c59ef8",
          "withoutMetadata": "db5e7f93808806b87f44d6d9a0fcfc2c0e9c9f151cc1759d18a7854746c59ef8",
          "linkedWithoutMetadata": "db5e7f93808806b87f44d6d9a0fcfc2c0e9c9f151cc1759d18a7854746c59ef8"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable,uint256)",
          "mint(address,string)",
          "burn(uint256)",
          "exists(uint256)",
          "isApproved(uint256,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Artion",
            "src": "contracts\\FantomArtion.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Artion",
              "label": "tokenIdPointer",
              "type": "t_uint256",
              "src": "contracts\\FantomArtion.sol:26"
            },
            {
              "contract": "Artion",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtion.sol:29"
            },
            {
              "contract": "Artion",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtion.sol:32"
            },
            {
              "contract": "Artion",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtion.sol:35"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuction": {
        "src": "contracts\\FantomAuction.sol:55",
        "version": {
          "withMetadata": "19513f8a3837450037736bded6fd45eeccb28988ed437815908e9ca056eadc1c",
          "withoutMetadata": "19513f8a3837450037736bded6fd45eeccb28988ed437815908e9ca056eadc1c",
          "linkedWithoutMetadata": "19513f8a3837450037736bded6fd45eeccb28988ed437815908e9ca056eadc1c"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable)",
          "createAuction(address,uint256,address,uint256,uint256,bool,uint256)",
          "placeBid(address,uint256)",
          "placeBid(address,uint256,uint256)",
          "withdrawBid(address,uint256)",
          "resultAuction(address,uint256)",
          "cancelAuction(address,uint256)",
          "toggleIsPaused()",
          "updateMinBidIncrement(uint256)",
          "updateBidWithdrawalLockTime(uint256)",
          "updateAuctionReservePrice(address,uint256,uint256)",
          "updateAuctionStartTime(address,uint256,uint256)",
          "updateAuctionEndTime(address,uint256,uint256)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "getAuction(address,uint256)",
          "getHighestBidder(address,uint256)",
          "reclaimERC20(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "minBidIncrement",
            "src": "contracts\\FantomAuction.sol:156"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bidWithdrawalLockTime",
            "src": "contracts\\FantomAuction.sol:159"
          },
          {
            "kind": "state-variable-assignment",
            "name": "platformFee",
            "src": "contracts\\FantomAuction.sol:162"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuction",
              "label": "auctions",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6732_storage))",
              "src": "contracts\\FantomAuction.sol:150"
            },
            {
              "contract": "FantomAuction",
              "label": "highestBids",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6739_storage))",
              "src": "contracts\\FantomAuction.sol:153"
            },
            {
              "contract": "FantomAuction",
              "label": "minBidIncrement",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:156"
            },
            {
              "contract": "FantomAuction",
              "label": "bidWithdrawalLockTime",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:159"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:162"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFeeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomAuction.sol:165"
            },
            {
              "contract": "FantomAuction",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)6539",
              "src": "contracts\\FantomAuction.sol:168"
            },
            {
              "contract": "FantomAuction",
              "label": "isPaused",
              "type": "t_bool",
              "src": "contracts\\FantomAuction.sol:171"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6732_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.Auction))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(Auction)6732_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.Auction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Auction)6732_storage": {
              "label": "struct FantomAuction.Auction",
              "members": [
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "minBid",
                  "type": "t_uint256"
                },
                {
                  "label": "reservePrice",
                  "type": "t_uint256"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256"
                },
                {
                  "label": "resulted",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6739_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.HighestBid))"
            },
            "t_mapping(t_uint256,t_struct(HighestBid)6739_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.HighestBid)"
            },
            "t_struct(HighestBid)6739_storage": {
              "label": "struct FantomAuction.HighestBid",
              "members": [
                {
                  "label": "bidder",
                  "type": "t_address_payable"
                },
                {
                  "label": "bid",
                  "type": "t_uint256"
                },
                {
                  "label": "lastBidTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)6539": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAddressRegistry": {
        "src": "contracts\\FantomPriceFeed.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenRegistry()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomBundleMarketplace": {
        "src": "contracts\\FantomMarketplace.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,address,address)",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomTokenRegistry": {
        "src": "contracts\\FantomPriceFeed.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enabled(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomBundleMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:39",
        "version": {
          "withMetadata": "799fbd51d29c85719d4442f9b1abe166ef22751846c662130b29731ef95365e3",
          "withoutMetadata": "799fbd51d29c85719d4442f9b1abe166ef22751846c662130b29731ef95365e3",
          "linkedWithoutMetadata": "799fbd51d29c85719d4442f9b1abe166ef22751846c662130b29731ef95365e3"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20",
          "EnumerableSet"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "getListing(address,string)",
          "listItem(string,address[],uint256[],uint256[],address,uint256,uint256)",
          "cancelListing(string)",
          "updateListing(string,address,uint256)",
          "buyItem(string)",
          "buyItem(string,address)",
          "createOffer(string,address,uint256,uint256)",
          "cancelOffer(string)",
          "acceptOffer(string,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomBundleMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8636_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:106"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "owners",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts\\FantomBundleMarketplace.sol:109"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIdsPerItem",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4473_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:111"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "nftIndexes",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))",
              "src": "contracts\\FantomBundleMarketplace.sol:113"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIds",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "src": "contracts\\FantomBundleMarketplace.sol:115"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "offers",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8643_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:118"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomBundleMarketplace.sol:121"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomBundleMarketplace.sol:124"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)8499",
              "src": "contracts\\FantomBundleMarketplace.sol:127"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8636_storage))": {
              "label": "mapping(address => mapping(bytes32 => struct FantomBundleMarketplace.Listing))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_struct(Listing)8636_storage)": {
              "label": "mapping(bytes32 => struct FantomBundleMarketplace.Listing)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Listing)8636_storage": {
              "label": "struct FantomBundleMarketplace.Listing",
              "members": [
                {
                  "label": "nfts",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "tokenIds",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "quantities",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4473_storage))": {
              "label": "mapping(address => mapping(uint256 => struct EnumerableSet.Bytes32Set))"
            },
            "t_mapping(t_uint256,t_struct(Bytes32Set)4473_storage)": {
              "label": "mapping(uint256 => struct EnumerableSet.Bytes32Set)"
            },
            "t_struct(Bytes32Set)4473_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4293_storage"
                }
              ]
            },
            "t_struct(Set)4293_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
              "label": "mapping(bytes32 => mapping(address => mapping(uint256 => uint256)))"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8643_storage))": {
              "label": "mapping(bytes32 => mapping(address => struct FantomBundleMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)8643_storage)": {
              "label": "mapping(address => struct FantomBundleMarketplace.Offer)"
            },
            "t_struct(Offer)8643_storage": {
              "label": "struct FantomBundleMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)8499": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomMarketplace": {
        "src": "contracts\\FantomMarketplace.sol:71",
        "version": {
          "withMetadata": "6ef4acef048198819f5b42ce2ab309c01813b5ad676177d98d5289b7d95b46cd",
          "withoutMetadata": "6ef4acef048198819f5b42ce2ab309c01813b5ad676177d98d5289b7d95b46cd",
          "linkedWithoutMetadata": "6ef4acef048198819f5b42ce2ab309c01813b5ad676177d98d5289b7d95b46cd"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "listItem(address,uint256,uint256,address,uint256,uint256)",
          "cancelListing(address,uint256)",
          "updateListing(address,uint256,address,uint256)",
          "buyItem(address,uint256,address,address)",
          "createOffer(address,uint256,address,uint256,uint256,uint256)",
          "cancelOffer(address,uint256)",
          "acceptOffer(address,uint256,address)",
          "registerRoyalty(address,uint256,uint16)",
          "registerCollectionRoyalty(address,address,uint16,address)",
          "getPrice(address)",
          "updatePlatformFee(uint16)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomMarketplace",
              "label": "minters",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
              "src": "contracts\\FantomMarketplace.sol:151"
            },
            {
              "contract": "FantomMarketplace",
              "label": "royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint16))",
              "src": "contracts\\FantomMarketplace.sol:154"
            },
            {
              "contract": "FantomMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10840_storage)))",
              "src": "contracts\\FantomMarketplace.sol:157"
            },
            {
              "contract": "FantomMarketplace",
              "label": "offers",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10849_storage)))",
              "src": "contracts\\FantomMarketplace.sol:161"
            },
            {
              "contract": "FantomMarketplace",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomMarketplace.sol:165"
            },
            {
              "contract": "FantomMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomMarketplace.sol:168"
            },
            {
              "contract": "FantomMarketplace",
              "label": "collectionRoyalties",
              "type": "t_mapping(t_address,t_struct(CollectionRoyalty)10856_storage)",
              "src": "contracts\\FantomMarketplace.sol:171"
            },
            {
              "contract": "FantomMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)10670",
              "src": "contracts\\FantomMarketplace.sol:174"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
              "label": "mapping(address => mapping(uint256 => address))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint16))": {
              "label": "mapping(address => mapping(uint256 => uint16))"
            },
            "t_mapping(t_uint256,t_uint16)": {
              "label": "mapping(uint256 => uint16)"
            },
            "t_uint16": {
              "label": "uint16"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10840_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Listing)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10840_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Listing))"
            },
            "t_mapping(t_address,t_struct(Listing)10840_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Listing)"
            },
            "t_struct(Listing)10840_storage": {
              "label": "struct FantomMarketplace.Listing",
              "members": [
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10849_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Offer)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10849_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)10849_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Offer)"
            },
            "t_struct(Offer)10849_storage": {
              "label": "struct FantomMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_struct(CollectionRoyalty)10856_storage)": {
              "label": "mapping(address => struct FantomMarketplace.CollectionRoyalty)"
            },
            "t_struct(CollectionRoyalty)10856_storage": {
              "label": "struct FantomMarketplace.CollectionRoyalty",
              "members": [
                {
                  "label": "royalty",
                  "type": "t_uint16"
                },
                {
                  "label": "creator",
                  "type": "t_address"
                },
                {
                  "label": "feeRecipient",
                  "type": "t_address"
                }
              ]
            },
            "t_contract(IFantomAddressRegistry)10670": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAuction": {
        "src": "contracts\\FantomMarketplace.sol:35",
        "inherit": [],
        "libraries": [],
        "methods": [
          "auctions(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomNFTFactory": {
        "src": "contracts\\FantomMarketplace.sol:57",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exists(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomPriceFeed": {
        "src": "contracts\\FantomMarketplace.sol:65",
        "inherit": [],
        "libraries": [],
        "methods": [
          "wFTM()",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactory": {
        "src": "contracts\\FantomNFTFactory.sol:8",
        "version": {
          "withMetadata": "e213646b1abd3df7e7d728be53caa090c9a63c69de693128cf293b4ce49fbd20",
          "withoutMetadata": "e213646b1abd3df7e7d728be53caa090c9a63c69de693128cf293b4ce49fbd20",
          "linkedWithoutMetadata": "e213646b1abd3df7e7d728be53caa090c9a63c69de693128cf293b4ce49fbd20"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactory",
            "src": "contracts\\FantomNFTFactory.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactory",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:14"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:17"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:20"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactory.sol:23"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactory.sol:26"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTFactory.sol:29"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomNFTFactory.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactoryPrivate": {
        "src": "contracts\\FantomNFTFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "0487dd72b4e58be01c1984618c03964b3fc492482cd0f62a547d06f73a35fc03",
          "withoutMetadata": "0487dd72b4e58be01c1984618c03964b3fc492482cd0f62a547d06f73a35fc03",
          "linkedWithoutMetadata": "0487dd72b4e58be01c1984618c03964b3fc492482cd0f62a547d06f73a35fc03"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactoryPrivate",
            "src": "contracts\\FantomNFTFactoryPrivate.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:29"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradable": {
        "src": "contracts\\FantomNFTTradable.sol:12",
        "version": {
          "withMetadata": "ebfb5cde50fd0230e1a40f125d277ad1fe7691d898ff9f8097916e9378446acb",
          "withoutMetadata": "ebfb5cde50fd0230e1a40f125d277ad1fe7691d898ff9f8097916e9378446acb",
          "linkedWithoutMetadata": "ebfb5cde50fd0230e1a40f125d277ad1fe7691d898ff9f8097916e9378446acb"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradable",
            "src": "contracts\\FantomNFTTradable.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts\\FantomNFTTradable.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradable",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:27"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:28"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:29"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradable.sol:30"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradable.sol:33"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTTradable.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradablePrivate": {
        "src": "contracts\\FantomNFTTradablePrivate.sol:12",
        "version": {
          "withMetadata": "8ac05d68d3c513b9b21725d149d1f1bb0045563abbb7908621d92d8939e5182f",
          "withoutMetadata": "8ac05d68d3c513b9b21725d149d1f1bb0045563abbb7908621d92d8939e5182f",
          "linkedWithoutMetadata": "8ac05d68d3c513b9b21725d149d1f1bb0045563abbb7908621d92d8939e5182f"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradablePrivate",
            "src": "contracts\\FantomNFTTradablePrivate.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts\\FantomNFTTradablePrivate.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:27"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:28"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:29"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradablePrivate.sol:30"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradablePrivate.sol:33"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTTradablePrivate.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomPriceFeed": {
        "src": "contracts\\FantomPriceFeed.sol:21",
        "version": {
          "withMetadata": "2179f4724517738e1fb353bf1cb098d7a0480bddecf6b18e59184405ea804515",
          "withoutMetadata": "2179f4724517738e1fb353bf1cb098d7a0480bddecf6b18e59184405ea804515",
          "linkedWithoutMetadata": "2179f4724517738e1fb353bf1cb098d7a0480bddecf6b18e59184405ea804515"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerOracle(address,address)",
          "updateOracle(address,address)",
          "getPrice(address)",
          "updateAddressRegistry(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomPriceFeed",
            "src": "contracts\\FantomPriceFeed.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomPriceFeed",
              "label": "oracles",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts\\FantomPriceFeed.sol:23"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "addressRegistry",
              "type": "t_address",
              "src": "contracts\\FantomPriceFeed.sol:26"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "wFTM",
              "type": "t_address",
              "src": "contracts\\FantomPriceFeed.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IOracle": {
        "src": "contracts\\FantomPriceFeed.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestAnswer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomTokenRegistry": {
        "src": "contracts\\FantomTokenRegistry.sol:7",
        "version": {
          "withMetadata": "f557aeb9df5f2a6d4d41c6ed338fe625912760f47b04da7f88e543b786055f16",
          "withoutMetadata": "f557aeb9df5f2a6d4d41c6ed338fe625912760f47b04da7f88e543b786055f16",
          "linkedWithoutMetadata": "f557aeb9df5f2a6d4d41c6ed338fe625912760f47b04da7f88e543b786055f16"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "add(address)",
          "remove(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomTokenRegistry",
              "label": "enabled",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomTokenRegistry.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155": {
        "src": "contracts\\library\\ERC1155.sol:11",
        "version": {
          "withMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "withoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "linkedWithoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48"
        },
        "inherit": [
          "IERC165"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155",
              "label": "balances",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts\\library\\ERC1155.sol:25"
            },
            {
              "contract": "ERC1155",
              "label": "operators",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts\\library\\ERC1155.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155Metadata": {
        "src": "contracts\\library\\ERC1155Metadata.sol:9",
        "version": {
          "withMetadata": "51a5cd7d489c53959de1b4b946e542c6c132199cdb9fc8ee5b161d795330bc09",
          "withoutMetadata": "51a5cd7d489c53959de1b4b946e542c6c132199cdb9fc8ee5b161d795330bc09",
          "linkedWithoutMetadata": "51a5cd7d489c53959de1b4b946e542c6c132199cdb9fc8ee5b161d795330bc09"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155Metadata",
              "label": "baseMetadataURI",
              "type": "t_string_storage",
              "src": "contracts\\library\\ERC1155Metadata.sol:12"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155MintBurn": {
        "src": "contracts\\library\\ERC1155MintBurn.sol:9",
        "version": {
          "withMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "withoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "linkedWithoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48"
        },
        "inherit": [
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155TokenReceiver": {
        "src": "contracts\\library\\IERC1155TokenReceiver.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BiddingContractMock": {
        "src": "contracts\\mock\\BiddingContractMock.sol:7",
        "version": {
          "withMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a",
          "withoutMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a",
          "linkedWithoutMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "bid(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BiddingContractMock",
            "src": "contracts\\mock\\BiddingContractMock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BiddingContractMock",
              "label": "auctionContract",
              "type": "t_contract(FantomAuction)8471",
              "src": "contracts\\mock\\BiddingContractMock.sol:8"
            }
          ],
          "types": {
            "t_contract(FantomAuction)8471": {
              "label": "contract FantomAuction"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuctionMock": {
        "src": "contracts\\mock\\FantomAuctionMock.sol:7",
        "version": {
          "withMetadata": "fdd785b62bd3dbeff80b266d8be027fce6fce02f5aba2d3eb253346d53c7b0e1",
          "withoutMetadata": "fdd785b62bd3dbeff80b266d8be027fce6fce02f5aba2d3eb253346d53c7b0e1",
          "linkedWithoutMetadata": "fdd785b62bd3dbeff80b266d8be027fce6fce02f5aba2d3eb253346d53c7b0e1"
        },
        "inherit": [
          "FantomAuction",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "setNowOverride(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuctionMock",
              "label": "nowOverride",
              "type": "t_uint256",
              "src": "contracts\\mock\\FantomAuctionMock.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts\\mock\\MockERC20.sol:7",
        "version": {
          "withMetadata": "d825fed50e7322ed52c283c318628220344d5aca187c9dc3813d7f5889faf0a8",
          "withoutMetadata": "d825fed50e7322ed52c283c318628220344d5aca187c9dc3813d7f5889faf0a8",
          "linkedWithoutMetadata": "d825fed50e7322ed52c283c318628220344d5aca187c9dc3813d7f5889faf0a8"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts\\mock\\MockERC20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:340",
        "version": {
          "withMetadata": "23df31985695cc4bc8d5f5dcb1401f4c9fc004973e533a48f50e2a20bb9a0308",
          "withoutMetadata": "23df31985695cc4bc8d5f5dcb1401f4c9fc004973e533a48f50e2a20bb9a0308",
          "linkedWithoutMetadata": "23df31985695cc4bc8d5f5dcb1401f4c9fc004973e533a48f50e2a20bb9a0308"
        },
        "inherit": [
          "UpgradeabilityProxy",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AdminUpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:350"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:428"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:46",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:264",
        "version": {
          "withMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298",
          "withoutMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298",
          "linkedWithoutMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298"
        },
        "inherit": [
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:273"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:277"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyAdmin": {
        "src": "contracts\\proxy\\ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "1656613df43ea9c96983bb3f81976ece2e279af8f162749eb5e29c655a156ea8",
          "withoutMetadata": "1656613df43ea9c96983bb3f81976ece2e279af8f162749eb5e29c655a156ea8",
          "linkedWithoutMetadata": "1656613df43ea9c96983bb3f81976ece2e279af8f162749eb5e29c655a156ea8"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\math\\SafeMath.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165",
            "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC165",
              "label": "_supportedInterfaces",
              "type": "t_mapping(t_bytes4,t_bool)",
              "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "contracts\\library\\IERC165.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155": {
        "src": "@openzeppelin\\contracts\\token\\ERC1155\\IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "allowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\SafeERC20.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:21",
        "version": {
          "withMetadata": "8dd4924f7080b28673c12e2814297ba24304de217db52581284f10f3e0fdae07",
          "withoutMetadata": "8dd4924f7080b28673c12e2814297ba24304de217db52581284f10f3e0fdae07",
          "linkedWithoutMetadata": "8dd4924f7080b28673c12e2814297ba24304de217db52581284f10f3e0fdae07"
        },
        "inherit": [
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address",
          "EnumerableSet",
          "EnumerableMap",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "baseURI()",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:93"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_holderTokens",
              "type": "t_mapping(t_address,t_struct(UintSet)4679_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenOwners",
              "type": "t_struct(UintToAddressMap)4056_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:42"
            },
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:45"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:48"
            },
            {
              "contract": "ERC721",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:51"
            },
            {
              "contract": "ERC721",
              "label": "_baseURI",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(UintSet)4679_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UintSet)4679_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4293_storage"
                }
              ]
            },
            "t_struct(Set)4293_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(UintToAddressMap)4056_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)3738_storage"
                }
              ]
            },
            "t_struct(Map)3738_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)3730_storage)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_struct(MapEntry)3730_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]"
            },
            "t_struct(MapEntry)3730_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Enumerable.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:118",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableMap": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableMap.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableSet.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:8",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomAddressRegistry": {
        "src": "contracts\\FantomAddressRegistry.sol:8",
        "version": {
          "withMetadata": "76d1b9dc0da2d978cc59139b9224ff1063a564d2e103e5b8c53ddf92f35c6017",
          "withoutMetadata": "76d1b9dc0da2d978cc59139b9224ff1063a564d2e103e5b8c53ddf92f35c6017",
          "linkedWithoutMetadata": "76d1b9dc0da2d978cc59139b9224ff1063a564d2e103e5b8c53ddf92f35c6017"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "updateArtion(address)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateNFTFactory(address)",
          "updateNFTFactoryPrivate(address)",
          "updateArtFactory(address)",
          "updateArtFactoryPrivate(address)",
          "updateTokenRegistry(address)",
          "updatePriceFeed(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAddressRegistry",
              "label": "artion",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:12"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:15"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:18"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:21"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "factory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:24"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:27"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "artFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:30"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateArtFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:33"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "tokenRegistry",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:36"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "priceFeed",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactory": {
        "src": "contracts\\FantomArtFactory.sol:8",
        "version": {
          "withMetadata": "d4a1e964c791a23f412a86709671395f44dddf562aa57580730cf93eff3fd50d",
          "withoutMetadata": "d4a1e964c791a23f412a86709671395f44dddf562aa57580730cf93eff3fd50d",
          "linkedWithoutMetadata": "d4a1e964c791a23f412a86709671395f44dddf562aa57580730cf93eff3fd50d"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactory",
            "src": "contracts\\FantomArtFactory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactory.sol:14"
            },
            {
              "contract": "FantomArtFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactory.sol:17"
            },
            {
              "contract": "FantomArtFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactory.sol:20"
            },
            {
              "contract": "FantomArtFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactory.sol:23"
            },
            {
              "contract": "FantomArtFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtFactory.sol:26"
            },
            {
              "contract": "FantomArtFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomArtFactory.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactoryPrivate": {
        "src": "contracts\\FantomArtFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "e0fdcfb3b16f76fdbd409fb98de3b38f5c3677f2d8b853cdb1097f3798031304",
          "withoutMetadata": "e0fdcfb3b16f76fdbd409fb98de3b38f5c3677f2d8b853cdb1097f3798031304",
          "linkedWithoutMetadata": "e0fdcfb3b16f76fdbd409fb98de3b38f5c3677f2d8b853cdb1097f3798031304"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactoryPrivate",
            "src": "contracts\\FantomArtFactoryPrivate.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomArtFactoryPrivate.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradable": {
        "src": "contracts\\FantomArtTradable.sol:22",
        "version": {
          "withMetadata": "c0adcad2251cfbd3886a61e37e058f7be8a3b59616baad692cd6d6e457da1bf7",
          "withoutMetadata": "c0adcad2251cfbd3886a61e37e058f7be8a3b59616baad692cd6d6e457da1bf7",
          "linkedWithoutMetadata": "c0adcad2251cfbd3886a61e37e058f7be8a3b59616baad692cd6d6e457da1bf7"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradable",
            "src": "contracts\\FantomArtTradable.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts\\FantomArtTradable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradable",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradable.sol:28"
            },
            {
              "contract": "FantomArtTradable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts\\FantomArtTradable.sol:31"
            },
            {
              "contract": "FantomArtTradable",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtTradable.sol:33"
            },
            {
              "contract": "FantomArtTradable",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\FantomArtTradable.sol:34"
            },
            {
              "contract": "FantomArtTradable",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradable.sol:37"
            },
            {
              "contract": "FantomArtTradable",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradable.sol:39"
            },
            {
              "contract": "FantomArtTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradable.sol:41"
            },
            {
              "contract": "FantomArtTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtTradable.sol:43"
            },
            {
              "contract": "FantomArtTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradable.sol:45"
            },
            {
              "contract": "FantomArtTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradable.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "OwnableDelegateProxy": {
        "src": "contracts\\FantomArtTradablePrivate.sol:10",
        "version": {
          "withMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "withoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "linkedWithoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyRegistry": {
        "src": "contracts\\FantomArtTradablePrivate.sol:12",
        "version": {
          "withMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9",
          "withoutMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9",
          "linkedWithoutMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ProxyRegistry",
              "label": "proxies",
              "type": "t_mapping(t_address,t_contract(OwnableDelegateProxy)5923)",
              "src": "contracts\\FantomArtTradablePrivate.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_contract(OwnableDelegateProxy)5923)": {
              "label": "mapping(address => contract OwnableDelegateProxy)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(OwnableDelegateProxy)5923": {
              "label": "contract OwnableDelegateProxy"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradablePrivate": {
        "src": "contracts\\FantomArtTradablePrivate.sol:22",
        "version": {
          "withMetadata": "bf7b7baf73c8347bd6c9b943bd6327823ae43377e0e6c356a7e92d443525e201",
          "withoutMetadata": "bf7b7baf73c8347bd6c9b943bd6327823ae43377e0e6c356a7e92d443525e201",
          "linkedWithoutMetadata": "bf7b7baf73c8347bd6c9b943bd6327823ae43377e0e6c356a7e92d443525e201"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradablePrivate",
            "src": "contracts\\FantomArtTradablePrivate.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts\\FantomArtTradablePrivate.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradablePrivate.sol:28"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts\\FantomArtTradablePrivate.sol:31"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtTradablePrivate.sol:33"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\FantomArtTradablePrivate.sol:34"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradablePrivate.sol:37"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradablePrivate.sol:39"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradablePrivate.sol:41"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtTradablePrivate.sol:43"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradablePrivate.sol:45"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradablePrivate.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Artion": {
        "src": "contracts\\FantomArtion.sol:9",
        "version": {
          "withMetadata": "db5e7f93808806b87f44d6d9a0fcfc2c0e9c9f151cc1759d18a7854746c59ef8",
          "withoutMetadata": "db5e7f93808806b87f44d6d9a0fcfc2c0e9c9f151cc1759d18a7854746c59ef8",
          "linkedWithoutMetadata": "db5e7f93808806b87f44d6d9a0fcfc2c0e9c9f151cc1759d18a7854746c59ef8"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable,uint256)",
          "mint(address,string)",
          "burn(uint256)",
          "exists(uint256)",
          "isApproved(uint256,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Artion",
            "src": "contracts\\FantomArtion.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Artion",
              "label": "tokenIdPointer",
              "type": "t_uint256",
              "src": "contracts\\FantomArtion.sol:26"
            },
            {
              "contract": "Artion",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtion.sol:29"
            },
            {
              "contract": "Artion",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtion.sol:32"
            },
            {
              "contract": "Artion",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtion.sol:35"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuction": {
        "src": "contracts\\FantomAuction.sol:55",
        "version": {
          "withMetadata": "19513f8a3837450037736bded6fd45eeccb28988ed437815908e9ca056eadc1c",
          "withoutMetadata": "19513f8a3837450037736bded6fd45eeccb28988ed437815908e9ca056eadc1c",
          "linkedWithoutMetadata": "19513f8a3837450037736bded6fd45eeccb28988ed437815908e9ca056eadc1c"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable)",
          "createAuction(address,uint256,address,uint256,uint256,bool,uint256)",
          "placeBid(address,uint256)",
          "placeBid(address,uint256,uint256)",
          "withdrawBid(address,uint256)",
          "resultAuction(address,uint256)",
          "cancelAuction(address,uint256)",
          "toggleIsPaused()",
          "updateMinBidIncrement(uint256)",
          "updateBidWithdrawalLockTime(uint256)",
          "updateAuctionReservePrice(address,uint256,uint256)",
          "updateAuctionStartTime(address,uint256,uint256)",
          "updateAuctionEndTime(address,uint256,uint256)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "getAuction(address,uint256)",
          "getHighestBidder(address,uint256)",
          "reclaimERC20(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "minBidIncrement",
            "src": "contracts\\FantomAuction.sol:156"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bidWithdrawalLockTime",
            "src": "contracts\\FantomAuction.sol:159"
          },
          {
            "kind": "state-variable-assignment",
            "name": "platformFee",
            "src": "contracts\\FantomAuction.sol:162"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuction",
              "label": "auctions",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6732_storage))",
              "src": "contracts\\FantomAuction.sol:150"
            },
            {
              "contract": "FantomAuction",
              "label": "highestBids",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6739_storage))",
              "src": "contracts\\FantomAuction.sol:153"
            },
            {
              "contract": "FantomAuction",
              "label": "minBidIncrement",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:156"
            },
            {
              "contract": "FantomAuction",
              "label": "bidWithdrawalLockTime",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:159"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:162"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFeeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomAuction.sol:165"
            },
            {
              "contract": "FantomAuction",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)6539",
              "src": "contracts\\FantomAuction.sol:168"
            },
            {
              "contract": "FantomAuction",
              "label": "isPaused",
              "type": "t_bool",
              "src": "contracts\\FantomAuction.sol:171"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6732_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.Auction))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(Auction)6732_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.Auction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Auction)6732_storage": {
              "label": "struct FantomAuction.Auction",
              "members": [
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "minBid",
                  "type": "t_uint256"
                },
                {
                  "label": "reservePrice",
                  "type": "t_uint256"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256"
                },
                {
                  "label": "resulted",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6739_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.HighestBid))"
            },
            "t_mapping(t_uint256,t_struct(HighestBid)6739_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.HighestBid)"
            },
            "t_struct(HighestBid)6739_storage": {
              "label": "struct FantomAuction.HighestBid",
              "members": [
                {
                  "label": "bidder",
                  "type": "t_address_payable"
                },
                {
                  "label": "bid",
                  "type": "t_uint256"
                },
                {
                  "label": "lastBidTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)6539": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAddressRegistry": {
        "src": "contracts\\FantomPriceFeed.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenRegistry()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomBundleMarketplace": {
        "src": "contracts\\FantomMarketplace.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,address,address)",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomTokenRegistry": {
        "src": "contracts\\FantomPriceFeed.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enabled(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomBundleMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:39",
        "version": {
          "withMetadata": "799fbd51d29c85719d4442f9b1abe166ef22751846c662130b29731ef95365e3",
          "withoutMetadata": "799fbd51d29c85719d4442f9b1abe166ef22751846c662130b29731ef95365e3",
          "linkedWithoutMetadata": "799fbd51d29c85719d4442f9b1abe166ef22751846c662130b29731ef95365e3"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20",
          "EnumerableSet"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "getListing(address,string)",
          "listItem(string,address[],uint256[],uint256[],address,uint256,uint256)",
          "cancelListing(string)",
          "updateListing(string,address,uint256)",
          "buyItem(string)",
          "buyItem(string,address)",
          "createOffer(string,address,uint256,uint256)",
          "cancelOffer(string)",
          "acceptOffer(string,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomBundleMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8636_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:106"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "owners",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts\\FantomBundleMarketplace.sol:109"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIdsPerItem",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4473_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:111"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "nftIndexes",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))",
              "src": "contracts\\FantomBundleMarketplace.sol:113"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIds",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "src": "contracts\\FantomBundleMarketplace.sol:115"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "offers",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8643_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:118"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomBundleMarketplace.sol:121"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomBundleMarketplace.sol:124"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)8499",
              "src": "contracts\\FantomBundleMarketplace.sol:127"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8636_storage))": {
              "label": "mapping(address => mapping(bytes32 => struct FantomBundleMarketplace.Listing))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_struct(Listing)8636_storage)": {
              "label": "mapping(bytes32 => struct FantomBundleMarketplace.Listing)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Listing)8636_storage": {
              "label": "struct FantomBundleMarketplace.Listing",
              "members": [
                {
                  "label": "nfts",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "tokenIds",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "quantities",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4473_storage))": {
              "label": "mapping(address => mapping(uint256 => struct EnumerableSet.Bytes32Set))"
            },
            "t_mapping(t_uint256,t_struct(Bytes32Set)4473_storage)": {
              "label": "mapping(uint256 => struct EnumerableSet.Bytes32Set)"
            },
            "t_struct(Bytes32Set)4473_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4293_storage"
                }
              ]
            },
            "t_struct(Set)4293_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
              "label": "mapping(bytes32 => mapping(address => mapping(uint256 => uint256)))"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8643_storage))": {
              "label": "mapping(bytes32 => mapping(address => struct FantomBundleMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)8643_storage)": {
              "label": "mapping(address => struct FantomBundleMarketplace.Offer)"
            },
            "t_struct(Offer)8643_storage": {
              "label": "struct FantomBundleMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)8499": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomMarketplace": {
        "src": "contracts\\FantomMarketplace.sol:71",
        "version": {
          "withMetadata": "f59cf2f57630405672c7081ae743b97f6b2aea7058d8bcd94b62f66298b0e2f0",
          "withoutMetadata": "f59cf2f57630405672c7081ae743b97f6b2aea7058d8bcd94b62f66298b0e2f0",
          "linkedWithoutMetadata": "f59cf2f57630405672c7081ae743b97f6b2aea7058d8bcd94b62f66298b0e2f0"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable,uint16)",
          "listItem(address,uint256,uint256,address,uint256,uint256)",
          "cancelListing(address,uint256)",
          "updateListing(address,uint256,address,uint256)",
          "buyItem(address,uint256,address,address)",
          "createOffer(address,uint256,address,uint256,uint256,uint256)",
          "cancelOffer(address,uint256)",
          "acceptOffer(address,uint256,address)",
          "registerRoyalty(address,uint256,uint16)",
          "registerCollectionRoyalty(address,address,uint16,address)",
          "getPrice(address)",
          "updatePlatformFee(uint16)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomMarketplace",
              "label": "minters",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
              "src": "contracts\\FantomMarketplace.sol:151"
            },
            {
              "contract": "FantomMarketplace",
              "label": "royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint16))",
              "src": "contracts\\FantomMarketplace.sol:154"
            },
            {
              "contract": "FantomMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10840_storage)))",
              "src": "contracts\\FantomMarketplace.sol:157"
            },
            {
              "contract": "FantomMarketplace",
              "label": "offers",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10849_storage)))",
              "src": "contracts\\FantomMarketplace.sol:161"
            },
            {
              "contract": "FantomMarketplace",
              "label": "platformFee",
              "type": "t_uint16",
              "src": "contracts\\FantomMarketplace.sol:165"
            },
            {
              "contract": "FantomMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomMarketplace.sol:168"
            },
            {
              "contract": "FantomMarketplace",
              "label": "collectionRoyalties",
              "type": "t_mapping(t_address,t_struct(CollectionRoyalty)10856_storage)",
              "src": "contracts\\FantomMarketplace.sol:171"
            },
            {
              "contract": "FantomMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)10670",
              "src": "contracts\\FantomMarketplace.sol:174"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
              "label": "mapping(address => mapping(uint256 => address))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint16))": {
              "label": "mapping(address => mapping(uint256 => uint16))"
            },
            "t_mapping(t_uint256,t_uint16)": {
              "label": "mapping(uint256 => uint16)"
            },
            "t_uint16": {
              "label": "uint16"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10840_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Listing)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10840_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Listing))"
            },
            "t_mapping(t_address,t_struct(Listing)10840_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Listing)"
            },
            "t_struct(Listing)10840_storage": {
              "label": "struct FantomMarketplace.Listing",
              "members": [
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10849_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Offer)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10849_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)10849_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Offer)"
            },
            "t_struct(Offer)10849_storage": {
              "label": "struct FantomMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_struct(CollectionRoyalty)10856_storage)": {
              "label": "mapping(address => struct FantomMarketplace.CollectionRoyalty)"
            },
            "t_struct(CollectionRoyalty)10856_storage": {
              "label": "struct FantomMarketplace.CollectionRoyalty",
              "members": [
                {
                  "label": "royalty",
                  "type": "t_uint16"
                },
                {
                  "label": "creator",
                  "type": "t_address"
                },
                {
                  "label": "feeRecipient",
                  "type": "t_address"
                }
              ]
            },
            "t_contract(IFantomAddressRegistry)10670": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAuction": {
        "src": "contracts\\FantomMarketplace.sol:35",
        "inherit": [],
        "libraries": [],
        "methods": [
          "auctions(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomNFTFactory": {
        "src": "contracts\\FantomMarketplace.sol:57",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exists(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomPriceFeed": {
        "src": "contracts\\FantomMarketplace.sol:65",
        "inherit": [],
        "libraries": [],
        "methods": [
          "wFTM()",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactory": {
        "src": "contracts\\FantomNFTFactory.sol:8",
        "version": {
          "withMetadata": "e213646b1abd3df7e7d728be53caa090c9a63c69de693128cf293b4ce49fbd20",
          "withoutMetadata": "e213646b1abd3df7e7d728be53caa090c9a63c69de693128cf293b4ce49fbd20",
          "linkedWithoutMetadata": "e213646b1abd3df7e7d728be53caa090c9a63c69de693128cf293b4ce49fbd20"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactory",
            "src": "contracts\\FantomNFTFactory.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactory",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:14"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:17"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:20"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactory.sol:23"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactory.sol:26"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTFactory.sol:29"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomNFTFactory.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactoryPrivate": {
        "src": "contracts\\FantomNFTFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "0487dd72b4e58be01c1984618c03964b3fc492482cd0f62a547d06f73a35fc03",
          "withoutMetadata": "0487dd72b4e58be01c1984618c03964b3fc492482cd0f62a547d06f73a35fc03",
          "linkedWithoutMetadata": "0487dd72b4e58be01c1984618c03964b3fc492482cd0f62a547d06f73a35fc03"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactoryPrivate",
            "src": "contracts\\FantomNFTFactoryPrivate.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:29"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradable": {
        "src": "contracts\\FantomNFTTradable.sol:12",
        "version": {
          "withMetadata": "ebfb5cde50fd0230e1a40f125d277ad1fe7691d898ff9f8097916e9378446acb",
          "withoutMetadata": "ebfb5cde50fd0230e1a40f125d277ad1fe7691d898ff9f8097916e9378446acb",
          "linkedWithoutMetadata": "ebfb5cde50fd0230e1a40f125d277ad1fe7691d898ff9f8097916e9378446acb"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradable",
            "src": "contracts\\FantomNFTTradable.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts\\FantomNFTTradable.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradable",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:27"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:28"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:29"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradable.sol:30"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradable.sol:33"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTTradable.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradablePrivate": {
        "src": "contracts\\FantomNFTTradablePrivate.sol:12",
        "version": {
          "withMetadata": "8ac05d68d3c513b9b21725d149d1f1bb0045563abbb7908621d92d8939e5182f",
          "withoutMetadata": "8ac05d68d3c513b9b21725d149d1f1bb0045563abbb7908621d92d8939e5182f",
          "linkedWithoutMetadata": "8ac05d68d3c513b9b21725d149d1f1bb0045563abbb7908621d92d8939e5182f"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradablePrivate",
            "src": "contracts\\FantomNFTTradablePrivate.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts\\FantomNFTTradablePrivate.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:27"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:28"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:29"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradablePrivate.sol:30"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradablePrivate.sol:33"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTTradablePrivate.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomPriceFeed": {
        "src": "contracts\\FantomPriceFeed.sol:21",
        "version": {
          "withMetadata": "2179f4724517738e1fb353bf1cb098d7a0480bddecf6b18e59184405ea804515",
          "withoutMetadata": "2179f4724517738e1fb353bf1cb098d7a0480bddecf6b18e59184405ea804515",
          "linkedWithoutMetadata": "2179f4724517738e1fb353bf1cb098d7a0480bddecf6b18e59184405ea804515"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerOracle(address,address)",
          "updateOracle(address,address)",
          "getPrice(address)",
          "updateAddressRegistry(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomPriceFeed",
            "src": "contracts\\FantomPriceFeed.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomPriceFeed",
              "label": "oracles",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts\\FantomPriceFeed.sol:23"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "addressRegistry",
              "type": "t_address",
              "src": "contracts\\FantomPriceFeed.sol:26"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "wFTM",
              "type": "t_address",
              "src": "contracts\\FantomPriceFeed.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IOracle": {
        "src": "contracts\\FantomPriceFeed.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestAnswer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomTokenRegistry": {
        "src": "contracts\\FantomTokenRegistry.sol:7",
        "version": {
          "withMetadata": "f557aeb9df5f2a6d4d41c6ed338fe625912760f47b04da7f88e543b786055f16",
          "withoutMetadata": "f557aeb9df5f2a6d4d41c6ed338fe625912760f47b04da7f88e543b786055f16",
          "linkedWithoutMetadata": "f557aeb9df5f2a6d4d41c6ed338fe625912760f47b04da7f88e543b786055f16"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "add(address)",
          "remove(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomTokenRegistry",
              "label": "enabled",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomTokenRegistry.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155": {
        "src": "contracts\\library\\ERC1155.sol:11",
        "version": {
          "withMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "withoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "linkedWithoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48"
        },
        "inherit": [
          "IERC165"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155",
              "label": "balances",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts\\library\\ERC1155.sol:25"
            },
            {
              "contract": "ERC1155",
              "label": "operators",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts\\library\\ERC1155.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155Metadata": {
        "src": "contracts\\library\\ERC1155Metadata.sol:9",
        "version": {
          "withMetadata": "51a5cd7d489c53959de1b4b946e542c6c132199cdb9fc8ee5b161d795330bc09",
          "withoutMetadata": "51a5cd7d489c53959de1b4b946e542c6c132199cdb9fc8ee5b161d795330bc09",
          "linkedWithoutMetadata": "51a5cd7d489c53959de1b4b946e542c6c132199cdb9fc8ee5b161d795330bc09"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155Metadata",
              "label": "baseMetadataURI",
              "type": "t_string_storage",
              "src": "contracts\\library\\ERC1155Metadata.sol:12"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155MintBurn": {
        "src": "contracts\\library\\ERC1155MintBurn.sol:9",
        "version": {
          "withMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "withoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "linkedWithoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48"
        },
        "inherit": [
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155TokenReceiver": {
        "src": "contracts\\library\\IERC1155TokenReceiver.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BiddingContractMock": {
        "src": "contracts\\mock\\BiddingContractMock.sol:7",
        "version": {
          "withMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a",
          "withoutMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a",
          "linkedWithoutMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "bid(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BiddingContractMock",
            "src": "contracts\\mock\\BiddingContractMock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BiddingContractMock",
              "label": "auctionContract",
              "type": "t_contract(FantomAuction)8471",
              "src": "contracts\\mock\\BiddingContractMock.sol:8"
            }
          ],
          "types": {
            "t_contract(FantomAuction)8471": {
              "label": "contract FantomAuction"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuctionMock": {
        "src": "contracts\\mock\\FantomAuctionMock.sol:7",
        "version": {
          "withMetadata": "fdd785b62bd3dbeff80b266d8be027fce6fce02f5aba2d3eb253346d53c7b0e1",
          "withoutMetadata": "fdd785b62bd3dbeff80b266d8be027fce6fce02f5aba2d3eb253346d53c7b0e1",
          "linkedWithoutMetadata": "fdd785b62bd3dbeff80b266d8be027fce6fce02f5aba2d3eb253346d53c7b0e1"
        },
        "inherit": [
          "FantomAuction",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "setNowOverride(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuctionMock",
              "label": "nowOverride",
              "type": "t_uint256",
              "src": "contracts\\mock\\FantomAuctionMock.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts\\mock\\MockERC20.sol:7",
        "version": {
          "withMetadata": "d825fed50e7322ed52c283c318628220344d5aca187c9dc3813d7f5889faf0a8",
          "withoutMetadata": "d825fed50e7322ed52c283c318628220344d5aca187c9dc3813d7f5889faf0a8",
          "linkedWithoutMetadata": "d825fed50e7322ed52c283c318628220344d5aca187c9dc3813d7f5889faf0a8"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts\\mock\\MockERC20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:340",
        "version": {
          "withMetadata": "23df31985695cc4bc8d5f5dcb1401f4c9fc004973e533a48f50e2a20bb9a0308",
          "withoutMetadata": "23df31985695cc4bc8d5f5dcb1401f4c9fc004973e533a48f50e2a20bb9a0308",
          "linkedWithoutMetadata": "23df31985695cc4bc8d5f5dcb1401f4c9fc004973e533a48f50e2a20bb9a0308"
        },
        "inherit": [
          "UpgradeabilityProxy",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AdminUpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:350"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:428"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:46",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:264",
        "version": {
          "withMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298",
          "withoutMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298",
          "linkedWithoutMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298"
        },
        "inherit": [
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:273"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:277"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyAdmin": {
        "src": "contracts\\proxy\\ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "1656613df43ea9c96983bb3f81976ece2e279af8f162749eb5e29c655a156ea8",
          "withoutMetadata": "1656613df43ea9c96983bb3f81976ece2e279af8f162749eb5e29c655a156ea8",
          "linkedWithoutMetadata": "1656613df43ea9c96983bb3f81976ece2e279af8f162749eb5e29c655a156ea8"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\math\\SafeMath.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165",
            "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC165",
              "label": "_supportedInterfaces",
              "type": "t_mapping(t_bytes4,t_bool)",
              "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "contracts\\library\\IERC165.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155": {
        "src": "@openzeppelin\\contracts\\token\\ERC1155\\IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "allowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\SafeERC20.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:21",
        "version": {
          "withMetadata": "85d298797df464590997b432895092e672fc1d100634444f9600e8ee44464ed7",
          "withoutMetadata": "85d298797df464590997b432895092e672fc1d100634444f9600e8ee44464ed7",
          "linkedWithoutMetadata": "85d298797df464590997b432895092e672fc1d100634444f9600e8ee44464ed7"
        },
        "inherit": [
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address",
          "EnumerableSet",
          "EnumerableMap",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "baseURI()",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:93"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_holderTokens",
              "type": "t_mapping(t_address,t_struct(UintSet)4649_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenOwners",
              "type": "t_struct(UintToAddressMap)4026_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:42"
            },
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:45"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:48"
            },
            {
              "contract": "ERC721",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:51"
            },
            {
              "contract": "ERC721",
              "label": "_baseURI",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(UintSet)4649_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UintSet)4649_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4263_storage"
                }
              ]
            },
            "t_struct(Set)4263_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(UintToAddressMap)4026_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)3708_storage"
                }
              ]
            },
            "t_struct(Map)3708_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)3700_storage)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_struct(MapEntry)3700_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]"
            },
            "t_struct(MapEntry)3700_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Enumerable.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:118",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableMap": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableMap.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableSet.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:8",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomAddressRegistry": {
        "src": "contracts\\FantomAddressRegistry.sol:8",
        "version": {
          "withMetadata": "76d1b9dc0da2d978cc59139b9224ff1063a564d2e103e5b8c53ddf92f35c6017",
          "withoutMetadata": "76d1b9dc0da2d978cc59139b9224ff1063a564d2e103e5b8c53ddf92f35c6017",
          "linkedWithoutMetadata": "76d1b9dc0da2d978cc59139b9224ff1063a564d2e103e5b8c53ddf92f35c6017"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "updateArtion(address)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateNFTFactory(address)",
          "updateNFTFactoryPrivate(address)",
          "updateArtFactory(address)",
          "updateArtFactoryPrivate(address)",
          "updateTokenRegistry(address)",
          "updatePriceFeed(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAddressRegistry",
              "label": "artion",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:12"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:15"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:18"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:21"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "factory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:24"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:27"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "artFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:30"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateArtFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:33"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "tokenRegistry",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:36"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "priceFeed",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactory": {
        "src": "contracts\\FantomArtFactory.sol:8",
        "version": {
          "withMetadata": "d4a1e964c791a23f412a86709671395f44dddf562aa57580730cf93eff3fd50d",
          "withoutMetadata": "d4a1e964c791a23f412a86709671395f44dddf562aa57580730cf93eff3fd50d",
          "linkedWithoutMetadata": "d4a1e964c791a23f412a86709671395f44dddf562aa57580730cf93eff3fd50d"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactory",
            "src": "contracts\\FantomArtFactory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactory.sol:14"
            },
            {
              "contract": "FantomArtFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactory.sol:17"
            },
            {
              "contract": "FantomArtFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactory.sol:20"
            },
            {
              "contract": "FantomArtFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactory.sol:23"
            },
            {
              "contract": "FantomArtFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtFactory.sol:26"
            },
            {
              "contract": "FantomArtFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomArtFactory.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactoryPrivate": {
        "src": "contracts\\FantomArtFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "e0fdcfb3b16f76fdbd409fb98de3b38f5c3677f2d8b853cdb1097f3798031304",
          "withoutMetadata": "e0fdcfb3b16f76fdbd409fb98de3b38f5c3677f2d8b853cdb1097f3798031304",
          "linkedWithoutMetadata": "e0fdcfb3b16f76fdbd409fb98de3b38f5c3677f2d8b853cdb1097f3798031304"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactoryPrivate",
            "src": "contracts\\FantomArtFactoryPrivate.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomArtFactoryPrivate.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradable": {
        "src": "contracts\\FantomArtTradable.sol:22",
        "version": {
          "withMetadata": "c0adcad2251cfbd3886a61e37e058f7be8a3b59616baad692cd6d6e457da1bf7",
          "withoutMetadata": "c0adcad2251cfbd3886a61e37e058f7be8a3b59616baad692cd6d6e457da1bf7",
          "linkedWithoutMetadata": "c0adcad2251cfbd3886a61e37e058f7be8a3b59616baad692cd6d6e457da1bf7"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradable",
            "src": "contracts\\FantomArtTradable.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts\\FantomArtTradable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradable",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradable.sol:28"
            },
            {
              "contract": "FantomArtTradable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts\\FantomArtTradable.sol:31"
            },
            {
              "contract": "FantomArtTradable",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtTradable.sol:33"
            },
            {
              "contract": "FantomArtTradable",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\FantomArtTradable.sol:34"
            },
            {
              "contract": "FantomArtTradable",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradable.sol:37"
            },
            {
              "contract": "FantomArtTradable",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradable.sol:39"
            },
            {
              "contract": "FantomArtTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradable.sol:41"
            },
            {
              "contract": "FantomArtTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtTradable.sol:43"
            },
            {
              "contract": "FantomArtTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradable.sol:45"
            },
            {
              "contract": "FantomArtTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradable.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "OwnableDelegateProxy": {
        "src": "contracts\\FantomArtTradablePrivate.sol:10",
        "version": {
          "withMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "withoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "linkedWithoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyRegistry": {
        "src": "contracts\\FantomArtTradablePrivate.sol:12",
        "version": {
          "withMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9",
          "withoutMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9",
          "linkedWithoutMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ProxyRegistry",
              "label": "proxies",
              "type": "t_mapping(t_address,t_contract(OwnableDelegateProxy)5893)",
              "src": "contracts\\FantomArtTradablePrivate.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_contract(OwnableDelegateProxy)5893)": {
              "label": "mapping(address => contract OwnableDelegateProxy)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(OwnableDelegateProxy)5893": {
              "label": "contract OwnableDelegateProxy"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradablePrivate": {
        "src": "contracts\\FantomArtTradablePrivate.sol:22",
        "version": {
          "withMetadata": "bf7b7baf73c8347bd6c9b943bd6327823ae43377e0e6c356a7e92d443525e201",
          "withoutMetadata": "bf7b7baf73c8347bd6c9b943bd6327823ae43377e0e6c356a7e92d443525e201",
          "linkedWithoutMetadata": "bf7b7baf73c8347bd6c9b943bd6327823ae43377e0e6c356a7e92d443525e201"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradablePrivate",
            "src": "contracts\\FantomArtTradablePrivate.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts\\FantomArtTradablePrivate.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradablePrivate.sol:28"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts\\FantomArtTradablePrivate.sol:31"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtTradablePrivate.sol:33"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\FantomArtTradablePrivate.sol:34"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradablePrivate.sol:37"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradablePrivate.sol:39"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradablePrivate.sol:41"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtTradablePrivate.sol:43"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradablePrivate.sol:45"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradablePrivate.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Artion": {
        "src": "contracts\\FantomArtion.sol:9",
        "version": {
          "withMetadata": "bad3a64b0e3a9449cfe427764932d9926c7745cb7b89eef81b15a4ee59a9b460",
          "withoutMetadata": "bad3a64b0e3a9449cfe427764932d9926c7745cb7b89eef81b15a4ee59a9b460",
          "linkedWithoutMetadata": "bad3a64b0e3a9449cfe427764932d9926c7745cb7b89eef81b15a4ee59a9b460"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable,uint256)",
          "mint(address,string)",
          "burn(uint256)",
          "exists(uint256)",
          "isApproved(uint256,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Artion",
            "src": "contracts\\FantomArtion.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Artion",
              "label": "tokenIdPointer",
              "type": "t_uint256",
              "src": "contracts\\FantomArtion.sol:26"
            },
            {
              "contract": "Artion",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtion.sol:29"
            },
            {
              "contract": "Artion",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtion.sol:32"
            },
            {
              "contract": "Artion",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtion.sol:35"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuction": {
        "src": "contracts\\FantomAuction.sol:55",
        "version": {
          "withMetadata": "19513f8a3837450037736bded6fd45eeccb28988ed437815908e9ca056eadc1c",
          "withoutMetadata": "19513f8a3837450037736bded6fd45eeccb28988ed437815908e9ca056eadc1c",
          "linkedWithoutMetadata": "19513f8a3837450037736bded6fd45eeccb28988ed437815908e9ca056eadc1c"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable)",
          "createAuction(address,uint256,address,uint256,uint256,bool,uint256)",
          "placeBid(address,uint256)",
          "placeBid(address,uint256,uint256)",
          "withdrawBid(address,uint256)",
          "resultAuction(address,uint256)",
          "cancelAuction(address,uint256)",
          "toggleIsPaused()",
          "updateMinBidIncrement(uint256)",
          "updateBidWithdrawalLockTime(uint256)",
          "updateAuctionReservePrice(address,uint256,uint256)",
          "updateAuctionStartTime(address,uint256,uint256)",
          "updateAuctionEndTime(address,uint256,uint256)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "getAuction(address,uint256)",
          "getHighestBidder(address,uint256)",
          "reclaimERC20(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "minBidIncrement",
            "src": "contracts\\FantomAuction.sol:156"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bidWithdrawalLockTime",
            "src": "contracts\\FantomAuction.sol:159"
          },
          {
            "kind": "state-variable-assignment",
            "name": "platformFee",
            "src": "contracts\\FantomAuction.sol:162"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuction",
              "label": "auctions",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6702_storage))",
              "src": "contracts\\FantomAuction.sol:150"
            },
            {
              "contract": "FantomAuction",
              "label": "highestBids",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6709_storage))",
              "src": "contracts\\FantomAuction.sol:153"
            },
            {
              "contract": "FantomAuction",
              "label": "minBidIncrement",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:156"
            },
            {
              "contract": "FantomAuction",
              "label": "bidWithdrawalLockTime",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:159"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:162"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFeeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomAuction.sol:165"
            },
            {
              "contract": "FantomAuction",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)6509",
              "src": "contracts\\FantomAuction.sol:168"
            },
            {
              "contract": "FantomAuction",
              "label": "isPaused",
              "type": "t_bool",
              "src": "contracts\\FantomAuction.sol:171"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6702_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.Auction))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(Auction)6702_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.Auction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Auction)6702_storage": {
              "label": "struct FantomAuction.Auction",
              "members": [
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "minBid",
                  "type": "t_uint256"
                },
                {
                  "label": "reservePrice",
                  "type": "t_uint256"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256"
                },
                {
                  "label": "resulted",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6709_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.HighestBid))"
            },
            "t_mapping(t_uint256,t_struct(HighestBid)6709_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.HighestBid)"
            },
            "t_struct(HighestBid)6709_storage": {
              "label": "struct FantomAuction.HighestBid",
              "members": [
                {
                  "label": "bidder",
                  "type": "t_address_payable"
                },
                {
                  "label": "bid",
                  "type": "t_uint256"
                },
                {
                  "label": "lastBidTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)6509": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAddressRegistry": {
        "src": "contracts\\FantomPriceFeed.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenRegistry()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomBundleMarketplace": {
        "src": "contracts\\FantomMarketplace.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,address,address)",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomTokenRegistry": {
        "src": "contracts\\FantomPriceFeed.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enabled(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomBundleMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:39",
        "version": {
          "withMetadata": "da7ae9fb2bbe19ceb3e7fb9af27ae1c9bcd162e33bb09a1f76819921839e2450",
          "withoutMetadata": "da7ae9fb2bbe19ceb3e7fb9af27ae1c9bcd162e33bb09a1f76819921839e2450",
          "linkedWithoutMetadata": "da7ae9fb2bbe19ceb3e7fb9af27ae1c9bcd162e33bb09a1f76819921839e2450"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20",
          "EnumerableSet"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "getListing(address,string)",
          "listItem(string,address[],uint256[],uint256[],address,uint256,uint256)",
          "cancelListing(string)",
          "updateListing(string,address,uint256)",
          "buyItem(string)",
          "buyItem(string,address)",
          "createOffer(string,address,uint256,uint256)",
          "cancelOffer(string)",
          "acceptOffer(string,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomBundleMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8606_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:106"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "owners",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts\\FantomBundleMarketplace.sol:109"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIdsPerItem",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4443_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:111"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "nftIndexes",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))",
              "src": "contracts\\FantomBundleMarketplace.sol:113"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIds",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "src": "contracts\\FantomBundleMarketplace.sol:115"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "offers",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8613_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:118"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomBundleMarketplace.sol:121"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomBundleMarketplace.sol:124"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)8469",
              "src": "contracts\\FantomBundleMarketplace.sol:127"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8606_storage))": {
              "label": "mapping(address => mapping(bytes32 => struct FantomBundleMarketplace.Listing))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_struct(Listing)8606_storage)": {
              "label": "mapping(bytes32 => struct FantomBundleMarketplace.Listing)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Listing)8606_storage": {
              "label": "struct FantomBundleMarketplace.Listing",
              "members": [
                {
                  "label": "nfts",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "tokenIds",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "quantities",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4443_storage))": {
              "label": "mapping(address => mapping(uint256 => struct EnumerableSet.Bytes32Set))"
            },
            "t_mapping(t_uint256,t_struct(Bytes32Set)4443_storage)": {
              "label": "mapping(uint256 => struct EnumerableSet.Bytes32Set)"
            },
            "t_struct(Bytes32Set)4443_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4263_storage"
                }
              ]
            },
            "t_struct(Set)4263_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
              "label": "mapping(bytes32 => mapping(address => mapping(uint256 => uint256)))"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8613_storage))": {
              "label": "mapping(bytes32 => mapping(address => struct FantomBundleMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)8613_storage)": {
              "label": "mapping(address => struct FantomBundleMarketplace.Offer)"
            },
            "t_struct(Offer)8613_storage": {
              "label": "struct FantomBundleMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)8469": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomMarketplace": {
        "src": "contracts\\FantomMarketplace.sol:71",
        "version": {
          "withMetadata": "2b3e28575718bc1096fe82a52700f306acb0bd215481451b201166aae06128f3",
          "withoutMetadata": "2b3e28575718bc1096fe82a52700f306acb0bd215481451b201166aae06128f3",
          "linkedWithoutMetadata": "2b3e28575718bc1096fe82a52700f306acb0bd215481451b201166aae06128f3"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable,uint16)",
          "listItem(address,uint256,uint256,address,uint256,uint256)",
          "cancelListing(address,uint256)",
          "updateListing(address,uint256,address,uint256)",
          "buyItem(address,uint256,address,address)",
          "createOffer(address,uint256,address,uint256,uint256,uint256)",
          "cancelOffer(address,uint256)",
          "acceptOffer(address,uint256,address)",
          "registerRoyalty(address,uint256,uint16)",
          "registerCollectionRoyalty(address,address,uint16,address)",
          "getPrice(address)",
          "updatePlatformFee(uint16)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomMarketplace",
              "label": "minters",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
              "src": "contracts\\FantomMarketplace.sol:151"
            },
            {
              "contract": "FantomMarketplace",
              "label": "royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint16))",
              "src": "contracts\\FantomMarketplace.sol:154"
            },
            {
              "contract": "FantomMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10810_storage)))",
              "src": "contracts\\FantomMarketplace.sol:157"
            },
            {
              "contract": "FantomMarketplace",
              "label": "offers",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10819_storage)))",
              "src": "contracts\\FantomMarketplace.sol:161"
            },
            {
              "contract": "FantomMarketplace",
              "label": "platformFee",
              "type": "t_uint16",
              "src": "contracts\\FantomMarketplace.sol:165"
            },
            {
              "contract": "FantomMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomMarketplace.sol:168"
            },
            {
              "contract": "FantomMarketplace",
              "label": "collectionRoyalties",
              "type": "t_mapping(t_address,t_struct(CollectionRoyalty)10826_storage)",
              "src": "contracts\\FantomMarketplace.sol:171"
            },
            {
              "contract": "FantomMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)10640",
              "src": "contracts\\FantomMarketplace.sol:174"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
              "label": "mapping(address => mapping(uint256 => address))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint16))": {
              "label": "mapping(address => mapping(uint256 => uint16))"
            },
            "t_mapping(t_uint256,t_uint16)": {
              "label": "mapping(uint256 => uint16)"
            },
            "t_uint16": {
              "label": "uint16"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10810_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Listing)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10810_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Listing))"
            },
            "t_mapping(t_address,t_struct(Listing)10810_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Listing)"
            },
            "t_struct(Listing)10810_storage": {
              "label": "struct FantomMarketplace.Listing",
              "members": [
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10819_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Offer)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10819_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)10819_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Offer)"
            },
            "t_struct(Offer)10819_storage": {
              "label": "struct FantomMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_struct(CollectionRoyalty)10826_storage)": {
              "label": "mapping(address => struct FantomMarketplace.CollectionRoyalty)"
            },
            "t_struct(CollectionRoyalty)10826_storage": {
              "label": "struct FantomMarketplace.CollectionRoyalty",
              "members": [
                {
                  "label": "royalty",
                  "type": "t_uint16"
                },
                {
                  "label": "creator",
                  "type": "t_address"
                },
                {
                  "label": "feeRecipient",
                  "type": "t_address"
                }
              ]
            },
            "t_contract(IFantomAddressRegistry)10640": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAuction": {
        "src": "contracts\\FantomMarketplace.sol:35",
        "inherit": [],
        "libraries": [],
        "methods": [
          "auctions(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomNFTFactory": {
        "src": "contracts\\FantomMarketplace.sol:57",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exists(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomPriceFeed": {
        "src": "contracts\\FantomMarketplace.sol:65",
        "inherit": [],
        "libraries": [],
        "methods": [
          "wFTM()",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactory": {
        "src": "contracts\\FantomNFTFactory.sol:8",
        "version": {
          "withMetadata": "ce66df63b90afb2d4a74f325300bbcbe3e01b26cf6a1f060fa520f4358b4fe1c",
          "withoutMetadata": "ce66df63b90afb2d4a74f325300bbcbe3e01b26cf6a1f060fa520f4358b4fe1c",
          "linkedWithoutMetadata": "ce66df63b90afb2d4a74f325300bbcbe3e01b26cf6a1f060fa520f4358b4fe1c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactory",
            "src": "contracts\\FantomNFTFactory.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactory",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:14"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:17"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:20"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactory.sol:23"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactory.sol:26"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTFactory.sol:29"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomNFTFactory.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactoryPrivate": {
        "src": "contracts\\FantomNFTFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "420cf51d3d285a18f6c970ace750bc688f6cb63479397ec6d281cfee3905e08c",
          "withoutMetadata": "420cf51d3d285a18f6c970ace750bc688f6cb63479397ec6d281cfee3905e08c",
          "linkedWithoutMetadata": "420cf51d3d285a18f6c970ace750bc688f6cb63479397ec6d281cfee3905e08c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactoryPrivate",
            "src": "contracts\\FantomNFTFactoryPrivate.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:29"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradable": {
        "src": "contracts\\FantomNFTTradable.sol:12",
        "version": {
          "withMetadata": "a206be7a4cf7f6c9fb1889bacb1595dc6f72a4cee02d1b1bbabd1a943ebc1a33",
          "withoutMetadata": "a206be7a4cf7f6c9fb1889bacb1595dc6f72a4cee02d1b1bbabd1a943ebc1a33",
          "linkedWithoutMetadata": "a206be7a4cf7f6c9fb1889bacb1595dc6f72a4cee02d1b1bbabd1a943ebc1a33"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradable",
            "src": "contracts\\FantomNFTTradable.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts\\FantomNFTTradable.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradable",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:27"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:28"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:29"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradable.sol:30"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradable.sol:33"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTTradable.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradablePrivate": {
        "src": "contracts\\FantomNFTTradablePrivate.sol:12",
        "version": {
          "withMetadata": "6c05fdf9e0241575d775de0ff52bd7120391d286a0a11a61164366c8a33018db",
          "withoutMetadata": "6c05fdf9e0241575d775de0ff52bd7120391d286a0a11a61164366c8a33018db",
          "linkedWithoutMetadata": "6c05fdf9e0241575d775de0ff52bd7120391d286a0a11a61164366c8a33018db"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradablePrivate",
            "src": "contracts\\FantomNFTTradablePrivate.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts\\FantomNFTTradablePrivate.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:27"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:28"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:29"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradablePrivate.sol:30"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradablePrivate.sol:33"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTTradablePrivate.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomPriceFeed": {
        "src": "contracts\\FantomPriceFeed.sol:21",
        "version": {
          "withMetadata": "2179f4724517738e1fb353bf1cb098d7a0480bddecf6b18e59184405ea804515",
          "withoutMetadata": "2179f4724517738e1fb353bf1cb098d7a0480bddecf6b18e59184405ea804515",
          "linkedWithoutMetadata": "2179f4724517738e1fb353bf1cb098d7a0480bddecf6b18e59184405ea804515"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerOracle(address,address)",
          "updateOracle(address,address)",
          "getPrice(address)",
          "updateAddressRegistry(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomPriceFeed",
            "src": "contracts\\FantomPriceFeed.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomPriceFeed",
              "label": "oracles",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts\\FantomPriceFeed.sol:23"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "addressRegistry",
              "type": "t_address",
              "src": "contracts\\FantomPriceFeed.sol:26"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "wFTM",
              "type": "t_address",
              "src": "contracts\\FantomPriceFeed.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IOracle": {
        "src": "contracts\\FantomPriceFeed.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestAnswer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomTokenRegistry": {
        "src": "contracts\\FantomTokenRegistry.sol:7",
        "version": {
          "withMetadata": "f557aeb9df5f2a6d4d41c6ed338fe625912760f47b04da7f88e543b786055f16",
          "withoutMetadata": "f557aeb9df5f2a6d4d41c6ed338fe625912760f47b04da7f88e543b786055f16",
          "linkedWithoutMetadata": "f557aeb9df5f2a6d4d41c6ed338fe625912760f47b04da7f88e543b786055f16"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "add(address)",
          "remove(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomTokenRegistry",
              "label": "enabled",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomTokenRegistry.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155": {
        "src": "contracts\\library\\ERC1155.sol:11",
        "version": {
          "withMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "withoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "linkedWithoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48"
        },
        "inherit": [
          "IERC165"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155",
              "label": "balances",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts\\library\\ERC1155.sol:25"
            },
            {
              "contract": "ERC1155",
              "label": "operators",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts\\library\\ERC1155.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155Metadata": {
        "src": "contracts\\library\\ERC1155Metadata.sol:9",
        "version": {
          "withMetadata": "51a5cd7d489c53959de1b4b946e542c6c132199cdb9fc8ee5b161d795330bc09",
          "withoutMetadata": "51a5cd7d489c53959de1b4b946e542c6c132199cdb9fc8ee5b161d795330bc09",
          "linkedWithoutMetadata": "51a5cd7d489c53959de1b4b946e542c6c132199cdb9fc8ee5b161d795330bc09"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155Metadata",
              "label": "baseMetadataURI",
              "type": "t_string_storage",
              "src": "contracts\\library\\ERC1155Metadata.sol:12"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155MintBurn": {
        "src": "contracts\\library\\ERC1155MintBurn.sol:9",
        "version": {
          "withMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "withoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "linkedWithoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48"
        },
        "inherit": [
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155TokenReceiver": {
        "src": "contracts\\library\\IERC1155TokenReceiver.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BiddingContractMock": {
        "src": "contracts\\mock\\BiddingContractMock.sol:7",
        "version": {
          "withMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a",
          "withoutMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a",
          "linkedWithoutMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "bid(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BiddingContractMock",
            "src": "contracts\\mock\\BiddingContractMock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BiddingContractMock",
              "label": "auctionContract",
              "type": "t_contract(FantomAuction)8441",
              "src": "contracts\\mock\\BiddingContractMock.sol:8"
            }
          ],
          "types": {
            "t_contract(FantomAuction)8441": {
              "label": "contract FantomAuction"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuctionMock": {
        "src": "contracts\\mock\\FantomAuctionMock.sol:7",
        "version": {
          "withMetadata": "fdd785b62bd3dbeff80b266d8be027fce6fce02f5aba2d3eb253346d53c7b0e1",
          "withoutMetadata": "fdd785b62bd3dbeff80b266d8be027fce6fce02f5aba2d3eb253346d53c7b0e1",
          "linkedWithoutMetadata": "fdd785b62bd3dbeff80b266d8be027fce6fce02f5aba2d3eb253346d53c7b0e1"
        },
        "inherit": [
          "FantomAuction",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "setNowOverride(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuctionMock",
              "label": "nowOverride",
              "type": "t_uint256",
              "src": "contracts\\mock\\FantomAuctionMock.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts\\mock\\MockERC20.sol:7",
        "version": {
          "withMetadata": "d825fed50e7322ed52c283c318628220344d5aca187c9dc3813d7f5889faf0a8",
          "withoutMetadata": "d825fed50e7322ed52c283c318628220344d5aca187c9dc3813d7f5889faf0a8",
          "linkedWithoutMetadata": "d825fed50e7322ed52c283c318628220344d5aca187c9dc3813d7f5889faf0a8"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts\\mock\\MockERC20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:340",
        "version": {
          "withMetadata": "23df31985695cc4bc8d5f5dcb1401f4c9fc004973e533a48f50e2a20bb9a0308",
          "withoutMetadata": "23df31985695cc4bc8d5f5dcb1401f4c9fc004973e533a48f50e2a20bb9a0308",
          "linkedWithoutMetadata": "23df31985695cc4bc8d5f5dcb1401f4c9fc004973e533a48f50e2a20bb9a0308"
        },
        "inherit": [
          "UpgradeabilityProxy",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AdminUpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:350"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:428"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:46",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:264",
        "version": {
          "withMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298",
          "withoutMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298",
          "linkedWithoutMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298"
        },
        "inherit": [
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:273"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:277"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyAdmin": {
        "src": "contracts\\proxy\\ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "1656613df43ea9c96983bb3f81976ece2e279af8f162749eb5e29c655a156ea8",
          "withoutMetadata": "1656613df43ea9c96983bb3f81976ece2e279af8f162749eb5e29c655a156ea8",
          "linkedWithoutMetadata": "1656613df43ea9c96983bb3f81976ece2e279af8f162749eb5e29c655a156ea8"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\math\\SafeMath.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165",
            "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC165",
              "label": "_supportedInterfaces",
              "type": "t_mapping(t_bytes4,t_bool)",
              "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "contracts\\library\\IERC165.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155": {
        "src": "@openzeppelin\\contracts\\token\\ERC1155\\IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "allowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\SafeERC20.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:21",
        "version": {
          "withMetadata": "8dd4924f7080b28673c12e2814297ba24304de217db52581284f10f3e0fdae07",
          "withoutMetadata": "8dd4924f7080b28673c12e2814297ba24304de217db52581284f10f3e0fdae07",
          "linkedWithoutMetadata": "8dd4924f7080b28673c12e2814297ba24304de217db52581284f10f3e0fdae07"
        },
        "inherit": [
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address",
          "EnumerableSet",
          "EnumerableMap",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "baseURI()",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:93"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_holderTokens",
              "type": "t_mapping(t_address,t_struct(UintSet)4679_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenOwners",
              "type": "t_struct(UintToAddressMap)4056_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:42"
            },
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:45"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:48"
            },
            {
              "contract": "ERC721",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:51"
            },
            {
              "contract": "ERC721",
              "label": "_baseURI",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(UintSet)4679_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UintSet)4679_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4293_storage"
                }
              ]
            },
            "t_struct(Set)4293_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(UintToAddressMap)4056_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)3738_storage"
                }
              ]
            },
            "t_struct(Map)3738_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)3730_storage)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_struct(MapEntry)3730_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]"
            },
            "t_struct(MapEntry)3730_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Enumerable.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:118",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableMap": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableMap.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableSet.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:8",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomAddressRegistry": {
        "src": "contracts\\FantomAddressRegistry.sol:8",
        "version": {
          "withMetadata": "76d1b9dc0da2d978cc59139b9224ff1063a564d2e103e5b8c53ddf92f35c6017",
          "withoutMetadata": "76d1b9dc0da2d978cc59139b9224ff1063a564d2e103e5b8c53ddf92f35c6017",
          "linkedWithoutMetadata": "76d1b9dc0da2d978cc59139b9224ff1063a564d2e103e5b8c53ddf92f35c6017"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "updateArtion(address)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateNFTFactory(address)",
          "updateNFTFactoryPrivate(address)",
          "updateArtFactory(address)",
          "updateArtFactoryPrivate(address)",
          "updateTokenRegistry(address)",
          "updatePriceFeed(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAddressRegistry",
              "label": "artion",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:12"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:15"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:18"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:21"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "factory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:24"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:27"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "artFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:30"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateArtFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:33"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "tokenRegistry",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:36"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "priceFeed",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactory": {
        "src": "contracts\\FantomArtFactory.sol:8",
        "version": {
          "withMetadata": "d4a1e964c791a23f412a86709671395f44dddf562aa57580730cf93eff3fd50d",
          "withoutMetadata": "d4a1e964c791a23f412a86709671395f44dddf562aa57580730cf93eff3fd50d",
          "linkedWithoutMetadata": "d4a1e964c791a23f412a86709671395f44dddf562aa57580730cf93eff3fd50d"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactory",
            "src": "contracts\\FantomArtFactory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactory.sol:14"
            },
            {
              "contract": "FantomArtFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactory.sol:17"
            },
            {
              "contract": "FantomArtFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactory.sol:20"
            },
            {
              "contract": "FantomArtFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactory.sol:23"
            },
            {
              "contract": "FantomArtFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtFactory.sol:26"
            },
            {
              "contract": "FantomArtFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomArtFactory.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactoryPrivate": {
        "src": "contracts\\FantomArtFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "e0fdcfb3b16f76fdbd409fb98de3b38f5c3677f2d8b853cdb1097f3798031304",
          "withoutMetadata": "e0fdcfb3b16f76fdbd409fb98de3b38f5c3677f2d8b853cdb1097f3798031304",
          "linkedWithoutMetadata": "e0fdcfb3b16f76fdbd409fb98de3b38f5c3677f2d8b853cdb1097f3798031304"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactoryPrivate",
            "src": "contracts\\FantomArtFactoryPrivate.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomArtFactoryPrivate.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradable": {
        "src": "contracts\\FantomArtTradable.sol:22",
        "version": {
          "withMetadata": "c0adcad2251cfbd3886a61e37e058f7be8a3b59616baad692cd6d6e457da1bf7",
          "withoutMetadata": "c0adcad2251cfbd3886a61e37e058f7be8a3b59616baad692cd6d6e457da1bf7",
          "linkedWithoutMetadata": "c0adcad2251cfbd3886a61e37e058f7be8a3b59616baad692cd6d6e457da1bf7"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradable",
            "src": "contracts\\FantomArtTradable.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts\\FantomArtTradable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradable",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradable.sol:28"
            },
            {
              "contract": "FantomArtTradable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts\\FantomArtTradable.sol:31"
            },
            {
              "contract": "FantomArtTradable",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtTradable.sol:33"
            },
            {
              "contract": "FantomArtTradable",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\FantomArtTradable.sol:34"
            },
            {
              "contract": "FantomArtTradable",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradable.sol:37"
            },
            {
              "contract": "FantomArtTradable",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradable.sol:39"
            },
            {
              "contract": "FantomArtTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradable.sol:41"
            },
            {
              "contract": "FantomArtTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtTradable.sol:43"
            },
            {
              "contract": "FantomArtTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradable.sol:45"
            },
            {
              "contract": "FantomArtTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradable.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "OwnableDelegateProxy": {
        "src": "contracts\\FantomArtTradablePrivate.sol:10",
        "version": {
          "withMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "withoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "linkedWithoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyRegistry": {
        "src": "contracts\\FantomArtTradablePrivate.sol:12",
        "version": {
          "withMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9",
          "withoutMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9",
          "linkedWithoutMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ProxyRegistry",
              "label": "proxies",
              "type": "t_mapping(t_address,t_contract(OwnableDelegateProxy)5923)",
              "src": "contracts\\FantomArtTradablePrivate.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_contract(OwnableDelegateProxy)5923)": {
              "label": "mapping(address => contract OwnableDelegateProxy)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(OwnableDelegateProxy)5923": {
              "label": "contract OwnableDelegateProxy"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradablePrivate": {
        "src": "contracts\\FantomArtTradablePrivate.sol:22",
        "version": {
          "withMetadata": "bf7b7baf73c8347bd6c9b943bd6327823ae43377e0e6c356a7e92d443525e201",
          "withoutMetadata": "bf7b7baf73c8347bd6c9b943bd6327823ae43377e0e6c356a7e92d443525e201",
          "linkedWithoutMetadata": "bf7b7baf73c8347bd6c9b943bd6327823ae43377e0e6c356a7e92d443525e201"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradablePrivate",
            "src": "contracts\\FantomArtTradablePrivate.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts\\FantomArtTradablePrivate.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradablePrivate.sol:28"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts\\FantomArtTradablePrivate.sol:31"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtTradablePrivate.sol:33"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\FantomArtTradablePrivate.sol:34"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradablePrivate.sol:37"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradablePrivate.sol:39"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradablePrivate.sol:41"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtTradablePrivate.sol:43"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradablePrivate.sol:45"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradablePrivate.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Artion": {
        "src": "contracts\\FantomArtion.sol:9",
        "version": {
          "withMetadata": "db5e7f93808806b87f44d6d9a0fcfc2c0e9c9f151cc1759d18a7854746c59ef8",
          "withoutMetadata": "db5e7f93808806b87f44d6d9a0fcfc2c0e9c9f151cc1759d18a7854746c59ef8",
          "linkedWithoutMetadata": "db5e7f93808806b87f44d6d9a0fcfc2c0e9c9f151cc1759d18a7854746c59ef8"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable,uint256)",
          "mint(address,string)",
          "burn(uint256)",
          "exists(uint256)",
          "isApproved(uint256,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Artion",
            "src": "contracts\\FantomArtion.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Artion",
              "label": "tokenIdPointer",
              "type": "t_uint256",
              "src": "contracts\\FantomArtion.sol:26"
            },
            {
              "contract": "Artion",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtion.sol:29"
            },
            {
              "contract": "Artion",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtion.sol:32"
            },
            {
              "contract": "Artion",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtion.sol:35"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuction": {
        "src": "contracts\\FantomAuction.sol:55",
        "version": {
          "withMetadata": "19513f8a3837450037736bded6fd45eeccb28988ed437815908e9ca056eadc1c",
          "withoutMetadata": "19513f8a3837450037736bded6fd45eeccb28988ed437815908e9ca056eadc1c",
          "linkedWithoutMetadata": "19513f8a3837450037736bded6fd45eeccb28988ed437815908e9ca056eadc1c"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable)",
          "createAuction(address,uint256,address,uint256,uint256,bool,uint256)",
          "placeBid(address,uint256)",
          "placeBid(address,uint256,uint256)",
          "withdrawBid(address,uint256)",
          "resultAuction(address,uint256)",
          "cancelAuction(address,uint256)",
          "toggleIsPaused()",
          "updateMinBidIncrement(uint256)",
          "updateBidWithdrawalLockTime(uint256)",
          "updateAuctionReservePrice(address,uint256,uint256)",
          "updateAuctionStartTime(address,uint256,uint256)",
          "updateAuctionEndTime(address,uint256,uint256)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "getAuction(address,uint256)",
          "getHighestBidder(address,uint256)",
          "reclaimERC20(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "minBidIncrement",
            "src": "contracts\\FantomAuction.sol:156"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bidWithdrawalLockTime",
            "src": "contracts\\FantomAuction.sol:159"
          },
          {
            "kind": "state-variable-assignment",
            "name": "platformFee",
            "src": "contracts\\FantomAuction.sol:162"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuction",
              "label": "auctions",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6732_storage))",
              "src": "contracts\\FantomAuction.sol:150"
            },
            {
              "contract": "FantomAuction",
              "label": "highestBids",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6739_storage))",
              "src": "contracts\\FantomAuction.sol:153"
            },
            {
              "contract": "FantomAuction",
              "label": "minBidIncrement",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:156"
            },
            {
              "contract": "FantomAuction",
              "label": "bidWithdrawalLockTime",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:159"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:162"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFeeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomAuction.sol:165"
            },
            {
              "contract": "FantomAuction",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)6539",
              "src": "contracts\\FantomAuction.sol:168"
            },
            {
              "contract": "FantomAuction",
              "label": "isPaused",
              "type": "t_bool",
              "src": "contracts\\FantomAuction.sol:171"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6732_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.Auction))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(Auction)6732_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.Auction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Auction)6732_storage": {
              "label": "struct FantomAuction.Auction",
              "members": [
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "minBid",
                  "type": "t_uint256"
                },
                {
                  "label": "reservePrice",
                  "type": "t_uint256"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256"
                },
                {
                  "label": "resulted",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6739_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.HighestBid))"
            },
            "t_mapping(t_uint256,t_struct(HighestBid)6739_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.HighestBid)"
            },
            "t_struct(HighestBid)6739_storage": {
              "label": "struct FantomAuction.HighestBid",
              "members": [
                {
                  "label": "bidder",
                  "type": "t_address_payable"
                },
                {
                  "label": "bid",
                  "type": "t_uint256"
                },
                {
                  "label": "lastBidTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)6539": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAddressRegistry": {
        "src": "contracts\\FantomPriceFeed.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenRegistry()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomBundleMarketplace": {
        "src": "contracts\\FantomMarketplace.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,address,address)",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomTokenRegistry": {
        "src": "contracts\\FantomPriceFeed.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enabled(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomBundleMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:39",
        "version": {
          "withMetadata": "799fbd51d29c85719d4442f9b1abe166ef22751846c662130b29731ef95365e3",
          "withoutMetadata": "799fbd51d29c85719d4442f9b1abe166ef22751846c662130b29731ef95365e3",
          "linkedWithoutMetadata": "799fbd51d29c85719d4442f9b1abe166ef22751846c662130b29731ef95365e3"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20",
          "EnumerableSet"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "getListing(address,string)",
          "listItem(string,address[],uint256[],uint256[],address,uint256,uint256)",
          "cancelListing(string)",
          "updateListing(string,address,uint256)",
          "buyItem(string)",
          "buyItem(string,address)",
          "createOffer(string,address,uint256,uint256)",
          "cancelOffer(string)",
          "acceptOffer(string,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomBundleMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8636_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:106"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "owners",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts\\FantomBundleMarketplace.sol:109"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIdsPerItem",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4473_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:111"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "nftIndexes",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))",
              "src": "contracts\\FantomBundleMarketplace.sol:113"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIds",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "src": "contracts\\FantomBundleMarketplace.sol:115"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "offers",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8643_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:118"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomBundleMarketplace.sol:121"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomBundleMarketplace.sol:124"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)8499",
              "src": "contracts\\FantomBundleMarketplace.sol:127"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8636_storage))": {
              "label": "mapping(address => mapping(bytes32 => struct FantomBundleMarketplace.Listing))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_struct(Listing)8636_storage)": {
              "label": "mapping(bytes32 => struct FantomBundleMarketplace.Listing)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Listing)8636_storage": {
              "label": "struct FantomBundleMarketplace.Listing",
              "members": [
                {
                  "label": "nfts",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "tokenIds",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "quantities",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4473_storage))": {
              "label": "mapping(address => mapping(uint256 => struct EnumerableSet.Bytes32Set))"
            },
            "t_mapping(t_uint256,t_struct(Bytes32Set)4473_storage)": {
              "label": "mapping(uint256 => struct EnumerableSet.Bytes32Set)"
            },
            "t_struct(Bytes32Set)4473_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4293_storage"
                }
              ]
            },
            "t_struct(Set)4293_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
              "label": "mapping(bytes32 => mapping(address => mapping(uint256 => uint256)))"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8643_storage))": {
              "label": "mapping(bytes32 => mapping(address => struct FantomBundleMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)8643_storage)": {
              "label": "mapping(address => struct FantomBundleMarketplace.Offer)"
            },
            "t_struct(Offer)8643_storage": {
              "label": "struct FantomBundleMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)8499": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomMarketplace": {
        "src": "contracts\\FantomMarketplace.sol:71",
        "version": {
          "withMetadata": "f59cf2f57630405672c7081ae743b97f6b2aea7058d8bcd94b62f66298b0e2f0",
          "withoutMetadata": "f59cf2f57630405672c7081ae743b97f6b2aea7058d8bcd94b62f66298b0e2f0",
          "linkedWithoutMetadata": "f59cf2f57630405672c7081ae743b97f6b2aea7058d8bcd94b62f66298b0e2f0"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable,uint16)",
          "listItem(address,uint256,uint256,address,uint256,uint256)",
          "cancelListing(address,uint256)",
          "updateListing(address,uint256,address,uint256)",
          "buyItem(address,uint256,address,address)",
          "createOffer(address,uint256,address,uint256,uint256,uint256)",
          "cancelOffer(address,uint256)",
          "acceptOffer(address,uint256,address)",
          "registerRoyalty(address,uint256,uint16)",
          "registerCollectionRoyalty(address,address,uint16,address)",
          "getPrice(address)",
          "updatePlatformFee(uint16)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomMarketplace",
              "label": "minters",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
              "src": "contracts\\FantomMarketplace.sol:151"
            },
            {
              "contract": "FantomMarketplace",
              "label": "royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint16))",
              "src": "contracts\\FantomMarketplace.sol:154"
            },
            {
              "contract": "FantomMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10840_storage)))",
              "src": "contracts\\FantomMarketplace.sol:157"
            },
            {
              "contract": "FantomMarketplace",
              "label": "offers",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10849_storage)))",
              "src": "contracts\\FantomMarketplace.sol:161"
            },
            {
              "contract": "FantomMarketplace",
              "label": "platformFee",
              "type": "t_uint16",
              "src": "contracts\\FantomMarketplace.sol:165"
            },
            {
              "contract": "FantomMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomMarketplace.sol:168"
            },
            {
              "contract": "FantomMarketplace",
              "label": "collectionRoyalties",
              "type": "t_mapping(t_address,t_struct(CollectionRoyalty)10856_storage)",
              "src": "contracts\\FantomMarketplace.sol:171"
            },
            {
              "contract": "FantomMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)10670",
              "src": "contracts\\FantomMarketplace.sol:174"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
              "label": "mapping(address => mapping(uint256 => address))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint16))": {
              "label": "mapping(address => mapping(uint256 => uint16))"
            },
            "t_mapping(t_uint256,t_uint16)": {
              "label": "mapping(uint256 => uint16)"
            },
            "t_uint16": {
              "label": "uint16"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10840_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Listing)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10840_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Listing))"
            },
            "t_mapping(t_address,t_struct(Listing)10840_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Listing)"
            },
            "t_struct(Listing)10840_storage": {
              "label": "struct FantomMarketplace.Listing",
              "members": [
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10849_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Offer)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10849_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)10849_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Offer)"
            },
            "t_struct(Offer)10849_storage": {
              "label": "struct FantomMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_struct(CollectionRoyalty)10856_storage)": {
              "label": "mapping(address => struct FantomMarketplace.CollectionRoyalty)"
            },
            "t_struct(CollectionRoyalty)10856_storage": {
              "label": "struct FantomMarketplace.CollectionRoyalty",
              "members": [
                {
                  "label": "royalty",
                  "type": "t_uint16"
                },
                {
                  "label": "creator",
                  "type": "t_address"
                },
                {
                  "label": "feeRecipient",
                  "type": "t_address"
                }
              ]
            },
            "t_contract(IFantomAddressRegistry)10670": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAuction": {
        "src": "contracts\\FantomMarketplace.sol:35",
        "inherit": [],
        "libraries": [],
        "methods": [
          "auctions(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomNFTFactory": {
        "src": "contracts\\FantomMarketplace.sol:57",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exists(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomPriceFeed": {
        "src": "contracts\\FantomMarketplace.sol:65",
        "inherit": [],
        "libraries": [],
        "methods": [
          "wFTM()",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactory": {
        "src": "contracts\\FantomNFTFactory.sol:8",
        "version": {
          "withMetadata": "e213646b1abd3df7e7d728be53caa090c9a63c69de693128cf293b4ce49fbd20",
          "withoutMetadata": "e213646b1abd3df7e7d728be53caa090c9a63c69de693128cf293b4ce49fbd20",
          "linkedWithoutMetadata": "e213646b1abd3df7e7d728be53caa090c9a63c69de693128cf293b4ce49fbd20"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactory",
            "src": "contracts\\FantomNFTFactory.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactory",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:14"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:17"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:20"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactory.sol:23"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactory.sol:26"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTFactory.sol:29"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomNFTFactory.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactoryPrivate": {
        "src": "contracts\\FantomNFTFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "0487dd72b4e58be01c1984618c03964b3fc492482cd0f62a547d06f73a35fc03",
          "withoutMetadata": "0487dd72b4e58be01c1984618c03964b3fc492482cd0f62a547d06f73a35fc03",
          "linkedWithoutMetadata": "0487dd72b4e58be01c1984618c03964b3fc492482cd0f62a547d06f73a35fc03"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactoryPrivate",
            "src": "contracts\\FantomNFTFactoryPrivate.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:29"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradable": {
        "src": "contracts\\FantomNFTTradable.sol:12",
        "version": {
          "withMetadata": "ebfb5cde50fd0230e1a40f125d277ad1fe7691d898ff9f8097916e9378446acb",
          "withoutMetadata": "ebfb5cde50fd0230e1a40f125d277ad1fe7691d898ff9f8097916e9378446acb",
          "linkedWithoutMetadata": "ebfb5cde50fd0230e1a40f125d277ad1fe7691d898ff9f8097916e9378446acb"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradable",
            "src": "contracts\\FantomNFTTradable.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts\\FantomNFTTradable.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradable",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:27"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:28"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:29"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradable.sol:30"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradable.sol:33"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTTradable.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradablePrivate": {
        "src": "contracts\\FantomNFTTradablePrivate.sol:12",
        "version": {
          "withMetadata": "8ac05d68d3c513b9b21725d149d1f1bb0045563abbb7908621d92d8939e5182f",
          "withoutMetadata": "8ac05d68d3c513b9b21725d149d1f1bb0045563abbb7908621d92d8939e5182f",
          "linkedWithoutMetadata": "8ac05d68d3c513b9b21725d149d1f1bb0045563abbb7908621d92d8939e5182f"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradablePrivate",
            "src": "contracts\\FantomNFTTradablePrivate.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts\\FantomNFTTradablePrivate.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:27"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:28"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:29"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradablePrivate.sol:30"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradablePrivate.sol:33"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTTradablePrivate.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomPriceFeed": {
        "src": "contracts\\FantomPriceFeed.sol:21",
        "version": {
          "withMetadata": "2179f4724517738e1fb353bf1cb098d7a0480bddecf6b18e59184405ea804515",
          "withoutMetadata": "2179f4724517738e1fb353bf1cb098d7a0480bddecf6b18e59184405ea804515",
          "linkedWithoutMetadata": "2179f4724517738e1fb353bf1cb098d7a0480bddecf6b18e59184405ea804515"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerOracle(address,address)",
          "updateOracle(address,address)",
          "getPrice(address)",
          "updateAddressRegistry(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomPriceFeed",
            "src": "contracts\\FantomPriceFeed.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomPriceFeed",
              "label": "oracles",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts\\FantomPriceFeed.sol:23"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "addressRegistry",
              "type": "t_address",
              "src": "contracts\\FantomPriceFeed.sol:26"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "wFTM",
              "type": "t_address",
              "src": "contracts\\FantomPriceFeed.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IOracle": {
        "src": "contracts\\FantomPriceFeed.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestAnswer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomTokenRegistry": {
        "src": "contracts\\FantomTokenRegistry.sol:7",
        "version": {
          "withMetadata": "f557aeb9df5f2a6d4d41c6ed338fe625912760f47b04da7f88e543b786055f16",
          "withoutMetadata": "f557aeb9df5f2a6d4d41c6ed338fe625912760f47b04da7f88e543b786055f16",
          "linkedWithoutMetadata": "f557aeb9df5f2a6d4d41c6ed338fe625912760f47b04da7f88e543b786055f16"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "add(address)",
          "remove(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomTokenRegistry",
              "label": "enabled",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomTokenRegistry.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155": {
        "src": "contracts\\library\\ERC1155.sol:11",
        "version": {
          "withMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "withoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "linkedWithoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48"
        },
        "inherit": [
          "IERC165"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155",
              "label": "balances",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts\\library\\ERC1155.sol:25"
            },
            {
              "contract": "ERC1155",
              "label": "operators",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts\\library\\ERC1155.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155Metadata": {
        "src": "contracts\\library\\ERC1155Metadata.sol:9",
        "version": {
          "withMetadata": "51a5cd7d489c53959de1b4b946e542c6c132199cdb9fc8ee5b161d795330bc09",
          "withoutMetadata": "51a5cd7d489c53959de1b4b946e542c6c132199cdb9fc8ee5b161d795330bc09",
          "linkedWithoutMetadata": "51a5cd7d489c53959de1b4b946e542c6c132199cdb9fc8ee5b161d795330bc09"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155Metadata",
              "label": "baseMetadataURI",
              "type": "t_string_storage",
              "src": "contracts\\library\\ERC1155Metadata.sol:12"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155MintBurn": {
        "src": "contracts\\library\\ERC1155MintBurn.sol:9",
        "version": {
          "withMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "withoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "linkedWithoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48"
        },
        "inherit": [
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155TokenReceiver": {
        "src": "contracts\\library\\IERC1155TokenReceiver.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BiddingContractMock": {
        "src": "contracts\\mock\\BiddingContractMock.sol:7",
        "version": {
          "withMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a",
          "withoutMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a",
          "linkedWithoutMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "bid(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BiddingContractMock",
            "src": "contracts\\mock\\BiddingContractMock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BiddingContractMock",
              "label": "auctionContract",
              "type": "t_contract(FantomAuction)8471",
              "src": "contracts\\mock\\BiddingContractMock.sol:8"
            }
          ],
          "types": {
            "t_contract(FantomAuction)8471": {
              "label": "contract FantomAuction"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuctionMock": {
        "src": "contracts\\mock\\FantomAuctionMock.sol:7",
        "version": {
          "withMetadata": "fdd785b62bd3dbeff80b266d8be027fce6fce02f5aba2d3eb253346d53c7b0e1",
          "withoutMetadata": "fdd785b62bd3dbeff80b266d8be027fce6fce02f5aba2d3eb253346d53c7b0e1",
          "linkedWithoutMetadata": "fdd785b62bd3dbeff80b266d8be027fce6fce02f5aba2d3eb253346d53c7b0e1"
        },
        "inherit": [
          "FantomAuction",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "setNowOverride(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuctionMock",
              "label": "nowOverride",
              "type": "t_uint256",
              "src": "contracts\\mock\\FantomAuctionMock.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts\\mock\\MockERC20.sol:7",
        "version": {
          "withMetadata": "d825fed50e7322ed52c283c318628220344d5aca187c9dc3813d7f5889faf0a8",
          "withoutMetadata": "d825fed50e7322ed52c283c318628220344d5aca187c9dc3813d7f5889faf0a8",
          "linkedWithoutMetadata": "d825fed50e7322ed52c283c318628220344d5aca187c9dc3813d7f5889faf0a8"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts\\mock\\MockERC20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:340",
        "version": {
          "withMetadata": "23df31985695cc4bc8d5f5dcb1401f4c9fc004973e533a48f50e2a20bb9a0308",
          "withoutMetadata": "23df31985695cc4bc8d5f5dcb1401f4c9fc004973e533a48f50e2a20bb9a0308",
          "linkedWithoutMetadata": "23df31985695cc4bc8d5f5dcb1401f4c9fc004973e533a48f50e2a20bb9a0308"
        },
        "inherit": [
          "UpgradeabilityProxy",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AdminUpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:350"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:428"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:46",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:264",
        "version": {
          "withMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298",
          "withoutMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298",
          "linkedWithoutMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298"
        },
        "inherit": [
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:273"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:277"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyAdmin": {
        "src": "contracts\\proxy\\ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "1656613df43ea9c96983bb3f81976ece2e279af8f162749eb5e29c655a156ea8",
          "withoutMetadata": "1656613df43ea9c96983bb3f81976ece2e279af8f162749eb5e29c655a156ea8",
          "linkedWithoutMetadata": "1656613df43ea9c96983bb3f81976ece2e279af8f162749eb5e29c655a156ea8"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\math\\SafeMath.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165",
            "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC165",
              "label": "_supportedInterfaces",
              "type": "t_mapping(t_bytes4,t_bool)",
              "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "contracts\\library\\IERC165.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155": {
        "src": "@openzeppelin\\contracts\\token\\ERC1155\\IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "allowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\SafeERC20.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:21",
        "version": {
          "withMetadata": "ec590816ed5c25a1835c7c8e917fe81a8ed80bf74067decaaff8e1893d572804",
          "withoutMetadata": "ec590816ed5c25a1835c7c8e917fe81a8ed80bf74067decaaff8e1893d572804",
          "linkedWithoutMetadata": "ec590816ed5c25a1835c7c8e917fe81a8ed80bf74067decaaff8e1893d572804"
        },
        "inherit": [
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address",
          "EnumerableSet",
          "EnumerableMap",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "baseURI()",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:93"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_holderTokens",
              "type": "t_mapping(t_address,t_struct(UintSet)4679_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenOwners",
              "type": "t_struct(UintToAddressMap)4056_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:42"
            },
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:45"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:48"
            },
            {
              "contract": "ERC721",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:51"
            },
            {
              "contract": "ERC721",
              "label": "_baseURI",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(UintSet)4679_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UintSet)4679_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4293_storage"
                }
              ]
            },
            "t_struct(Set)4293_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(UintToAddressMap)4056_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)3738_storage"
                }
              ]
            },
            "t_struct(Map)3738_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)3730_storage)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_struct(MapEntry)3730_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]"
            },
            "t_struct(MapEntry)3730_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Enumerable.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:118",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableMap": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableMap.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableSet.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:8",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomAddressRegistry": {
        "src": "contracts\\FantomAddressRegistry.sol:8",
        "version": {
          "withMetadata": "01210ef5a113adaade232d13a6ed6aa0103f2b25eafeceefe296975e29df66cb",
          "withoutMetadata": "01210ef5a113adaade232d13a6ed6aa0103f2b25eafeceefe296975e29df66cb",
          "linkedWithoutMetadata": "01210ef5a113adaade232d13a6ed6aa0103f2b25eafeceefe296975e29df66cb"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "updateArtion(address)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateNFTFactory(address)",
          "updateNFTFactoryPrivate(address)",
          "updateArtFactory(address)",
          "updateArtFactoryPrivate(address)",
          "updateTokenRegistry(address)",
          "updatePriceFeed(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAddressRegistry",
              "label": "artion",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:12"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:15"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:18"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:21"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "factory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:24"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:27"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "artFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:30"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateArtFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:33"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "tokenRegistry",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:36"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "priceFeed",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactory": {
        "src": "contracts\\FantomArtFactory.sol:8",
        "version": {
          "withMetadata": "9df27e05e44575e70daa8898410ab03720347f72f29e1ec84ce8d2fdf14b534f",
          "withoutMetadata": "9df27e05e44575e70daa8898410ab03720347f72f29e1ec84ce8d2fdf14b534f",
          "linkedWithoutMetadata": "9df27e05e44575e70daa8898410ab03720347f72f29e1ec84ce8d2fdf14b534f"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactory",
            "src": "contracts\\FantomArtFactory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactory.sol:14"
            },
            {
              "contract": "FantomArtFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactory.sol:17"
            },
            {
              "contract": "FantomArtFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactory.sol:20"
            },
            {
              "contract": "FantomArtFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactory.sol:23"
            },
            {
              "contract": "FantomArtFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtFactory.sol:26"
            },
            {
              "contract": "FantomArtFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomArtFactory.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactoryPrivate": {
        "src": "contracts\\FantomArtFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "298a11e97a6c209f78207f6e6f2bbb1472158735ca002b411e4061af0a58c75a",
          "withoutMetadata": "298a11e97a6c209f78207f6e6f2bbb1472158735ca002b411e4061af0a58c75a",
          "linkedWithoutMetadata": "298a11e97a6c209f78207f6e6f2bbb1472158735ca002b411e4061af0a58c75a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactoryPrivate",
            "src": "contracts\\FantomArtFactoryPrivate.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomArtFactoryPrivate.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradable": {
        "src": "contracts\\FantomArtTradable.sol:22",
        "version": {
          "withMetadata": "073fe51513c158c095357630028d8a0956ecb69b5d37aef8e14b7ebd12b802cd",
          "withoutMetadata": "073fe51513c158c095357630028d8a0956ecb69b5d37aef8e14b7ebd12b802cd",
          "linkedWithoutMetadata": "073fe51513c158c095357630028d8a0956ecb69b5d37aef8e14b7ebd12b802cd"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradable",
            "src": "contracts\\FantomArtTradable.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts\\FantomArtTradable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradable",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradable.sol:28"
            },
            {
              "contract": "FantomArtTradable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts\\FantomArtTradable.sol:31"
            },
            {
              "contract": "FantomArtTradable",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtTradable.sol:33"
            },
            {
              "contract": "FantomArtTradable",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\FantomArtTradable.sol:34"
            },
            {
              "contract": "FantomArtTradable",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradable.sol:37"
            },
            {
              "contract": "FantomArtTradable",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradable.sol:39"
            },
            {
              "contract": "FantomArtTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradable.sol:41"
            },
            {
              "contract": "FantomArtTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtTradable.sol:43"
            },
            {
              "contract": "FantomArtTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradable.sol:45"
            },
            {
              "contract": "FantomArtTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradable.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "OwnableDelegateProxy": {
        "src": "contracts\\FantomArtTradablePrivate.sol:10",
        "version": {
          "withMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "withoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "linkedWithoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyRegistry": {
        "src": "contracts\\FantomArtTradablePrivate.sol:12",
        "version": {
          "withMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9",
          "withoutMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9",
          "linkedWithoutMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ProxyRegistry",
              "label": "proxies",
              "type": "t_mapping(t_address,t_contract(OwnableDelegateProxy)5923)",
              "src": "contracts\\FantomArtTradablePrivate.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_contract(OwnableDelegateProxy)5923)": {
              "label": "mapping(address => contract OwnableDelegateProxy)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(OwnableDelegateProxy)5923": {
              "label": "contract OwnableDelegateProxy"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradablePrivate": {
        "src": "contracts\\FantomArtTradablePrivate.sol:22",
        "version": {
          "withMetadata": "73c5ea2128ac23354b4437cd46710a957269f6a5e10d6f2eb8955d0f7811fd0b",
          "withoutMetadata": "73c5ea2128ac23354b4437cd46710a957269f6a5e10d6f2eb8955d0f7811fd0b",
          "linkedWithoutMetadata": "73c5ea2128ac23354b4437cd46710a957269f6a5e10d6f2eb8955d0f7811fd0b"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradablePrivate",
            "src": "contracts\\FantomArtTradablePrivate.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts\\FantomArtTradablePrivate.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradablePrivate.sol:28"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts\\FantomArtTradablePrivate.sol:31"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtTradablePrivate.sol:33"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\FantomArtTradablePrivate.sol:34"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradablePrivate.sol:37"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradablePrivate.sol:39"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradablePrivate.sol:41"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtTradablePrivate.sol:43"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradablePrivate.sol:45"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradablePrivate.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Artion": {
        "src": "contracts\\FantomArtion.sol:9",
        "version": {
          "withMetadata": "add88fc63648eaac7c0296a3fa6d50c99000555ee0cf9ccca22f16032ebb051a",
          "withoutMetadata": "add88fc63648eaac7c0296a3fa6d50c99000555ee0cf9ccca22f16032ebb051a",
          "linkedWithoutMetadata": "add88fc63648eaac7c0296a3fa6d50c99000555ee0cf9ccca22f16032ebb051a"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable,uint256)",
          "mint(address,string)",
          "burn(uint256)",
          "exists(uint256)",
          "isApproved(uint256,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Artion",
            "src": "contracts\\FantomArtion.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Artion",
              "label": "tokenIdPointer",
              "type": "t_uint256",
              "src": "contracts\\FantomArtion.sol:26"
            },
            {
              "contract": "Artion",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtion.sol:29"
            },
            {
              "contract": "Artion",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtion.sol:32"
            },
            {
              "contract": "Artion",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtion.sol:35"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuction": {
        "src": "contracts\\FantomAuction.sol:55",
        "version": {
          "withMetadata": "b1d7876a39f761c828455415df736e7122eef51d924f4378a713036d42a59212",
          "withoutMetadata": "b1d7876a39f761c828455415df736e7122eef51d924f4378a713036d42a59212",
          "linkedWithoutMetadata": "b1d7876a39f761c828455415df736e7122eef51d924f4378a713036d42a59212"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable)",
          "createAuction(address,uint256,address,uint256,uint256,bool,uint256)",
          "placeBid(address,uint256)",
          "placeBid(address,uint256,uint256)",
          "withdrawBid(address,uint256)",
          "resultAuction(address,uint256)",
          "cancelAuction(address,uint256)",
          "toggleIsPaused()",
          "updateMinBidIncrement(uint256)",
          "updateBidWithdrawalLockTime(uint256)",
          "updateAuctionReservePrice(address,uint256,uint256)",
          "updateAuctionStartTime(address,uint256,uint256)",
          "updateAuctionEndTime(address,uint256,uint256)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "getAuction(address,uint256)",
          "getHighestBidder(address,uint256)",
          "reclaimERC20(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "minBidIncrement",
            "src": "contracts\\FantomAuction.sol:156"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bidWithdrawalLockTime",
            "src": "contracts\\FantomAuction.sol:159"
          },
          {
            "kind": "state-variable-assignment",
            "name": "platformFee",
            "src": "contracts\\FantomAuction.sol:162"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuction",
              "label": "auctions",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6732_storage))",
              "src": "contracts\\FantomAuction.sol:150"
            },
            {
              "contract": "FantomAuction",
              "label": "highestBids",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6739_storage))",
              "src": "contracts\\FantomAuction.sol:153"
            },
            {
              "contract": "FantomAuction",
              "label": "minBidIncrement",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:156"
            },
            {
              "contract": "FantomAuction",
              "label": "bidWithdrawalLockTime",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:159"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:162"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFeeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomAuction.sol:165"
            },
            {
              "contract": "FantomAuction",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)6539",
              "src": "contracts\\FantomAuction.sol:168"
            },
            {
              "contract": "FantomAuction",
              "label": "isPaused",
              "type": "t_bool",
              "src": "contracts\\FantomAuction.sol:171"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6732_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.Auction))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(Auction)6732_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.Auction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Auction)6732_storage": {
              "label": "struct FantomAuction.Auction",
              "members": [
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "minBid",
                  "type": "t_uint256"
                },
                {
                  "label": "reservePrice",
                  "type": "t_uint256"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256"
                },
                {
                  "label": "resulted",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6739_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.HighestBid))"
            },
            "t_mapping(t_uint256,t_struct(HighestBid)6739_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.HighestBid)"
            },
            "t_struct(HighestBid)6739_storage": {
              "label": "struct FantomAuction.HighestBid",
              "members": [
                {
                  "label": "bidder",
                  "type": "t_address_payable"
                },
                {
                  "label": "bid",
                  "type": "t_uint256"
                },
                {
                  "label": "lastBidTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)6539": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAddressRegistry": {
        "src": "contracts\\FantomPriceFeed.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenRegistry()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomBundleMarketplace": {
        "src": "contracts\\FantomMarketplace.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,address,address)",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomTokenRegistry": {
        "src": "contracts\\FantomPriceFeed.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enabled(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomBundleMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:39",
        "version": {
          "withMetadata": "58452c833a3e6bf49312ba56d4f24483ac163a2bf9e85105613b3491001ebe38",
          "withoutMetadata": "58452c833a3e6bf49312ba56d4f24483ac163a2bf9e85105613b3491001ebe38",
          "linkedWithoutMetadata": "58452c833a3e6bf49312ba56d4f24483ac163a2bf9e85105613b3491001ebe38"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20",
          "EnumerableSet"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "getListing(address,string)",
          "listItem(string,address[],uint256[],uint256[],address,uint256,uint256)",
          "cancelListing(string)",
          "updateListing(string,address,uint256)",
          "buyItem(string)",
          "buyItem(string,address)",
          "createOffer(string,address,uint256,uint256)",
          "cancelOffer(string)",
          "acceptOffer(string,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomBundleMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8636_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:106"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "owners",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts\\FantomBundleMarketplace.sol:109"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIdsPerItem",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4473_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:111"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "nftIndexes",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))",
              "src": "contracts\\FantomBundleMarketplace.sol:113"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIds",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "src": "contracts\\FantomBundleMarketplace.sol:115"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "offers",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8643_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:118"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomBundleMarketplace.sol:121"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomBundleMarketplace.sol:124"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)8499",
              "src": "contracts\\FantomBundleMarketplace.sol:127"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8636_storage))": {
              "label": "mapping(address => mapping(bytes32 => struct FantomBundleMarketplace.Listing))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_struct(Listing)8636_storage)": {
              "label": "mapping(bytes32 => struct FantomBundleMarketplace.Listing)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Listing)8636_storage": {
              "label": "struct FantomBundleMarketplace.Listing",
              "members": [
                {
                  "label": "nfts",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "tokenIds",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "quantities",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4473_storage))": {
              "label": "mapping(address => mapping(uint256 => struct EnumerableSet.Bytes32Set))"
            },
            "t_mapping(t_uint256,t_struct(Bytes32Set)4473_storage)": {
              "label": "mapping(uint256 => struct EnumerableSet.Bytes32Set)"
            },
            "t_struct(Bytes32Set)4473_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4293_storage"
                }
              ]
            },
            "t_struct(Set)4293_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
              "label": "mapping(bytes32 => mapping(address => mapping(uint256 => uint256)))"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8643_storage))": {
              "label": "mapping(bytes32 => mapping(address => struct FantomBundleMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)8643_storage)": {
              "label": "mapping(address => struct FantomBundleMarketplace.Offer)"
            },
            "t_struct(Offer)8643_storage": {
              "label": "struct FantomBundleMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)8499": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomMarketplace": {
        "src": "contracts\\FantomMarketplace.sol:71",
        "version": {
          "withMetadata": "aac16dd29bd0f5a23ab23dc808b9527af84cbef6c8f705a7b396a75bc5c565f9",
          "withoutMetadata": "aac16dd29bd0f5a23ab23dc808b9527af84cbef6c8f705a7b396a75bc5c565f9",
          "linkedWithoutMetadata": "aac16dd29bd0f5a23ab23dc808b9527af84cbef6c8f705a7b396a75bc5c565f9"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable,uint16)",
          "listItem(address,uint256,uint256,address,uint256,uint256)",
          "cancelListing(address,uint256)",
          "updateListing(address,uint256,address,uint256)",
          "buyItem(address,uint256,address,address)",
          "createOffer(address,uint256,address,uint256,uint256,uint256)",
          "cancelOffer(address,uint256)",
          "acceptOffer(address,uint256,address)",
          "registerRoyalty(address,uint256,uint16)",
          "registerCollectionRoyalty(address,address,uint16,address)",
          "getPrice(address)",
          "updatePlatformFee(uint16)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomMarketplace",
              "label": "minters",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
              "src": "contracts\\FantomMarketplace.sol:151"
            },
            {
              "contract": "FantomMarketplace",
              "label": "royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint16))",
              "src": "contracts\\FantomMarketplace.sol:154"
            },
            {
              "contract": "FantomMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10840_storage)))",
              "src": "contracts\\FantomMarketplace.sol:157"
            },
            {
              "contract": "FantomMarketplace",
              "label": "offers",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10849_storage)))",
              "src": "contracts\\FantomMarketplace.sol:161"
            },
            {
              "contract": "FantomMarketplace",
              "label": "platformFee",
              "type": "t_uint16",
              "src": "contracts\\FantomMarketplace.sol:165"
            },
            {
              "contract": "FantomMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomMarketplace.sol:168"
            },
            {
              "contract": "FantomMarketplace",
              "label": "collectionRoyalties",
              "type": "t_mapping(t_address,t_struct(CollectionRoyalty)10856_storage)",
              "src": "contracts\\FantomMarketplace.sol:171"
            },
            {
              "contract": "FantomMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)10670",
              "src": "contracts\\FantomMarketplace.sol:174"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
              "label": "mapping(address => mapping(uint256 => address))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint16))": {
              "label": "mapping(address => mapping(uint256 => uint16))"
            },
            "t_mapping(t_uint256,t_uint16)": {
              "label": "mapping(uint256 => uint16)"
            },
            "t_uint16": {
              "label": "uint16"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10840_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Listing)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10840_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Listing))"
            },
            "t_mapping(t_address,t_struct(Listing)10840_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Listing)"
            },
            "t_struct(Listing)10840_storage": {
              "label": "struct FantomMarketplace.Listing",
              "members": [
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10849_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Offer)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10849_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)10849_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Offer)"
            },
            "t_struct(Offer)10849_storage": {
              "label": "struct FantomMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_struct(CollectionRoyalty)10856_storage)": {
              "label": "mapping(address => struct FantomMarketplace.CollectionRoyalty)"
            },
            "t_struct(CollectionRoyalty)10856_storage": {
              "label": "struct FantomMarketplace.CollectionRoyalty",
              "members": [
                {
                  "label": "royalty",
                  "type": "t_uint16"
                },
                {
                  "label": "creator",
                  "type": "t_address"
                },
                {
                  "label": "feeRecipient",
                  "type": "t_address"
                }
              ]
            },
            "t_contract(IFantomAddressRegistry)10670": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAuction": {
        "src": "contracts\\FantomMarketplace.sol:35",
        "inherit": [],
        "libraries": [],
        "methods": [
          "auctions(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomNFTFactory": {
        "src": "contracts\\FantomMarketplace.sol:57",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exists(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomPriceFeed": {
        "src": "contracts\\FantomMarketplace.sol:65",
        "inherit": [],
        "libraries": [],
        "methods": [
          "wFTM()",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactory": {
        "src": "contracts\\FantomNFTFactory.sol:8",
        "version": {
          "withMetadata": "914fd99126bf5141b41a4874daabbef72d4fc1ea2b081fb9e57fc6e628b82e75",
          "withoutMetadata": "914fd99126bf5141b41a4874daabbef72d4fc1ea2b081fb9e57fc6e628b82e75",
          "linkedWithoutMetadata": "914fd99126bf5141b41a4874daabbef72d4fc1ea2b081fb9e57fc6e628b82e75"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactory",
            "src": "contracts\\FantomNFTFactory.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactory",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:14"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:17"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:20"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactory.sol:23"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactory.sol:26"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTFactory.sol:29"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomNFTFactory.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactoryPrivate": {
        "src": "contracts\\FantomNFTFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "9aaefeb44120a7c5f3eb39fa4f86f2b7b33cb56d60959f33a42ffe1ed2ad1b43",
          "withoutMetadata": "9aaefeb44120a7c5f3eb39fa4f86f2b7b33cb56d60959f33a42ffe1ed2ad1b43",
          "linkedWithoutMetadata": "9aaefeb44120a7c5f3eb39fa4f86f2b7b33cb56d60959f33a42ffe1ed2ad1b43"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactoryPrivate",
            "src": "contracts\\FantomNFTFactoryPrivate.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:29"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradable": {
        "src": "contracts\\FantomNFTTradable.sol:12",
        "version": {
          "withMetadata": "e4531be1f170df8480065b3b9fc86616d512addea17d4e897e15d403e626c887",
          "withoutMetadata": "e4531be1f170df8480065b3b9fc86616d512addea17d4e897e15d403e626c887",
          "linkedWithoutMetadata": "e4531be1f170df8480065b3b9fc86616d512addea17d4e897e15d403e626c887"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradable",
            "src": "contracts\\FantomNFTTradable.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts\\FantomNFTTradable.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradable",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:27"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:28"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:29"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradable.sol:30"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradable.sol:33"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTTradable.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradablePrivate": {
        "src": "contracts\\FantomNFTTradablePrivate.sol:12",
        "version": {
          "withMetadata": "e61bb5b78db344eeab50005060c51f74a351bf9bd4d0389705178c2efc6f461e",
          "withoutMetadata": "e61bb5b78db344eeab50005060c51f74a351bf9bd4d0389705178c2efc6f461e",
          "linkedWithoutMetadata": "e61bb5b78db344eeab50005060c51f74a351bf9bd4d0389705178c2efc6f461e"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradablePrivate",
            "src": "contracts\\FantomNFTTradablePrivate.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts\\FantomNFTTradablePrivate.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:27"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:28"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:29"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradablePrivate.sol:30"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradablePrivate.sol:33"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTTradablePrivate.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomPriceFeed": {
        "src": "contracts\\FantomPriceFeed.sol:21",
        "version": {
          "withMetadata": "c3486acea602badcee713e0d4a167bc6e4167f4ebe58ea0974294fe748fcd396",
          "withoutMetadata": "c3486acea602badcee713e0d4a167bc6e4167f4ebe58ea0974294fe748fcd396",
          "linkedWithoutMetadata": "c3486acea602badcee713e0d4a167bc6e4167f4ebe58ea0974294fe748fcd396"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerOracle(address,address)",
          "updateOracle(address,address)",
          "getPrice(address)",
          "updateAddressRegistry(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomPriceFeed",
            "src": "contracts\\FantomPriceFeed.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomPriceFeed",
              "label": "oracles",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts\\FantomPriceFeed.sol:23"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "addressRegistry",
              "type": "t_address",
              "src": "contracts\\FantomPriceFeed.sol:26"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "wFTM",
              "type": "t_address",
              "src": "contracts\\FantomPriceFeed.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IOracle": {
        "src": "contracts\\FantomPriceFeed.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestAnswer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomTokenRegistry": {
        "src": "contracts\\FantomTokenRegistry.sol:7",
        "version": {
          "withMetadata": "15e092d3ba18f8b0b09cf3a08319d468dc9c698c094acc12a625b236ffdfe0d2",
          "withoutMetadata": "15e092d3ba18f8b0b09cf3a08319d468dc9c698c094acc12a625b236ffdfe0d2",
          "linkedWithoutMetadata": "15e092d3ba18f8b0b09cf3a08319d468dc9c698c094acc12a625b236ffdfe0d2"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "add(address)",
          "remove(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomTokenRegistry",
              "label": "enabled",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomTokenRegistry.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155": {
        "src": "contracts\\library\\ERC1155.sol:11",
        "version": {
          "withMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71",
          "withoutMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71",
          "linkedWithoutMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71"
        },
        "inherit": [
          "IERC165"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155",
              "label": "balances",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts\\library\\ERC1155.sol:25"
            },
            {
              "contract": "ERC1155",
              "label": "operators",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts\\library\\ERC1155.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155Metadata": {
        "src": "contracts\\library\\ERC1155Metadata.sol:9",
        "version": {
          "withMetadata": "9f4ac3045c6d47f7902357b737f9b36eb6d74a6144b8f5ff47ba6041be851533",
          "withoutMetadata": "9f4ac3045c6d47f7902357b737f9b36eb6d74a6144b8f5ff47ba6041be851533",
          "linkedWithoutMetadata": "9f4ac3045c6d47f7902357b737f9b36eb6d74a6144b8f5ff47ba6041be851533"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155Metadata",
              "label": "baseMetadataURI",
              "type": "t_string_storage",
              "src": "contracts\\library\\ERC1155Metadata.sol:12"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155MintBurn": {
        "src": "contracts\\library\\ERC1155MintBurn.sol:9",
        "version": {
          "withMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71",
          "withoutMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71",
          "linkedWithoutMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71"
        },
        "inherit": [
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155TokenReceiver": {
        "src": "contracts\\library\\IERC1155TokenReceiver.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BiddingContractMock": {
        "src": "contracts\\mock\\BiddingContractMock.sol:7",
        "version": {
          "withMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a",
          "withoutMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a",
          "linkedWithoutMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "bid(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BiddingContractMock",
            "src": "contracts\\mock\\BiddingContractMock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BiddingContractMock",
              "label": "auctionContract",
              "type": "t_contract(FantomAuction)8471",
              "src": "contracts\\mock\\BiddingContractMock.sol:8"
            }
          ],
          "types": {
            "t_contract(FantomAuction)8471": {
              "label": "contract FantomAuction"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuctionMock": {
        "src": "contracts\\mock\\FantomAuctionMock.sol:7",
        "version": {
          "withMetadata": "7d55c898852b8b1e86d032cef7abd574ffe789a496166c8870c9ef7b97c292ea",
          "withoutMetadata": "7d55c898852b8b1e86d032cef7abd574ffe789a496166c8870c9ef7b97c292ea",
          "linkedWithoutMetadata": "7d55c898852b8b1e86d032cef7abd574ffe789a496166c8870c9ef7b97c292ea"
        },
        "inherit": [
          "FantomAuction",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "setNowOverride(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuctionMock",
              "label": "nowOverride",
              "type": "t_uint256",
              "src": "contracts\\mock\\FantomAuctionMock.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts\\mock\\MockERC20.sol:7",
        "version": {
          "withMetadata": "b73d87e4c8cacbaaea189aec044e8ddaf418db412bc65c27d4f610aa1ed782c7",
          "withoutMetadata": "b73d87e4c8cacbaaea189aec044e8ddaf418db412bc65c27d4f610aa1ed782c7",
          "linkedWithoutMetadata": "b73d87e4c8cacbaaea189aec044e8ddaf418db412bc65c27d4f610aa1ed782c7"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts\\mock\\MockERC20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:340",
        "version": {
          "withMetadata": "75ce8f9e6c8139b9214082e60df86ee29b7d565d21778a045d6e314517331159",
          "withoutMetadata": "75ce8f9e6c8139b9214082e60df86ee29b7d565d21778a045d6e314517331159",
          "linkedWithoutMetadata": "75ce8f9e6c8139b9214082e60df86ee29b7d565d21778a045d6e314517331159"
        },
        "inherit": [
          "UpgradeabilityProxy",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AdminUpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:350"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:428"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:46",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:264",
        "version": {
          "withMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298",
          "withoutMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298",
          "linkedWithoutMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298"
        },
        "inherit": [
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:273"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:277"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyAdmin": {
        "src": "contracts\\proxy\\ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "3305751fab7d99ff0661e547aca203a151c84f44f5d8c4da9e0b927b0467e8d6",
          "withoutMetadata": "3305751fab7d99ff0661e547aca203a151c84f44f5d8c4da9e0b927b0467e8d6",
          "linkedWithoutMetadata": "3305751fab7d99ff0661e547aca203a151c84f44f5d8c4da9e0b927b0467e8d6"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\math\\SafeMath.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165",
            "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC165",
              "label": "_supportedInterfaces",
              "type": "t_mapping(t_bytes4,t_bool)",
              "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "contracts\\library\\IERC165.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155": {
        "src": "@openzeppelin\\contracts\\token\\ERC1155\\IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "allowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\SafeERC20.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:21",
        "version": {
          "withMetadata": "ec590816ed5c25a1835c7c8e917fe81a8ed80bf74067decaaff8e1893d572804",
          "withoutMetadata": "ec590816ed5c25a1835c7c8e917fe81a8ed80bf74067decaaff8e1893d572804",
          "linkedWithoutMetadata": "ec590816ed5c25a1835c7c8e917fe81a8ed80bf74067decaaff8e1893d572804"
        },
        "inherit": [
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address",
          "EnumerableSet",
          "EnumerableMap",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "baseURI()",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:93"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_holderTokens",
              "type": "t_mapping(t_address,t_struct(UintSet)4679_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenOwners",
              "type": "t_struct(UintToAddressMap)4056_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:42"
            },
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:45"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:48"
            },
            {
              "contract": "ERC721",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:51"
            },
            {
              "contract": "ERC721",
              "label": "_baseURI",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(UintSet)4679_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UintSet)4679_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4293_storage"
                }
              ]
            },
            "t_struct(Set)4293_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(UintToAddressMap)4056_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)3738_storage"
                }
              ]
            },
            "t_struct(Map)3738_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)3730_storage)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_struct(MapEntry)3730_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]"
            },
            "t_struct(MapEntry)3730_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Enumerable.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:118",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableMap": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableMap.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableSet.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:8",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomAddressRegistry": {
        "src": "contracts\\FantomAddressRegistry.sol:8",
        "version": {
          "withMetadata": "01210ef5a113adaade232d13a6ed6aa0103f2b25eafeceefe296975e29df66cb",
          "withoutMetadata": "01210ef5a113adaade232d13a6ed6aa0103f2b25eafeceefe296975e29df66cb",
          "linkedWithoutMetadata": "01210ef5a113adaade232d13a6ed6aa0103f2b25eafeceefe296975e29df66cb"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "updateArtion(address)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateNFTFactory(address)",
          "updateNFTFactoryPrivate(address)",
          "updateArtFactory(address)",
          "updateArtFactoryPrivate(address)",
          "updateTokenRegistry(address)",
          "updatePriceFeed(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAddressRegistry",
              "label": "artion",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:12"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:15"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:18"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:21"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "factory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:24"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:27"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "artFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:30"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateArtFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:33"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "tokenRegistry",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:36"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "priceFeed",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactory": {
        "src": "contracts\\FantomArtFactory.sol:8",
        "version": {
          "withMetadata": "9df27e05e44575e70daa8898410ab03720347f72f29e1ec84ce8d2fdf14b534f",
          "withoutMetadata": "9df27e05e44575e70daa8898410ab03720347f72f29e1ec84ce8d2fdf14b534f",
          "linkedWithoutMetadata": "9df27e05e44575e70daa8898410ab03720347f72f29e1ec84ce8d2fdf14b534f"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactory",
            "src": "contracts\\FantomArtFactory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactory.sol:14"
            },
            {
              "contract": "FantomArtFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactory.sol:17"
            },
            {
              "contract": "FantomArtFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactory.sol:20"
            },
            {
              "contract": "FantomArtFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactory.sol:23"
            },
            {
              "contract": "FantomArtFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtFactory.sol:26"
            },
            {
              "contract": "FantomArtFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomArtFactory.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactoryPrivate": {
        "src": "contracts\\FantomArtFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "298a11e97a6c209f78207f6e6f2bbb1472158735ca002b411e4061af0a58c75a",
          "withoutMetadata": "298a11e97a6c209f78207f6e6f2bbb1472158735ca002b411e4061af0a58c75a",
          "linkedWithoutMetadata": "298a11e97a6c209f78207f6e6f2bbb1472158735ca002b411e4061af0a58c75a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactoryPrivate",
            "src": "contracts\\FantomArtFactoryPrivate.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomArtFactoryPrivate.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradable": {
        "src": "contracts\\FantomArtTradable.sol:22",
        "version": {
          "withMetadata": "073fe51513c158c095357630028d8a0956ecb69b5d37aef8e14b7ebd12b802cd",
          "withoutMetadata": "073fe51513c158c095357630028d8a0956ecb69b5d37aef8e14b7ebd12b802cd",
          "linkedWithoutMetadata": "073fe51513c158c095357630028d8a0956ecb69b5d37aef8e14b7ebd12b802cd"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradable",
            "src": "contracts\\FantomArtTradable.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts\\FantomArtTradable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradable",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradable.sol:28"
            },
            {
              "contract": "FantomArtTradable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts\\FantomArtTradable.sol:31"
            },
            {
              "contract": "FantomArtTradable",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtTradable.sol:33"
            },
            {
              "contract": "FantomArtTradable",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\FantomArtTradable.sol:34"
            },
            {
              "contract": "FantomArtTradable",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradable.sol:37"
            },
            {
              "contract": "FantomArtTradable",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradable.sol:39"
            },
            {
              "contract": "FantomArtTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradable.sol:41"
            },
            {
              "contract": "FantomArtTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtTradable.sol:43"
            },
            {
              "contract": "FantomArtTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradable.sol:45"
            },
            {
              "contract": "FantomArtTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradable.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "OwnableDelegateProxy": {
        "src": "contracts\\FantomArtTradablePrivate.sol:10",
        "version": {
          "withMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "withoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "linkedWithoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyRegistry": {
        "src": "contracts\\FantomArtTradablePrivate.sol:12",
        "version": {
          "withMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9",
          "withoutMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9",
          "linkedWithoutMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ProxyRegistry",
              "label": "proxies",
              "type": "t_mapping(t_address,t_contract(OwnableDelegateProxy)5923)",
              "src": "contracts\\FantomArtTradablePrivate.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_contract(OwnableDelegateProxy)5923)": {
              "label": "mapping(address => contract OwnableDelegateProxy)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(OwnableDelegateProxy)5923": {
              "label": "contract OwnableDelegateProxy"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradablePrivate": {
        "src": "contracts\\FantomArtTradablePrivate.sol:22",
        "version": {
          "withMetadata": "73c5ea2128ac23354b4437cd46710a957269f6a5e10d6f2eb8955d0f7811fd0b",
          "withoutMetadata": "73c5ea2128ac23354b4437cd46710a957269f6a5e10d6f2eb8955d0f7811fd0b",
          "linkedWithoutMetadata": "73c5ea2128ac23354b4437cd46710a957269f6a5e10d6f2eb8955d0f7811fd0b"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradablePrivate",
            "src": "contracts\\FantomArtTradablePrivate.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts\\FantomArtTradablePrivate.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradablePrivate.sol:28"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts\\FantomArtTradablePrivate.sol:31"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtTradablePrivate.sol:33"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\FantomArtTradablePrivate.sol:34"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradablePrivate.sol:37"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradablePrivate.sol:39"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradablePrivate.sol:41"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtTradablePrivate.sol:43"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradablePrivate.sol:45"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradablePrivate.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Artion": {
        "src": "contracts\\FantomArtion.sol:9",
        "version": {
          "withMetadata": "add88fc63648eaac7c0296a3fa6d50c99000555ee0cf9ccca22f16032ebb051a",
          "withoutMetadata": "add88fc63648eaac7c0296a3fa6d50c99000555ee0cf9ccca22f16032ebb051a",
          "linkedWithoutMetadata": "add88fc63648eaac7c0296a3fa6d50c99000555ee0cf9ccca22f16032ebb051a"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable,uint256)",
          "mint(address,string)",
          "burn(uint256)",
          "exists(uint256)",
          "isApproved(uint256,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Artion",
            "src": "contracts\\FantomArtion.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Artion",
              "label": "tokenIdPointer",
              "type": "t_uint256",
              "src": "contracts\\FantomArtion.sol:26"
            },
            {
              "contract": "Artion",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtion.sol:29"
            },
            {
              "contract": "Artion",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtion.sol:32"
            },
            {
              "contract": "Artion",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtion.sol:35"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuction": {
        "src": "contracts\\FantomAuction.sol:55",
        "version": {
          "withMetadata": "b1d7876a39f761c828455415df736e7122eef51d924f4378a713036d42a59212",
          "withoutMetadata": "b1d7876a39f761c828455415df736e7122eef51d924f4378a713036d42a59212",
          "linkedWithoutMetadata": "b1d7876a39f761c828455415df736e7122eef51d924f4378a713036d42a59212"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable)",
          "createAuction(address,uint256,address,uint256,uint256,bool,uint256)",
          "placeBid(address,uint256)",
          "placeBid(address,uint256,uint256)",
          "withdrawBid(address,uint256)",
          "resultAuction(address,uint256)",
          "cancelAuction(address,uint256)",
          "toggleIsPaused()",
          "updateMinBidIncrement(uint256)",
          "updateBidWithdrawalLockTime(uint256)",
          "updateAuctionReservePrice(address,uint256,uint256)",
          "updateAuctionStartTime(address,uint256,uint256)",
          "updateAuctionEndTime(address,uint256,uint256)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "getAuction(address,uint256)",
          "getHighestBidder(address,uint256)",
          "reclaimERC20(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "minBidIncrement",
            "src": "contracts\\FantomAuction.sol:156"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bidWithdrawalLockTime",
            "src": "contracts\\FantomAuction.sol:159"
          },
          {
            "kind": "state-variable-assignment",
            "name": "platformFee",
            "src": "contracts\\FantomAuction.sol:162"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuction",
              "label": "auctions",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6732_storage))",
              "src": "contracts\\FantomAuction.sol:150"
            },
            {
              "contract": "FantomAuction",
              "label": "highestBids",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6739_storage))",
              "src": "contracts\\FantomAuction.sol:153"
            },
            {
              "contract": "FantomAuction",
              "label": "minBidIncrement",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:156"
            },
            {
              "contract": "FantomAuction",
              "label": "bidWithdrawalLockTime",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:159"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:162"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFeeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomAuction.sol:165"
            },
            {
              "contract": "FantomAuction",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)6539",
              "src": "contracts\\FantomAuction.sol:168"
            },
            {
              "contract": "FantomAuction",
              "label": "isPaused",
              "type": "t_bool",
              "src": "contracts\\FantomAuction.sol:171"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6732_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.Auction))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(Auction)6732_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.Auction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Auction)6732_storage": {
              "label": "struct FantomAuction.Auction",
              "members": [
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "minBid",
                  "type": "t_uint256"
                },
                {
                  "label": "reservePrice",
                  "type": "t_uint256"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256"
                },
                {
                  "label": "resulted",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6739_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.HighestBid))"
            },
            "t_mapping(t_uint256,t_struct(HighestBid)6739_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.HighestBid)"
            },
            "t_struct(HighestBid)6739_storage": {
              "label": "struct FantomAuction.HighestBid",
              "members": [
                {
                  "label": "bidder",
                  "type": "t_address_payable"
                },
                {
                  "label": "bid",
                  "type": "t_uint256"
                },
                {
                  "label": "lastBidTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)6539": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAddressRegistry": {
        "src": "contracts\\FantomPriceFeed.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenRegistry()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomBundleMarketplace": {
        "src": "contracts\\FantomMarketplace.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,address,address)",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomTokenRegistry": {
        "src": "contracts\\FantomPriceFeed.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enabled(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomBundleMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:39",
        "version": {
          "withMetadata": "58452c833a3e6bf49312ba56d4f24483ac163a2bf9e85105613b3491001ebe38",
          "withoutMetadata": "58452c833a3e6bf49312ba56d4f24483ac163a2bf9e85105613b3491001ebe38",
          "linkedWithoutMetadata": "58452c833a3e6bf49312ba56d4f24483ac163a2bf9e85105613b3491001ebe38"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20",
          "EnumerableSet"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "getListing(address,string)",
          "listItem(string,address[],uint256[],uint256[],address,uint256,uint256)",
          "cancelListing(string)",
          "updateListing(string,address,uint256)",
          "buyItem(string)",
          "buyItem(string,address)",
          "createOffer(string,address,uint256,uint256)",
          "cancelOffer(string)",
          "acceptOffer(string,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomBundleMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8636_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:106"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "owners",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts\\FantomBundleMarketplace.sol:109"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIdsPerItem",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4473_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:111"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "nftIndexes",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))",
              "src": "contracts\\FantomBundleMarketplace.sol:113"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIds",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "src": "contracts\\FantomBundleMarketplace.sol:115"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "offers",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8643_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:118"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomBundleMarketplace.sol:121"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomBundleMarketplace.sol:124"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)8499",
              "src": "contracts\\FantomBundleMarketplace.sol:127"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8636_storage))": {
              "label": "mapping(address => mapping(bytes32 => struct FantomBundleMarketplace.Listing))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_struct(Listing)8636_storage)": {
              "label": "mapping(bytes32 => struct FantomBundleMarketplace.Listing)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Listing)8636_storage": {
              "label": "struct FantomBundleMarketplace.Listing",
              "members": [
                {
                  "label": "nfts",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "tokenIds",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "quantities",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4473_storage))": {
              "label": "mapping(address => mapping(uint256 => struct EnumerableSet.Bytes32Set))"
            },
            "t_mapping(t_uint256,t_struct(Bytes32Set)4473_storage)": {
              "label": "mapping(uint256 => struct EnumerableSet.Bytes32Set)"
            },
            "t_struct(Bytes32Set)4473_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4293_storage"
                }
              ]
            },
            "t_struct(Set)4293_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
              "label": "mapping(bytes32 => mapping(address => mapping(uint256 => uint256)))"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8643_storage))": {
              "label": "mapping(bytes32 => mapping(address => struct FantomBundleMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)8643_storage)": {
              "label": "mapping(address => struct FantomBundleMarketplace.Offer)"
            },
            "t_struct(Offer)8643_storage": {
              "label": "struct FantomBundleMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)8499": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomMarketplace": {
        "src": "contracts\\FantomMarketplace.sol:71",
        "version": {
          "withMetadata": "aac16dd29bd0f5a23ab23dc808b9527af84cbef6c8f705a7b396a75bc5c565f9",
          "withoutMetadata": "aac16dd29bd0f5a23ab23dc808b9527af84cbef6c8f705a7b396a75bc5c565f9",
          "linkedWithoutMetadata": "aac16dd29bd0f5a23ab23dc808b9527af84cbef6c8f705a7b396a75bc5c565f9"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable,uint16)",
          "listItem(address,uint256,uint256,address,uint256,uint256)",
          "cancelListing(address,uint256)",
          "updateListing(address,uint256,address,uint256)",
          "buyItem(address,uint256,address,address)",
          "createOffer(address,uint256,address,uint256,uint256,uint256)",
          "cancelOffer(address,uint256)",
          "acceptOffer(address,uint256,address)",
          "registerRoyalty(address,uint256,uint16)",
          "registerCollectionRoyalty(address,address,uint16,address)",
          "getPrice(address)",
          "updatePlatformFee(uint16)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomMarketplace",
              "label": "minters",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
              "src": "contracts\\FantomMarketplace.sol:151"
            },
            {
              "contract": "FantomMarketplace",
              "label": "royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint16))",
              "src": "contracts\\FantomMarketplace.sol:154"
            },
            {
              "contract": "FantomMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10840_storage)))",
              "src": "contracts\\FantomMarketplace.sol:157"
            },
            {
              "contract": "FantomMarketplace",
              "label": "offers",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10849_storage)))",
              "src": "contracts\\FantomMarketplace.sol:161"
            },
            {
              "contract": "FantomMarketplace",
              "label": "platformFee",
              "type": "t_uint16",
              "src": "contracts\\FantomMarketplace.sol:165"
            },
            {
              "contract": "FantomMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomMarketplace.sol:168"
            },
            {
              "contract": "FantomMarketplace",
              "label": "collectionRoyalties",
              "type": "t_mapping(t_address,t_struct(CollectionRoyalty)10856_storage)",
              "src": "contracts\\FantomMarketplace.sol:171"
            },
            {
              "contract": "FantomMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)10670",
              "src": "contracts\\FantomMarketplace.sol:174"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
              "label": "mapping(address => mapping(uint256 => address))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint16))": {
              "label": "mapping(address => mapping(uint256 => uint16))"
            },
            "t_mapping(t_uint256,t_uint16)": {
              "label": "mapping(uint256 => uint16)"
            },
            "t_uint16": {
              "label": "uint16"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10840_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Listing)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10840_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Listing))"
            },
            "t_mapping(t_address,t_struct(Listing)10840_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Listing)"
            },
            "t_struct(Listing)10840_storage": {
              "label": "struct FantomMarketplace.Listing",
              "members": [
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10849_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Offer)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10849_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)10849_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Offer)"
            },
            "t_struct(Offer)10849_storage": {
              "label": "struct FantomMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_struct(CollectionRoyalty)10856_storage)": {
              "label": "mapping(address => struct FantomMarketplace.CollectionRoyalty)"
            },
            "t_struct(CollectionRoyalty)10856_storage": {
              "label": "struct FantomMarketplace.CollectionRoyalty",
              "members": [
                {
                  "label": "royalty",
                  "type": "t_uint16"
                },
                {
                  "label": "creator",
                  "type": "t_address"
                },
                {
                  "label": "feeRecipient",
                  "type": "t_address"
                }
              ]
            },
            "t_contract(IFantomAddressRegistry)10670": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAuction": {
        "src": "contracts\\FantomMarketplace.sol:35",
        "inherit": [],
        "libraries": [],
        "methods": [
          "auctions(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomNFTFactory": {
        "src": "contracts\\FantomMarketplace.sol:57",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exists(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomPriceFeed": {
        "src": "contracts\\FantomMarketplace.sol:65",
        "inherit": [],
        "libraries": [],
        "methods": [
          "wFTM()",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactory": {
        "src": "contracts\\FantomNFTFactory.sol:8",
        "version": {
          "withMetadata": "914fd99126bf5141b41a4874daabbef72d4fc1ea2b081fb9e57fc6e628b82e75",
          "withoutMetadata": "914fd99126bf5141b41a4874daabbef72d4fc1ea2b081fb9e57fc6e628b82e75",
          "linkedWithoutMetadata": "914fd99126bf5141b41a4874daabbef72d4fc1ea2b081fb9e57fc6e628b82e75"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactory",
            "src": "contracts\\FantomNFTFactory.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactory",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:14"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:17"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:20"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactory.sol:23"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactory.sol:26"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTFactory.sol:29"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomNFTFactory.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactoryPrivate": {
        "src": "contracts\\FantomNFTFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "9aaefeb44120a7c5f3eb39fa4f86f2b7b33cb56d60959f33a42ffe1ed2ad1b43",
          "withoutMetadata": "9aaefeb44120a7c5f3eb39fa4f86f2b7b33cb56d60959f33a42ffe1ed2ad1b43",
          "linkedWithoutMetadata": "9aaefeb44120a7c5f3eb39fa4f86f2b7b33cb56d60959f33a42ffe1ed2ad1b43"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactoryPrivate",
            "src": "contracts\\FantomNFTFactoryPrivate.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:29"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradable": {
        "src": "contracts\\FantomNFTTradable.sol:12",
        "version": {
          "withMetadata": "e4531be1f170df8480065b3b9fc86616d512addea17d4e897e15d403e626c887",
          "withoutMetadata": "e4531be1f170df8480065b3b9fc86616d512addea17d4e897e15d403e626c887",
          "linkedWithoutMetadata": "e4531be1f170df8480065b3b9fc86616d512addea17d4e897e15d403e626c887"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradable",
            "src": "contracts\\FantomNFTTradable.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts\\FantomNFTTradable.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradable",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:27"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:28"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:29"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradable.sol:30"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradable.sol:33"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTTradable.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradablePrivate": {
        "src": "contracts\\FantomNFTTradablePrivate.sol:12",
        "version": {
          "withMetadata": "e61bb5b78db344eeab50005060c51f74a351bf9bd4d0389705178c2efc6f461e",
          "withoutMetadata": "e61bb5b78db344eeab50005060c51f74a351bf9bd4d0389705178c2efc6f461e",
          "linkedWithoutMetadata": "e61bb5b78db344eeab50005060c51f74a351bf9bd4d0389705178c2efc6f461e"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradablePrivate",
            "src": "contracts\\FantomNFTTradablePrivate.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts\\FantomNFTTradablePrivate.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:27"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:28"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:29"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradablePrivate.sol:30"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradablePrivate.sol:33"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTTradablePrivate.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomPriceFeed": {
        "src": "contracts\\FantomPriceFeed.sol:21",
        "version": {
          "withMetadata": "c3486acea602badcee713e0d4a167bc6e4167f4ebe58ea0974294fe748fcd396",
          "withoutMetadata": "c3486acea602badcee713e0d4a167bc6e4167f4ebe58ea0974294fe748fcd396",
          "linkedWithoutMetadata": "c3486acea602badcee713e0d4a167bc6e4167f4ebe58ea0974294fe748fcd396"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerOracle(address,address)",
          "updateOracle(address,address)",
          "getPrice(address)",
          "updateAddressRegistry(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomPriceFeed",
            "src": "contracts\\FantomPriceFeed.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomPriceFeed",
              "label": "oracles",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts\\FantomPriceFeed.sol:23"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "addressRegistry",
              "type": "t_address",
              "src": "contracts\\FantomPriceFeed.sol:26"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "wFTM",
              "type": "t_address",
              "src": "contracts\\FantomPriceFeed.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IOracle": {
        "src": "contracts\\FantomPriceFeed.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestAnswer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomTokenRegistry": {
        "src": "contracts\\FantomTokenRegistry.sol:7",
        "version": {
          "withMetadata": "15e092d3ba18f8b0b09cf3a08319d468dc9c698c094acc12a625b236ffdfe0d2",
          "withoutMetadata": "15e092d3ba18f8b0b09cf3a08319d468dc9c698c094acc12a625b236ffdfe0d2",
          "linkedWithoutMetadata": "15e092d3ba18f8b0b09cf3a08319d468dc9c698c094acc12a625b236ffdfe0d2"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "add(address)",
          "remove(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomTokenRegistry",
              "label": "enabled",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomTokenRegistry.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155": {
        "src": "contracts\\library\\ERC1155.sol:11",
        "version": {
          "withMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71",
          "withoutMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71",
          "linkedWithoutMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71"
        },
        "inherit": [
          "IERC165"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155",
              "label": "balances",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts\\library\\ERC1155.sol:25"
            },
            {
              "contract": "ERC1155",
              "label": "operators",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts\\library\\ERC1155.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155Metadata": {
        "src": "contracts\\library\\ERC1155Metadata.sol:9",
        "version": {
          "withMetadata": "9f4ac3045c6d47f7902357b737f9b36eb6d74a6144b8f5ff47ba6041be851533",
          "withoutMetadata": "9f4ac3045c6d47f7902357b737f9b36eb6d74a6144b8f5ff47ba6041be851533",
          "linkedWithoutMetadata": "9f4ac3045c6d47f7902357b737f9b36eb6d74a6144b8f5ff47ba6041be851533"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155Metadata",
              "label": "baseMetadataURI",
              "type": "t_string_storage",
              "src": "contracts\\library\\ERC1155Metadata.sol:12"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155MintBurn": {
        "src": "contracts\\library\\ERC1155MintBurn.sol:9",
        "version": {
          "withMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71",
          "withoutMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71",
          "linkedWithoutMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71"
        },
        "inherit": [
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155TokenReceiver": {
        "src": "contracts\\library\\IERC1155TokenReceiver.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BiddingContractMock": {
        "src": "contracts\\mock\\BiddingContractMock.sol:7",
        "version": {
          "withMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a",
          "withoutMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a",
          "linkedWithoutMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "bid(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BiddingContractMock",
            "src": "contracts\\mock\\BiddingContractMock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BiddingContractMock",
              "label": "auctionContract",
              "type": "t_contract(FantomAuction)8471",
              "src": "contracts\\mock\\BiddingContractMock.sol:8"
            }
          ],
          "types": {
            "t_contract(FantomAuction)8471": {
              "label": "contract FantomAuction"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuctionMock": {
        "src": "contracts\\mock\\FantomAuctionMock.sol:7",
        "version": {
          "withMetadata": "7d55c898852b8b1e86d032cef7abd574ffe789a496166c8870c9ef7b97c292ea",
          "withoutMetadata": "7d55c898852b8b1e86d032cef7abd574ffe789a496166c8870c9ef7b97c292ea",
          "linkedWithoutMetadata": "7d55c898852b8b1e86d032cef7abd574ffe789a496166c8870c9ef7b97c292ea"
        },
        "inherit": [
          "FantomAuction",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "setNowOverride(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuctionMock",
              "label": "nowOverride",
              "type": "t_uint256",
              "src": "contracts\\mock\\FantomAuctionMock.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts\\mock\\MockERC20.sol:7",
        "version": {
          "withMetadata": "b73d87e4c8cacbaaea189aec044e8ddaf418db412bc65c27d4f610aa1ed782c7",
          "withoutMetadata": "b73d87e4c8cacbaaea189aec044e8ddaf418db412bc65c27d4f610aa1ed782c7",
          "linkedWithoutMetadata": "b73d87e4c8cacbaaea189aec044e8ddaf418db412bc65c27d4f610aa1ed782c7"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts\\mock\\MockERC20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:340",
        "version": {
          "withMetadata": "75ce8f9e6c8139b9214082e60df86ee29b7d565d21778a045d6e314517331159",
          "withoutMetadata": "75ce8f9e6c8139b9214082e60df86ee29b7d565d21778a045d6e314517331159",
          "linkedWithoutMetadata": "75ce8f9e6c8139b9214082e60df86ee29b7d565d21778a045d6e314517331159"
        },
        "inherit": [
          "UpgradeabilityProxy",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AdminUpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:350"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:428"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:46",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:264",
        "version": {
          "withMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298",
          "withoutMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298",
          "linkedWithoutMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298"
        },
        "inherit": [
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:273"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:277"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyAdmin": {
        "src": "contracts\\proxy\\ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "3305751fab7d99ff0661e547aca203a151c84f44f5d8c4da9e0b927b0467e8d6",
          "withoutMetadata": "3305751fab7d99ff0661e547aca203a151c84f44f5d8c4da9e0b927b0467e8d6",
          "linkedWithoutMetadata": "3305751fab7d99ff0661e547aca203a151c84f44f5d8c4da9e0b927b0467e8d6"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\math\\SafeMath.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165",
            "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC165",
              "label": "_supportedInterfaces",
              "type": "t_mapping(t_bytes4,t_bool)",
              "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "contracts\\library\\IERC165.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155": {
        "src": "@openzeppelin\\contracts\\token\\ERC1155\\IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "allowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\SafeERC20.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:21",
        "version": {
          "withMetadata": "ec590816ed5c25a1835c7c8e917fe81a8ed80bf74067decaaff8e1893d572804",
          "withoutMetadata": "ec590816ed5c25a1835c7c8e917fe81a8ed80bf74067decaaff8e1893d572804",
          "linkedWithoutMetadata": "ec590816ed5c25a1835c7c8e917fe81a8ed80bf74067decaaff8e1893d572804"
        },
        "inherit": [
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address",
          "EnumerableSet",
          "EnumerableMap",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "baseURI()",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:93"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_holderTokens",
              "type": "t_mapping(t_address,t_struct(UintSet)4679_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenOwners",
              "type": "t_struct(UintToAddressMap)4056_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:42"
            },
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:45"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:48"
            },
            {
              "contract": "ERC721",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:51"
            },
            {
              "contract": "ERC721",
              "label": "_baseURI",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(UintSet)4679_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UintSet)4679_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4293_storage"
                }
              ]
            },
            "t_struct(Set)4293_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(UintToAddressMap)4056_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)3738_storage"
                }
              ]
            },
            "t_struct(Map)3738_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)3730_storage)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_struct(MapEntry)3730_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]"
            },
            "t_struct(MapEntry)3730_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Enumerable.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:118",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableMap": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableMap.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableSet.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:8",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomAddressRegistry": {
        "src": "contracts\\FantomAddressRegistry.sol:8",
        "version": {
          "withMetadata": "01210ef5a113adaade232d13a6ed6aa0103f2b25eafeceefe296975e29df66cb",
          "withoutMetadata": "01210ef5a113adaade232d13a6ed6aa0103f2b25eafeceefe296975e29df66cb",
          "linkedWithoutMetadata": "01210ef5a113adaade232d13a6ed6aa0103f2b25eafeceefe296975e29df66cb"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "updateArtion(address)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateNFTFactory(address)",
          "updateNFTFactoryPrivate(address)",
          "updateArtFactory(address)",
          "updateArtFactoryPrivate(address)",
          "updateTokenRegistry(address)",
          "updatePriceFeed(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAddressRegistry",
              "label": "artion",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:12"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:15"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:18"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:21"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "factory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:24"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:27"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "artFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:30"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateArtFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:33"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "tokenRegistry",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:36"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "priceFeed",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactory": {
        "src": "contracts\\FantomArtFactory.sol:8",
        "version": {
          "withMetadata": "9df27e05e44575e70daa8898410ab03720347f72f29e1ec84ce8d2fdf14b534f",
          "withoutMetadata": "9df27e05e44575e70daa8898410ab03720347f72f29e1ec84ce8d2fdf14b534f",
          "linkedWithoutMetadata": "9df27e05e44575e70daa8898410ab03720347f72f29e1ec84ce8d2fdf14b534f"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactory",
            "src": "contracts\\FantomArtFactory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactory.sol:14"
            },
            {
              "contract": "FantomArtFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactory.sol:17"
            },
            {
              "contract": "FantomArtFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactory.sol:20"
            },
            {
              "contract": "FantomArtFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactory.sol:23"
            },
            {
              "contract": "FantomArtFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtFactory.sol:26"
            },
            {
              "contract": "FantomArtFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomArtFactory.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactoryPrivate": {
        "src": "contracts\\FantomArtFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "298a11e97a6c209f78207f6e6f2bbb1472158735ca002b411e4061af0a58c75a",
          "withoutMetadata": "298a11e97a6c209f78207f6e6f2bbb1472158735ca002b411e4061af0a58c75a",
          "linkedWithoutMetadata": "298a11e97a6c209f78207f6e6f2bbb1472158735ca002b411e4061af0a58c75a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactoryPrivate",
            "src": "contracts\\FantomArtFactoryPrivate.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomArtFactoryPrivate.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradable": {
        "src": "contracts\\FantomArtTradable.sol:22",
        "version": {
          "withMetadata": "073fe51513c158c095357630028d8a0956ecb69b5d37aef8e14b7ebd12b802cd",
          "withoutMetadata": "073fe51513c158c095357630028d8a0956ecb69b5d37aef8e14b7ebd12b802cd",
          "linkedWithoutMetadata": "073fe51513c158c095357630028d8a0956ecb69b5d37aef8e14b7ebd12b802cd"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradable",
            "src": "contracts\\FantomArtTradable.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts\\FantomArtTradable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradable",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradable.sol:28"
            },
            {
              "contract": "FantomArtTradable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts\\FantomArtTradable.sol:31"
            },
            {
              "contract": "FantomArtTradable",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtTradable.sol:33"
            },
            {
              "contract": "FantomArtTradable",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\FantomArtTradable.sol:34"
            },
            {
              "contract": "FantomArtTradable",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradable.sol:37"
            },
            {
              "contract": "FantomArtTradable",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradable.sol:39"
            },
            {
              "contract": "FantomArtTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradable.sol:41"
            },
            {
              "contract": "FantomArtTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtTradable.sol:43"
            },
            {
              "contract": "FantomArtTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradable.sol:45"
            },
            {
              "contract": "FantomArtTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradable.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "OwnableDelegateProxy": {
        "src": "contracts\\FantomArtTradablePrivate.sol:10",
        "version": {
          "withMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "withoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "linkedWithoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyRegistry": {
        "src": "contracts\\FantomArtTradablePrivate.sol:12",
        "version": {
          "withMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9",
          "withoutMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9",
          "linkedWithoutMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ProxyRegistry",
              "label": "proxies",
              "type": "t_mapping(t_address,t_contract(OwnableDelegateProxy)5923)",
              "src": "contracts\\FantomArtTradablePrivate.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_contract(OwnableDelegateProxy)5923)": {
              "label": "mapping(address => contract OwnableDelegateProxy)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(OwnableDelegateProxy)5923": {
              "label": "contract OwnableDelegateProxy"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradablePrivate": {
        "src": "contracts\\FantomArtTradablePrivate.sol:22",
        "version": {
          "withMetadata": "73c5ea2128ac23354b4437cd46710a957269f6a5e10d6f2eb8955d0f7811fd0b",
          "withoutMetadata": "73c5ea2128ac23354b4437cd46710a957269f6a5e10d6f2eb8955d0f7811fd0b",
          "linkedWithoutMetadata": "73c5ea2128ac23354b4437cd46710a957269f6a5e10d6f2eb8955d0f7811fd0b"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradablePrivate",
            "src": "contracts\\FantomArtTradablePrivate.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts\\FantomArtTradablePrivate.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradablePrivate.sol:28"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts\\FantomArtTradablePrivate.sol:31"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtTradablePrivate.sol:33"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\FantomArtTradablePrivate.sol:34"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradablePrivate.sol:37"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradablePrivate.sol:39"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradablePrivate.sol:41"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtTradablePrivate.sol:43"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradablePrivate.sol:45"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradablePrivate.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Artion": {
        "src": "contracts\\FantomArtion.sol:9",
        "version": {
          "withMetadata": "add88fc63648eaac7c0296a3fa6d50c99000555ee0cf9ccca22f16032ebb051a",
          "withoutMetadata": "add88fc63648eaac7c0296a3fa6d50c99000555ee0cf9ccca22f16032ebb051a",
          "linkedWithoutMetadata": "add88fc63648eaac7c0296a3fa6d50c99000555ee0cf9ccca22f16032ebb051a"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable,uint256)",
          "mint(address,string)",
          "burn(uint256)",
          "exists(uint256)",
          "isApproved(uint256,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Artion",
            "src": "contracts\\FantomArtion.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Artion",
              "label": "tokenIdPointer",
              "type": "t_uint256",
              "src": "contracts\\FantomArtion.sol:26"
            },
            {
              "contract": "Artion",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtion.sol:29"
            },
            {
              "contract": "Artion",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtion.sol:32"
            },
            {
              "contract": "Artion",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtion.sol:35"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuction": {
        "src": "contracts\\FantomAuction.sol:55",
        "version": {
          "withMetadata": "b1d7876a39f761c828455415df736e7122eef51d924f4378a713036d42a59212",
          "withoutMetadata": "b1d7876a39f761c828455415df736e7122eef51d924f4378a713036d42a59212",
          "linkedWithoutMetadata": "b1d7876a39f761c828455415df736e7122eef51d924f4378a713036d42a59212"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable)",
          "createAuction(address,uint256,address,uint256,uint256,bool,uint256)",
          "placeBid(address,uint256)",
          "placeBid(address,uint256,uint256)",
          "withdrawBid(address,uint256)",
          "resultAuction(address,uint256)",
          "cancelAuction(address,uint256)",
          "toggleIsPaused()",
          "updateMinBidIncrement(uint256)",
          "updateBidWithdrawalLockTime(uint256)",
          "updateAuctionReservePrice(address,uint256,uint256)",
          "updateAuctionStartTime(address,uint256,uint256)",
          "updateAuctionEndTime(address,uint256,uint256)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "getAuction(address,uint256)",
          "getHighestBidder(address,uint256)",
          "reclaimERC20(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "minBidIncrement",
            "src": "contracts\\FantomAuction.sol:156"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bidWithdrawalLockTime",
            "src": "contracts\\FantomAuction.sol:159"
          },
          {
            "kind": "state-variable-assignment",
            "name": "platformFee",
            "src": "contracts\\FantomAuction.sol:162"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuction",
              "label": "auctions",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6732_storage))",
              "src": "contracts\\FantomAuction.sol:150"
            },
            {
              "contract": "FantomAuction",
              "label": "highestBids",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6739_storage))",
              "src": "contracts\\FantomAuction.sol:153"
            },
            {
              "contract": "FantomAuction",
              "label": "minBidIncrement",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:156"
            },
            {
              "contract": "FantomAuction",
              "label": "bidWithdrawalLockTime",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:159"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:162"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFeeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomAuction.sol:165"
            },
            {
              "contract": "FantomAuction",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)6539",
              "src": "contracts\\FantomAuction.sol:168"
            },
            {
              "contract": "FantomAuction",
              "label": "isPaused",
              "type": "t_bool",
              "src": "contracts\\FantomAuction.sol:171"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6732_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.Auction))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(Auction)6732_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.Auction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Auction)6732_storage": {
              "label": "struct FantomAuction.Auction",
              "members": [
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "minBid",
                  "type": "t_uint256"
                },
                {
                  "label": "reservePrice",
                  "type": "t_uint256"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256"
                },
                {
                  "label": "resulted",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6739_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.HighestBid))"
            },
            "t_mapping(t_uint256,t_struct(HighestBid)6739_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.HighestBid)"
            },
            "t_struct(HighestBid)6739_storage": {
              "label": "struct FantomAuction.HighestBid",
              "members": [
                {
                  "label": "bidder",
                  "type": "t_address_payable"
                },
                {
                  "label": "bid",
                  "type": "t_uint256"
                },
                {
                  "label": "lastBidTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)6539": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAddressRegistry": {
        "src": "contracts\\FantomPriceFeed.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenRegistry()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomBundleMarketplace": {
        "src": "contracts\\FantomMarketplace.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,address,address)",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomTokenRegistry": {
        "src": "contracts\\FantomPriceFeed.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enabled(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomBundleMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:39",
        "version": {
          "withMetadata": "58452c833a3e6bf49312ba56d4f24483ac163a2bf9e85105613b3491001ebe38",
          "withoutMetadata": "58452c833a3e6bf49312ba56d4f24483ac163a2bf9e85105613b3491001ebe38",
          "linkedWithoutMetadata": "58452c833a3e6bf49312ba56d4f24483ac163a2bf9e85105613b3491001ebe38"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20",
          "EnumerableSet"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "getListing(address,string)",
          "listItem(string,address[],uint256[],uint256[],address,uint256,uint256)",
          "cancelListing(string)",
          "updateListing(string,address,uint256)",
          "buyItem(string)",
          "buyItem(string,address)",
          "createOffer(string,address,uint256,uint256)",
          "cancelOffer(string)",
          "acceptOffer(string,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomBundleMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8636_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:106"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "owners",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts\\FantomBundleMarketplace.sol:109"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIdsPerItem",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4473_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:111"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "nftIndexes",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))",
              "src": "contracts\\FantomBundleMarketplace.sol:113"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIds",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "src": "contracts\\FantomBundleMarketplace.sol:115"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "offers",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8643_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:118"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomBundleMarketplace.sol:121"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomBundleMarketplace.sol:124"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)8499",
              "src": "contracts\\FantomBundleMarketplace.sol:127"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8636_storage))": {
              "label": "mapping(address => mapping(bytes32 => struct FantomBundleMarketplace.Listing))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_struct(Listing)8636_storage)": {
              "label": "mapping(bytes32 => struct FantomBundleMarketplace.Listing)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Listing)8636_storage": {
              "label": "struct FantomBundleMarketplace.Listing",
              "members": [
                {
                  "label": "nfts",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "tokenIds",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "quantities",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4473_storage))": {
              "label": "mapping(address => mapping(uint256 => struct EnumerableSet.Bytes32Set))"
            },
            "t_mapping(t_uint256,t_struct(Bytes32Set)4473_storage)": {
              "label": "mapping(uint256 => struct EnumerableSet.Bytes32Set)"
            },
            "t_struct(Bytes32Set)4473_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4293_storage"
                }
              ]
            },
            "t_struct(Set)4293_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
              "label": "mapping(bytes32 => mapping(address => mapping(uint256 => uint256)))"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8643_storage))": {
              "label": "mapping(bytes32 => mapping(address => struct FantomBundleMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)8643_storage)": {
              "label": "mapping(address => struct FantomBundleMarketplace.Offer)"
            },
            "t_struct(Offer)8643_storage": {
              "label": "struct FantomBundleMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)8499": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomMarketplace": {
        "src": "contracts\\FantomMarketplace.sol:71",
        "version": {
          "withMetadata": "aac16dd29bd0f5a23ab23dc808b9527af84cbef6c8f705a7b396a75bc5c565f9",
          "withoutMetadata": "aac16dd29bd0f5a23ab23dc808b9527af84cbef6c8f705a7b396a75bc5c565f9",
          "linkedWithoutMetadata": "aac16dd29bd0f5a23ab23dc808b9527af84cbef6c8f705a7b396a75bc5c565f9"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable,uint16)",
          "listItem(address,uint256,uint256,address,uint256,uint256)",
          "cancelListing(address,uint256)",
          "updateListing(address,uint256,address,uint256)",
          "buyItem(address,uint256,address,address)",
          "createOffer(address,uint256,address,uint256,uint256,uint256)",
          "cancelOffer(address,uint256)",
          "acceptOffer(address,uint256,address)",
          "registerRoyalty(address,uint256,uint16)",
          "registerCollectionRoyalty(address,address,uint16,address)",
          "getPrice(address)",
          "updatePlatformFee(uint16)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomMarketplace",
              "label": "minters",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
              "src": "contracts\\FantomMarketplace.sol:151"
            },
            {
              "contract": "FantomMarketplace",
              "label": "royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint16))",
              "src": "contracts\\FantomMarketplace.sol:154"
            },
            {
              "contract": "FantomMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10840_storage)))",
              "src": "contracts\\FantomMarketplace.sol:157"
            },
            {
              "contract": "FantomMarketplace",
              "label": "offers",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10849_storage)))",
              "src": "contracts\\FantomMarketplace.sol:161"
            },
            {
              "contract": "FantomMarketplace",
              "label": "platformFee",
              "type": "t_uint16",
              "src": "contracts\\FantomMarketplace.sol:165"
            },
            {
              "contract": "FantomMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomMarketplace.sol:168"
            },
            {
              "contract": "FantomMarketplace",
              "label": "collectionRoyalties",
              "type": "t_mapping(t_address,t_struct(CollectionRoyalty)10856_storage)",
              "src": "contracts\\FantomMarketplace.sol:171"
            },
            {
              "contract": "FantomMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)10670",
              "src": "contracts\\FantomMarketplace.sol:174"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
              "label": "mapping(address => mapping(uint256 => address))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint16))": {
              "label": "mapping(address => mapping(uint256 => uint16))"
            },
            "t_mapping(t_uint256,t_uint16)": {
              "label": "mapping(uint256 => uint16)"
            },
            "t_uint16": {
              "label": "uint16"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10840_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Listing)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10840_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Listing))"
            },
            "t_mapping(t_address,t_struct(Listing)10840_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Listing)"
            },
            "t_struct(Listing)10840_storage": {
              "label": "struct FantomMarketplace.Listing",
              "members": [
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10849_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Offer)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10849_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)10849_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Offer)"
            },
            "t_struct(Offer)10849_storage": {
              "label": "struct FantomMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_struct(CollectionRoyalty)10856_storage)": {
              "label": "mapping(address => struct FantomMarketplace.CollectionRoyalty)"
            },
            "t_struct(CollectionRoyalty)10856_storage": {
              "label": "struct FantomMarketplace.CollectionRoyalty",
              "members": [
                {
                  "label": "royalty",
                  "type": "t_uint16"
                },
                {
                  "label": "creator",
                  "type": "t_address"
                },
                {
                  "label": "feeRecipient",
                  "type": "t_address"
                }
              ]
            },
            "t_contract(IFantomAddressRegistry)10670": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAuction": {
        "src": "contracts\\FantomMarketplace.sol:35",
        "inherit": [],
        "libraries": [],
        "methods": [
          "auctions(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomNFTFactory": {
        "src": "contracts\\FantomMarketplace.sol:57",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exists(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomPriceFeed": {
        "src": "contracts\\FantomMarketplace.sol:65",
        "inherit": [],
        "libraries": [],
        "methods": [
          "wFTM()",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactory": {
        "src": "contracts\\FantomNFTFactory.sol:8",
        "version": {
          "withMetadata": "914fd99126bf5141b41a4874daabbef72d4fc1ea2b081fb9e57fc6e628b82e75",
          "withoutMetadata": "914fd99126bf5141b41a4874daabbef72d4fc1ea2b081fb9e57fc6e628b82e75",
          "linkedWithoutMetadata": "914fd99126bf5141b41a4874daabbef72d4fc1ea2b081fb9e57fc6e628b82e75"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactory",
            "src": "contracts\\FantomNFTFactory.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactory",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:14"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:17"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:20"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactory.sol:23"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactory.sol:26"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTFactory.sol:29"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomNFTFactory.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactoryPrivate": {
        "src": "contracts\\FantomNFTFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "9aaefeb44120a7c5f3eb39fa4f86f2b7b33cb56d60959f33a42ffe1ed2ad1b43",
          "withoutMetadata": "9aaefeb44120a7c5f3eb39fa4f86f2b7b33cb56d60959f33a42ffe1ed2ad1b43",
          "linkedWithoutMetadata": "9aaefeb44120a7c5f3eb39fa4f86f2b7b33cb56d60959f33a42ffe1ed2ad1b43"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactoryPrivate",
            "src": "contracts\\FantomNFTFactoryPrivate.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:29"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradable": {
        "src": "contracts\\FantomNFTTradable.sol:12",
        "version": {
          "withMetadata": "e4531be1f170df8480065b3b9fc86616d512addea17d4e897e15d403e626c887",
          "withoutMetadata": "e4531be1f170df8480065b3b9fc86616d512addea17d4e897e15d403e626c887",
          "linkedWithoutMetadata": "e4531be1f170df8480065b3b9fc86616d512addea17d4e897e15d403e626c887"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradable",
            "src": "contracts\\FantomNFTTradable.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts\\FantomNFTTradable.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradable",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:27"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:28"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:29"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradable.sol:30"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradable.sol:33"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTTradable.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradablePrivate": {
        "src": "contracts\\FantomNFTTradablePrivate.sol:12",
        "version": {
          "withMetadata": "e61bb5b78db344eeab50005060c51f74a351bf9bd4d0389705178c2efc6f461e",
          "withoutMetadata": "e61bb5b78db344eeab50005060c51f74a351bf9bd4d0389705178c2efc6f461e",
          "linkedWithoutMetadata": "e61bb5b78db344eeab50005060c51f74a351bf9bd4d0389705178c2efc6f461e"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradablePrivate",
            "src": "contracts\\FantomNFTTradablePrivate.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts\\FantomNFTTradablePrivate.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:27"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:28"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:29"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradablePrivate.sol:30"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradablePrivate.sol:33"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTTradablePrivate.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomPriceFeed": {
        "src": "contracts\\FantomPriceFeed.sol:21",
        "version": {
          "withMetadata": "c3486acea602badcee713e0d4a167bc6e4167f4ebe58ea0974294fe748fcd396",
          "withoutMetadata": "c3486acea602badcee713e0d4a167bc6e4167f4ebe58ea0974294fe748fcd396",
          "linkedWithoutMetadata": "c3486acea602badcee713e0d4a167bc6e4167f4ebe58ea0974294fe748fcd396"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerOracle(address,address)",
          "updateOracle(address,address)",
          "getPrice(address)",
          "updateAddressRegistry(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomPriceFeed",
            "src": "contracts\\FantomPriceFeed.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomPriceFeed",
              "label": "oracles",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts\\FantomPriceFeed.sol:23"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "addressRegistry",
              "type": "t_address",
              "src": "contracts\\FantomPriceFeed.sol:26"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "wFTM",
              "type": "t_address",
              "src": "contracts\\FantomPriceFeed.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IOracle": {
        "src": "contracts\\FantomPriceFeed.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestAnswer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomTokenRegistry": {
        "src": "contracts\\FantomTokenRegistry.sol:7",
        "version": {
          "withMetadata": "15e092d3ba18f8b0b09cf3a08319d468dc9c698c094acc12a625b236ffdfe0d2",
          "withoutMetadata": "15e092d3ba18f8b0b09cf3a08319d468dc9c698c094acc12a625b236ffdfe0d2",
          "linkedWithoutMetadata": "15e092d3ba18f8b0b09cf3a08319d468dc9c698c094acc12a625b236ffdfe0d2"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "add(address)",
          "remove(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomTokenRegistry",
              "label": "enabled",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomTokenRegistry.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155": {
        "src": "contracts\\library\\ERC1155.sol:11",
        "version": {
          "withMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71",
          "withoutMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71",
          "linkedWithoutMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71"
        },
        "inherit": [
          "IERC165"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155",
              "label": "balances",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts\\library\\ERC1155.sol:25"
            },
            {
              "contract": "ERC1155",
              "label": "operators",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts\\library\\ERC1155.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155Metadata": {
        "src": "contracts\\library\\ERC1155Metadata.sol:9",
        "version": {
          "withMetadata": "9f4ac3045c6d47f7902357b737f9b36eb6d74a6144b8f5ff47ba6041be851533",
          "withoutMetadata": "9f4ac3045c6d47f7902357b737f9b36eb6d74a6144b8f5ff47ba6041be851533",
          "linkedWithoutMetadata": "9f4ac3045c6d47f7902357b737f9b36eb6d74a6144b8f5ff47ba6041be851533"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155Metadata",
              "label": "baseMetadataURI",
              "type": "t_string_storage",
              "src": "contracts\\library\\ERC1155Metadata.sol:12"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155MintBurn": {
        "src": "contracts\\library\\ERC1155MintBurn.sol:9",
        "version": {
          "withMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71",
          "withoutMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71",
          "linkedWithoutMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71"
        },
        "inherit": [
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155TokenReceiver": {
        "src": "contracts\\library\\IERC1155TokenReceiver.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BiddingContractMock": {
        "src": "contracts\\mock\\BiddingContractMock.sol:7",
        "version": {
          "withMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a",
          "withoutMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a",
          "linkedWithoutMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "bid(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BiddingContractMock",
            "src": "contracts\\mock\\BiddingContractMock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BiddingContractMock",
              "label": "auctionContract",
              "type": "t_contract(FantomAuction)8471",
              "src": "contracts\\mock\\BiddingContractMock.sol:8"
            }
          ],
          "types": {
            "t_contract(FantomAuction)8471": {
              "label": "contract FantomAuction"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuctionMock": {
        "src": "contracts\\mock\\FantomAuctionMock.sol:7",
        "version": {
          "withMetadata": "7d55c898852b8b1e86d032cef7abd574ffe789a496166c8870c9ef7b97c292ea",
          "withoutMetadata": "7d55c898852b8b1e86d032cef7abd574ffe789a496166c8870c9ef7b97c292ea",
          "linkedWithoutMetadata": "7d55c898852b8b1e86d032cef7abd574ffe789a496166c8870c9ef7b97c292ea"
        },
        "inherit": [
          "FantomAuction",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "setNowOverride(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuctionMock",
              "label": "nowOverride",
              "type": "t_uint256",
              "src": "contracts\\mock\\FantomAuctionMock.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts\\mock\\MockERC20.sol:7",
        "version": {
          "withMetadata": "b73d87e4c8cacbaaea189aec044e8ddaf418db412bc65c27d4f610aa1ed782c7",
          "withoutMetadata": "b73d87e4c8cacbaaea189aec044e8ddaf418db412bc65c27d4f610aa1ed782c7",
          "linkedWithoutMetadata": "b73d87e4c8cacbaaea189aec044e8ddaf418db412bc65c27d4f610aa1ed782c7"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts\\mock\\MockERC20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:340",
        "version": {
          "withMetadata": "75ce8f9e6c8139b9214082e60df86ee29b7d565d21778a045d6e314517331159",
          "withoutMetadata": "75ce8f9e6c8139b9214082e60df86ee29b7d565d21778a045d6e314517331159",
          "linkedWithoutMetadata": "75ce8f9e6c8139b9214082e60df86ee29b7d565d21778a045d6e314517331159"
        },
        "inherit": [
          "UpgradeabilityProxy",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AdminUpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:350"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:428"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:46",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:264",
        "version": {
          "withMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298",
          "withoutMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298",
          "linkedWithoutMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298"
        },
        "inherit": [
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:273"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:277"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyAdmin": {
        "src": "contracts\\proxy\\ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "3305751fab7d99ff0661e547aca203a151c84f44f5d8c4da9e0b927b0467e8d6",
          "withoutMetadata": "3305751fab7d99ff0661e547aca203a151c84f44f5d8c4da9e0b927b0467e8d6",
          "linkedWithoutMetadata": "3305751fab7d99ff0661e547aca203a151c84f44f5d8c4da9e0b927b0467e8d6"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\math\\SafeMath.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165",
            "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC165",
              "label": "_supportedInterfaces",
              "type": "t_mapping(t_bytes4,t_bool)",
              "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "contracts\\library\\IERC165.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155": {
        "src": "@openzeppelin\\contracts\\token\\ERC1155\\IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "allowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\SafeERC20.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:21",
        "version": {
          "withMetadata": "8dd4924f7080b28673c12e2814297ba24304de217db52581284f10f3e0fdae07",
          "withoutMetadata": "8dd4924f7080b28673c12e2814297ba24304de217db52581284f10f3e0fdae07",
          "linkedWithoutMetadata": "8dd4924f7080b28673c12e2814297ba24304de217db52581284f10f3e0fdae07"
        },
        "inherit": [
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address",
          "EnumerableSet",
          "EnumerableMap",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "baseURI()",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:93"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_holderTokens",
              "type": "t_mapping(t_address,t_struct(UintSet)4679_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenOwners",
              "type": "t_struct(UintToAddressMap)4056_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:42"
            },
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:45"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:48"
            },
            {
              "contract": "ERC721",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:51"
            },
            {
              "contract": "ERC721",
              "label": "_baseURI",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(UintSet)4679_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UintSet)4679_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4293_storage"
                }
              ]
            },
            "t_struct(Set)4293_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(UintToAddressMap)4056_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)3738_storage"
                }
              ]
            },
            "t_struct(Map)3738_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)3730_storage)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_struct(MapEntry)3730_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]"
            },
            "t_struct(MapEntry)3730_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Enumerable.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:118",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableMap": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableMap.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableSet.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:8",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomAddressRegistry": {
        "src": "contracts\\FantomAddressRegistry.sol:8",
        "version": {
          "withMetadata": "76d1b9dc0da2d978cc59139b9224ff1063a564d2e103e5b8c53ddf92f35c6017",
          "withoutMetadata": "76d1b9dc0da2d978cc59139b9224ff1063a564d2e103e5b8c53ddf92f35c6017",
          "linkedWithoutMetadata": "76d1b9dc0da2d978cc59139b9224ff1063a564d2e103e5b8c53ddf92f35c6017"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "updateArtion(address)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateNFTFactory(address)",
          "updateNFTFactoryPrivate(address)",
          "updateArtFactory(address)",
          "updateArtFactoryPrivate(address)",
          "updateTokenRegistry(address)",
          "updatePriceFeed(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAddressRegistry",
              "label": "artion",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:12"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:15"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:18"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:21"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "factory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:24"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:27"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "artFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:30"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateArtFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:33"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "tokenRegistry",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:36"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "priceFeed",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactory": {
        "src": "contracts\\FantomArtFactory.sol:8",
        "version": {
          "withMetadata": "d4a1e964c791a23f412a86709671395f44dddf562aa57580730cf93eff3fd50d",
          "withoutMetadata": "d4a1e964c791a23f412a86709671395f44dddf562aa57580730cf93eff3fd50d",
          "linkedWithoutMetadata": "d4a1e964c791a23f412a86709671395f44dddf562aa57580730cf93eff3fd50d"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactory",
            "src": "contracts\\FantomArtFactory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactory.sol:14"
            },
            {
              "contract": "FantomArtFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactory.sol:17"
            },
            {
              "contract": "FantomArtFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactory.sol:20"
            },
            {
              "contract": "FantomArtFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactory.sol:23"
            },
            {
              "contract": "FantomArtFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtFactory.sol:26"
            },
            {
              "contract": "FantomArtFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomArtFactory.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactoryPrivate": {
        "src": "contracts\\FantomArtFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "e0fdcfb3b16f76fdbd409fb98de3b38f5c3677f2d8b853cdb1097f3798031304",
          "withoutMetadata": "e0fdcfb3b16f76fdbd409fb98de3b38f5c3677f2d8b853cdb1097f3798031304",
          "linkedWithoutMetadata": "e0fdcfb3b16f76fdbd409fb98de3b38f5c3677f2d8b853cdb1097f3798031304"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactoryPrivate",
            "src": "contracts\\FantomArtFactoryPrivate.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomArtFactoryPrivate.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradable": {
        "src": "contracts\\FantomArtTradable.sol:22",
        "version": {
          "withMetadata": "c0adcad2251cfbd3886a61e37e058f7be8a3b59616baad692cd6d6e457da1bf7",
          "withoutMetadata": "c0adcad2251cfbd3886a61e37e058f7be8a3b59616baad692cd6d6e457da1bf7",
          "linkedWithoutMetadata": "c0adcad2251cfbd3886a61e37e058f7be8a3b59616baad692cd6d6e457da1bf7"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradable",
            "src": "contracts\\FantomArtTradable.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts\\FantomArtTradable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradable",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradable.sol:28"
            },
            {
              "contract": "FantomArtTradable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts\\FantomArtTradable.sol:31"
            },
            {
              "contract": "FantomArtTradable",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtTradable.sol:33"
            },
            {
              "contract": "FantomArtTradable",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\FantomArtTradable.sol:34"
            },
            {
              "contract": "FantomArtTradable",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradable.sol:37"
            },
            {
              "contract": "FantomArtTradable",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradable.sol:39"
            },
            {
              "contract": "FantomArtTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradable.sol:41"
            },
            {
              "contract": "FantomArtTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtTradable.sol:43"
            },
            {
              "contract": "FantomArtTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradable.sol:45"
            },
            {
              "contract": "FantomArtTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradable.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "OwnableDelegateProxy": {
        "src": "contracts\\FantomArtTradablePrivate.sol:10",
        "version": {
          "withMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "withoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "linkedWithoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyRegistry": {
        "src": "contracts\\FantomArtTradablePrivate.sol:12",
        "version": {
          "withMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9",
          "withoutMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9",
          "linkedWithoutMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ProxyRegistry",
              "label": "proxies",
              "type": "t_mapping(t_address,t_contract(OwnableDelegateProxy)5923)",
              "src": "contracts\\FantomArtTradablePrivate.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_contract(OwnableDelegateProxy)5923)": {
              "label": "mapping(address => contract OwnableDelegateProxy)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(OwnableDelegateProxy)5923": {
              "label": "contract OwnableDelegateProxy"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradablePrivate": {
        "src": "contracts\\FantomArtTradablePrivate.sol:22",
        "version": {
          "withMetadata": "bf7b7baf73c8347bd6c9b943bd6327823ae43377e0e6c356a7e92d443525e201",
          "withoutMetadata": "bf7b7baf73c8347bd6c9b943bd6327823ae43377e0e6c356a7e92d443525e201",
          "linkedWithoutMetadata": "bf7b7baf73c8347bd6c9b943bd6327823ae43377e0e6c356a7e92d443525e201"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradablePrivate",
            "src": "contracts\\FantomArtTradablePrivate.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts\\FantomArtTradablePrivate.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradablePrivate.sol:28"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts\\FantomArtTradablePrivate.sol:31"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtTradablePrivate.sol:33"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\FantomArtTradablePrivate.sol:34"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradablePrivate.sol:37"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradablePrivate.sol:39"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradablePrivate.sol:41"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtTradablePrivate.sol:43"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradablePrivate.sol:45"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradablePrivate.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Artion": {
        "src": "contracts\\FantomArtion.sol:9",
        "version": {
          "withMetadata": "db5e7f93808806b87f44d6d9a0fcfc2c0e9c9f151cc1759d18a7854746c59ef8",
          "withoutMetadata": "db5e7f93808806b87f44d6d9a0fcfc2c0e9c9f151cc1759d18a7854746c59ef8",
          "linkedWithoutMetadata": "db5e7f93808806b87f44d6d9a0fcfc2c0e9c9f151cc1759d18a7854746c59ef8"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable,uint256)",
          "mint(address,string)",
          "burn(uint256)",
          "exists(uint256)",
          "isApproved(uint256,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Artion",
            "src": "contracts\\FantomArtion.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Artion",
              "label": "tokenIdPointer",
              "type": "t_uint256",
              "src": "contracts\\FantomArtion.sol:26"
            },
            {
              "contract": "Artion",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtion.sol:29"
            },
            {
              "contract": "Artion",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtion.sol:32"
            },
            {
              "contract": "Artion",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtion.sol:35"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuction": {
        "src": "contracts\\FantomAuction.sol:55",
        "version": {
          "withMetadata": "19513f8a3837450037736bded6fd45eeccb28988ed437815908e9ca056eadc1c",
          "withoutMetadata": "19513f8a3837450037736bded6fd45eeccb28988ed437815908e9ca056eadc1c",
          "linkedWithoutMetadata": "19513f8a3837450037736bded6fd45eeccb28988ed437815908e9ca056eadc1c"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable)",
          "createAuction(address,uint256,address,uint256,uint256,bool,uint256)",
          "placeBid(address,uint256)",
          "placeBid(address,uint256,uint256)",
          "withdrawBid(address,uint256)",
          "resultAuction(address,uint256)",
          "cancelAuction(address,uint256)",
          "toggleIsPaused()",
          "updateMinBidIncrement(uint256)",
          "updateBidWithdrawalLockTime(uint256)",
          "updateAuctionReservePrice(address,uint256,uint256)",
          "updateAuctionStartTime(address,uint256,uint256)",
          "updateAuctionEndTime(address,uint256,uint256)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "getAuction(address,uint256)",
          "getHighestBidder(address,uint256)",
          "reclaimERC20(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "minBidIncrement",
            "src": "contracts\\FantomAuction.sol:156"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bidWithdrawalLockTime",
            "src": "contracts\\FantomAuction.sol:159"
          },
          {
            "kind": "state-variable-assignment",
            "name": "platformFee",
            "src": "contracts\\FantomAuction.sol:162"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuction",
              "label": "auctions",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6732_storage))",
              "src": "contracts\\FantomAuction.sol:150"
            },
            {
              "contract": "FantomAuction",
              "label": "highestBids",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6739_storage))",
              "src": "contracts\\FantomAuction.sol:153"
            },
            {
              "contract": "FantomAuction",
              "label": "minBidIncrement",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:156"
            },
            {
              "contract": "FantomAuction",
              "label": "bidWithdrawalLockTime",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:159"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:162"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFeeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomAuction.sol:165"
            },
            {
              "contract": "FantomAuction",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)6539",
              "src": "contracts\\FantomAuction.sol:168"
            },
            {
              "contract": "FantomAuction",
              "label": "isPaused",
              "type": "t_bool",
              "src": "contracts\\FantomAuction.sol:171"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6732_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.Auction))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(Auction)6732_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.Auction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Auction)6732_storage": {
              "label": "struct FantomAuction.Auction",
              "members": [
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "minBid",
                  "type": "t_uint256"
                },
                {
                  "label": "reservePrice",
                  "type": "t_uint256"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256"
                },
                {
                  "label": "resulted",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6739_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.HighestBid))"
            },
            "t_mapping(t_uint256,t_struct(HighestBid)6739_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.HighestBid)"
            },
            "t_struct(HighestBid)6739_storage": {
              "label": "struct FantomAuction.HighestBid",
              "members": [
                {
                  "label": "bidder",
                  "type": "t_address_payable"
                },
                {
                  "label": "bid",
                  "type": "t_uint256"
                },
                {
                  "label": "lastBidTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)6539": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAddressRegistry": {
        "src": "contracts\\FantomPriceFeed.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenRegistry()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomBundleMarketplace": {
        "src": "contracts\\FantomMarketplace.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,address,address)",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomTokenRegistry": {
        "src": "contracts\\FantomPriceFeed.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enabled(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomBundleMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:39",
        "version": {
          "withMetadata": "799fbd51d29c85719d4442f9b1abe166ef22751846c662130b29731ef95365e3",
          "withoutMetadata": "799fbd51d29c85719d4442f9b1abe166ef22751846c662130b29731ef95365e3",
          "linkedWithoutMetadata": "799fbd51d29c85719d4442f9b1abe166ef22751846c662130b29731ef95365e3"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20",
          "EnumerableSet"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "getListing(address,string)",
          "listItem(string,address[],uint256[],uint256[],address,uint256,uint256)",
          "cancelListing(string)",
          "updateListing(string,address,uint256)",
          "buyItem(string)",
          "buyItem(string,address)",
          "createOffer(string,address,uint256,uint256)",
          "cancelOffer(string)",
          "acceptOffer(string,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomBundleMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8636_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:106"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "owners",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts\\FantomBundleMarketplace.sol:109"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIdsPerItem",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4473_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:111"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "nftIndexes",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))",
              "src": "contracts\\FantomBundleMarketplace.sol:113"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIds",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "src": "contracts\\FantomBundleMarketplace.sol:115"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "offers",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8643_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:118"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomBundleMarketplace.sol:121"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomBundleMarketplace.sol:124"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)8499",
              "src": "contracts\\FantomBundleMarketplace.sol:127"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8636_storage))": {
              "label": "mapping(address => mapping(bytes32 => struct FantomBundleMarketplace.Listing))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_struct(Listing)8636_storage)": {
              "label": "mapping(bytes32 => struct FantomBundleMarketplace.Listing)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Listing)8636_storage": {
              "label": "struct FantomBundleMarketplace.Listing",
              "members": [
                {
                  "label": "nfts",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "tokenIds",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "quantities",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4473_storage))": {
              "label": "mapping(address => mapping(uint256 => struct EnumerableSet.Bytes32Set))"
            },
            "t_mapping(t_uint256,t_struct(Bytes32Set)4473_storage)": {
              "label": "mapping(uint256 => struct EnumerableSet.Bytes32Set)"
            },
            "t_struct(Bytes32Set)4473_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4293_storage"
                }
              ]
            },
            "t_struct(Set)4293_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
              "label": "mapping(bytes32 => mapping(address => mapping(uint256 => uint256)))"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8643_storage))": {
              "label": "mapping(bytes32 => mapping(address => struct FantomBundleMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)8643_storage)": {
              "label": "mapping(address => struct FantomBundleMarketplace.Offer)"
            },
            "t_struct(Offer)8643_storage": {
              "label": "struct FantomBundleMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)8499": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomMarketplace": {
        "src": "contracts\\FantomMarketplace.sol:71",
        "version": {
          "withMetadata": "f59cf2f57630405672c7081ae743b97f6b2aea7058d8bcd94b62f66298b0e2f0",
          "withoutMetadata": "f59cf2f57630405672c7081ae743b97f6b2aea7058d8bcd94b62f66298b0e2f0",
          "linkedWithoutMetadata": "f59cf2f57630405672c7081ae743b97f6b2aea7058d8bcd94b62f66298b0e2f0"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable,uint16)",
          "listItem(address,uint256,uint256,address,uint256,uint256)",
          "cancelListing(address,uint256)",
          "updateListing(address,uint256,address,uint256)",
          "buyItem(address,uint256,address,address)",
          "createOffer(address,uint256,address,uint256,uint256,uint256)",
          "cancelOffer(address,uint256)",
          "acceptOffer(address,uint256,address)",
          "registerRoyalty(address,uint256,uint16)",
          "registerCollectionRoyalty(address,address,uint16,address)",
          "getPrice(address)",
          "updatePlatformFee(uint16)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomMarketplace",
              "label": "minters",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
              "src": "contracts\\FantomMarketplace.sol:151"
            },
            {
              "contract": "FantomMarketplace",
              "label": "royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint16))",
              "src": "contracts\\FantomMarketplace.sol:154"
            },
            {
              "contract": "FantomMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10840_storage)))",
              "src": "contracts\\FantomMarketplace.sol:157"
            },
            {
              "contract": "FantomMarketplace",
              "label": "offers",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10849_storage)))",
              "src": "contracts\\FantomMarketplace.sol:161"
            },
            {
              "contract": "FantomMarketplace",
              "label": "platformFee",
              "type": "t_uint16",
              "src": "contracts\\FantomMarketplace.sol:165"
            },
            {
              "contract": "FantomMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomMarketplace.sol:168"
            },
            {
              "contract": "FantomMarketplace",
              "label": "collectionRoyalties",
              "type": "t_mapping(t_address,t_struct(CollectionRoyalty)10856_storage)",
              "src": "contracts\\FantomMarketplace.sol:171"
            },
            {
              "contract": "FantomMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)10670",
              "src": "contracts\\FantomMarketplace.sol:174"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
              "label": "mapping(address => mapping(uint256 => address))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint16))": {
              "label": "mapping(address => mapping(uint256 => uint16))"
            },
            "t_mapping(t_uint256,t_uint16)": {
              "label": "mapping(uint256 => uint16)"
            },
            "t_uint16": {
              "label": "uint16"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10840_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Listing)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10840_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Listing))"
            },
            "t_mapping(t_address,t_struct(Listing)10840_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Listing)"
            },
            "t_struct(Listing)10840_storage": {
              "label": "struct FantomMarketplace.Listing",
              "members": [
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10849_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Offer)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10849_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)10849_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Offer)"
            },
            "t_struct(Offer)10849_storage": {
              "label": "struct FantomMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_struct(CollectionRoyalty)10856_storage)": {
              "label": "mapping(address => struct FantomMarketplace.CollectionRoyalty)"
            },
            "t_struct(CollectionRoyalty)10856_storage": {
              "label": "struct FantomMarketplace.CollectionRoyalty",
              "members": [
                {
                  "label": "royalty",
                  "type": "t_uint16"
                },
                {
                  "label": "creator",
                  "type": "t_address"
                },
                {
                  "label": "feeRecipient",
                  "type": "t_address"
                }
              ]
            },
            "t_contract(IFantomAddressRegistry)10670": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAuction": {
        "src": "contracts\\FantomMarketplace.sol:35",
        "inherit": [],
        "libraries": [],
        "methods": [
          "auctions(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomNFTFactory": {
        "src": "contracts\\FantomMarketplace.sol:57",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exists(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomPriceFeed": {
        "src": "contracts\\FantomMarketplace.sol:65",
        "inherit": [],
        "libraries": [],
        "methods": [
          "wFTM()",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactory": {
        "src": "contracts\\FantomNFTFactory.sol:8",
        "version": {
          "withMetadata": "e213646b1abd3df7e7d728be53caa090c9a63c69de693128cf293b4ce49fbd20",
          "withoutMetadata": "e213646b1abd3df7e7d728be53caa090c9a63c69de693128cf293b4ce49fbd20",
          "linkedWithoutMetadata": "e213646b1abd3df7e7d728be53caa090c9a63c69de693128cf293b4ce49fbd20"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactory",
            "src": "contracts\\FantomNFTFactory.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactory",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:14"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:17"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:20"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactory.sol:23"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactory.sol:26"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTFactory.sol:29"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomNFTFactory.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactoryPrivate": {
        "src": "contracts\\FantomNFTFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "0487dd72b4e58be01c1984618c03964b3fc492482cd0f62a547d06f73a35fc03",
          "withoutMetadata": "0487dd72b4e58be01c1984618c03964b3fc492482cd0f62a547d06f73a35fc03",
          "linkedWithoutMetadata": "0487dd72b4e58be01c1984618c03964b3fc492482cd0f62a547d06f73a35fc03"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactoryPrivate",
            "src": "contracts\\FantomNFTFactoryPrivate.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:29"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradable": {
        "src": "contracts\\FantomNFTTradable.sol:12",
        "version": {
          "withMetadata": "ebfb5cde50fd0230e1a40f125d277ad1fe7691d898ff9f8097916e9378446acb",
          "withoutMetadata": "ebfb5cde50fd0230e1a40f125d277ad1fe7691d898ff9f8097916e9378446acb",
          "linkedWithoutMetadata": "ebfb5cde50fd0230e1a40f125d277ad1fe7691d898ff9f8097916e9378446acb"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradable",
            "src": "contracts\\FantomNFTTradable.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts\\FantomNFTTradable.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradable",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:27"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:28"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:29"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradable.sol:30"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradable.sol:33"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTTradable.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradablePrivate": {
        "src": "contracts\\FantomNFTTradablePrivate.sol:12",
        "version": {
          "withMetadata": "8ac05d68d3c513b9b21725d149d1f1bb0045563abbb7908621d92d8939e5182f",
          "withoutMetadata": "8ac05d68d3c513b9b21725d149d1f1bb0045563abbb7908621d92d8939e5182f",
          "linkedWithoutMetadata": "8ac05d68d3c513b9b21725d149d1f1bb0045563abbb7908621d92d8939e5182f"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradablePrivate",
            "src": "contracts\\FantomNFTTradablePrivate.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts\\FantomNFTTradablePrivate.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:27"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:28"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:29"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradablePrivate.sol:30"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradablePrivate.sol:33"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTTradablePrivate.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomPriceFeed": {
        "src": "contracts\\FantomPriceFeed.sol:21",
        "version": {
          "withMetadata": "2179f4724517738e1fb353bf1cb098d7a0480bddecf6b18e59184405ea804515",
          "withoutMetadata": "2179f4724517738e1fb353bf1cb098d7a0480bddecf6b18e59184405ea804515",
          "linkedWithoutMetadata": "2179f4724517738e1fb353bf1cb098d7a0480bddecf6b18e59184405ea804515"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerOracle(address,address)",
          "updateOracle(address,address)",
          "getPrice(address)",
          "updateAddressRegistry(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomPriceFeed",
            "src": "contracts\\FantomPriceFeed.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomPriceFeed",
              "label": "oracles",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts\\FantomPriceFeed.sol:23"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "addressRegistry",
              "type": "t_address",
              "src": "contracts\\FantomPriceFeed.sol:26"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "wFTM",
              "type": "t_address",
              "src": "contracts\\FantomPriceFeed.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IOracle": {
        "src": "contracts\\FantomPriceFeed.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestAnswer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomTokenRegistry": {
        "src": "contracts\\FantomTokenRegistry.sol:7",
        "version": {
          "withMetadata": "f557aeb9df5f2a6d4d41c6ed338fe625912760f47b04da7f88e543b786055f16",
          "withoutMetadata": "f557aeb9df5f2a6d4d41c6ed338fe625912760f47b04da7f88e543b786055f16",
          "linkedWithoutMetadata": "f557aeb9df5f2a6d4d41c6ed338fe625912760f47b04da7f88e543b786055f16"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "add(address)",
          "remove(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomTokenRegistry",
              "label": "enabled",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomTokenRegistry.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155": {
        "src": "contracts\\library\\ERC1155.sol:11",
        "version": {
          "withMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "withoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "linkedWithoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48"
        },
        "inherit": [
          "IERC165"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155",
              "label": "balances",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts\\library\\ERC1155.sol:25"
            },
            {
              "contract": "ERC1155",
              "label": "operators",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts\\library\\ERC1155.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155Metadata": {
        "src": "contracts\\library\\ERC1155Metadata.sol:9",
        "version": {
          "withMetadata": "51a5cd7d489c53959de1b4b946e542c6c132199cdb9fc8ee5b161d795330bc09",
          "withoutMetadata": "51a5cd7d489c53959de1b4b946e542c6c132199cdb9fc8ee5b161d795330bc09",
          "linkedWithoutMetadata": "51a5cd7d489c53959de1b4b946e542c6c132199cdb9fc8ee5b161d795330bc09"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155Metadata",
              "label": "baseMetadataURI",
              "type": "t_string_storage",
              "src": "contracts\\library\\ERC1155Metadata.sol:12"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155MintBurn": {
        "src": "contracts\\library\\ERC1155MintBurn.sol:9",
        "version": {
          "withMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "withoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48",
          "linkedWithoutMetadata": "748c76847773e1b372f2d717e233c3c946df754e2900621c2a229d0a8d6d2b48"
        },
        "inherit": [
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155TokenReceiver": {
        "src": "contracts\\library\\IERC1155TokenReceiver.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BiddingContractMock": {
        "src": "contracts\\mock\\BiddingContractMock.sol:7",
        "version": {
          "withMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a",
          "withoutMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a",
          "linkedWithoutMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "bid(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BiddingContractMock",
            "src": "contracts\\mock\\BiddingContractMock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BiddingContractMock",
              "label": "auctionContract",
              "type": "t_contract(FantomAuction)8471",
              "src": "contracts\\mock\\BiddingContractMock.sol:8"
            }
          ],
          "types": {
            "t_contract(FantomAuction)8471": {
              "label": "contract FantomAuction"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuctionMock": {
        "src": "contracts\\mock\\FantomAuctionMock.sol:7",
        "version": {
          "withMetadata": "fdd785b62bd3dbeff80b266d8be027fce6fce02f5aba2d3eb253346d53c7b0e1",
          "withoutMetadata": "fdd785b62bd3dbeff80b266d8be027fce6fce02f5aba2d3eb253346d53c7b0e1",
          "linkedWithoutMetadata": "fdd785b62bd3dbeff80b266d8be027fce6fce02f5aba2d3eb253346d53c7b0e1"
        },
        "inherit": [
          "FantomAuction",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "setNowOverride(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuctionMock",
              "label": "nowOverride",
              "type": "t_uint256",
              "src": "contracts\\mock\\FantomAuctionMock.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts\\mock\\MockERC20.sol:7",
        "version": {
          "withMetadata": "d825fed50e7322ed52c283c318628220344d5aca187c9dc3813d7f5889faf0a8",
          "withoutMetadata": "d825fed50e7322ed52c283c318628220344d5aca187c9dc3813d7f5889faf0a8",
          "linkedWithoutMetadata": "d825fed50e7322ed52c283c318628220344d5aca187c9dc3813d7f5889faf0a8"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts\\mock\\MockERC20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:340",
        "version": {
          "withMetadata": "23df31985695cc4bc8d5f5dcb1401f4c9fc004973e533a48f50e2a20bb9a0308",
          "withoutMetadata": "23df31985695cc4bc8d5f5dcb1401f4c9fc004973e533a48f50e2a20bb9a0308",
          "linkedWithoutMetadata": "23df31985695cc4bc8d5f5dcb1401f4c9fc004973e533a48f50e2a20bb9a0308"
        },
        "inherit": [
          "UpgradeabilityProxy",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AdminUpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:350"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:428"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:46",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:264",
        "version": {
          "withMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298",
          "withoutMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298",
          "linkedWithoutMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298"
        },
        "inherit": [
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:273"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:277"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyAdmin": {
        "src": "contracts\\proxy\\ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "1656613df43ea9c96983bb3f81976ece2e279af8f162749eb5e29c655a156ea8",
          "withoutMetadata": "1656613df43ea9c96983bb3f81976ece2e279af8f162749eb5e29c655a156ea8",
          "linkedWithoutMetadata": "1656613df43ea9c96983bb3f81976ece2e279af8f162749eb5e29c655a156ea8"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\math\\SafeMath.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165",
            "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC165",
              "label": "_supportedInterfaces",
              "type": "t_mapping(t_bytes4,t_bool)",
              "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "contracts\\library\\IERC165.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155": {
        "src": "@openzeppelin\\contracts\\token\\ERC1155\\IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "allowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\SafeERC20.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:21",
        "version": {
          "withMetadata": "1e2cea6554346fa0d22aab3f1860ee81a97664e512e29dca59115806e85a0b09",
          "withoutMetadata": "1e2cea6554346fa0d22aab3f1860ee81a97664e512e29dca59115806e85a0b09",
          "linkedWithoutMetadata": "1e2cea6554346fa0d22aab3f1860ee81a97664e512e29dca59115806e85a0b09"
        },
        "inherit": [
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address",
          "EnumerableSet",
          "EnumerableMap",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "baseURI()",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:93"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_holderTokens",
              "type": "t_mapping(t_address,t_struct(UintSet)4679_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenOwners",
              "type": "t_struct(UintToAddressMap)4056_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:42"
            },
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:45"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:48"
            },
            {
              "contract": "ERC721",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:51"
            },
            {
              "contract": "ERC721",
              "label": "_baseURI",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(UintSet)4679_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UintSet)4679_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4293_storage"
                }
              ]
            },
            "t_struct(Set)4293_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(UintToAddressMap)4056_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)3738_storage"
                }
              ]
            },
            "t_struct(Map)3738_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)3730_storage)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_struct(MapEntry)3730_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]"
            },
            "t_struct(MapEntry)3730_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Enumerable.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:118",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableMap": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableMap.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableSet.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:8",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomAddressRegistry": {
        "src": "contracts\\FantomAddressRegistry.sol:8",
        "version": {
          "withMetadata": "01210ef5a113adaade232d13a6ed6aa0103f2b25eafeceefe296975e29df66cb",
          "withoutMetadata": "01210ef5a113adaade232d13a6ed6aa0103f2b25eafeceefe296975e29df66cb",
          "linkedWithoutMetadata": "01210ef5a113adaade232d13a6ed6aa0103f2b25eafeceefe296975e29df66cb"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "updateArtion(address)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateNFTFactory(address)",
          "updateNFTFactoryPrivate(address)",
          "updateArtFactory(address)",
          "updateArtFactoryPrivate(address)",
          "updateTokenRegistry(address)",
          "updatePriceFeed(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAddressRegistry",
              "label": "artion",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:12"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:15"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:18"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:21"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "factory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:24"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:27"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "artFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:30"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateArtFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:33"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "tokenRegistry",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:36"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "priceFeed",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactory": {
        "src": "contracts\\FantomArtFactory.sol:8",
        "version": {
          "withMetadata": "583e5e08dbcf94ae8ca1fdc1cd4bb345c7582159d514e5e44d73947242b44d8e",
          "withoutMetadata": "583e5e08dbcf94ae8ca1fdc1cd4bb345c7582159d514e5e44d73947242b44d8e",
          "linkedWithoutMetadata": "583e5e08dbcf94ae8ca1fdc1cd4bb345c7582159d514e5e44d73947242b44d8e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactory",
            "src": "contracts\\FantomArtFactory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactory.sol:14"
            },
            {
              "contract": "FantomArtFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactory.sol:17"
            },
            {
              "contract": "FantomArtFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactory.sol:20"
            },
            {
              "contract": "FantomArtFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactory.sol:23"
            },
            {
              "contract": "FantomArtFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtFactory.sol:26"
            },
            {
              "contract": "FantomArtFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomArtFactory.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactoryPrivate": {
        "src": "contracts\\FantomArtFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "893b0ffedf7928a0dffa064b5bef0158d2766b6164c471c33a3be019b7472d5f",
          "withoutMetadata": "893b0ffedf7928a0dffa064b5bef0158d2766b6164c471c33a3be019b7472d5f",
          "linkedWithoutMetadata": "893b0ffedf7928a0dffa064b5bef0158d2766b6164c471c33a3be019b7472d5f"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactoryPrivate",
            "src": "contracts\\FantomArtFactoryPrivate.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomArtFactoryPrivate.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradable": {
        "src": "contracts\\FantomArtTradable.sol:22",
        "version": {
          "withMetadata": "073fe51513c158c095357630028d8a0956ecb69b5d37aef8e14b7ebd12b802cd",
          "withoutMetadata": "073fe51513c158c095357630028d8a0956ecb69b5d37aef8e14b7ebd12b802cd",
          "linkedWithoutMetadata": "073fe51513c158c095357630028d8a0956ecb69b5d37aef8e14b7ebd12b802cd"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradable",
            "src": "contracts\\FantomArtTradable.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts\\FantomArtTradable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradable",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradable.sol:28"
            },
            {
              "contract": "FantomArtTradable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts\\FantomArtTradable.sol:31"
            },
            {
              "contract": "FantomArtTradable",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtTradable.sol:33"
            },
            {
              "contract": "FantomArtTradable",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\FantomArtTradable.sol:34"
            },
            {
              "contract": "FantomArtTradable",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradable.sol:37"
            },
            {
              "contract": "FantomArtTradable",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradable.sol:39"
            },
            {
              "contract": "FantomArtTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradable.sol:41"
            },
            {
              "contract": "FantomArtTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtTradable.sol:43"
            },
            {
              "contract": "FantomArtTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradable.sol:45"
            },
            {
              "contract": "FantomArtTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradable.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "OwnableDelegateProxy": {
        "src": "contracts\\FantomArtTradablePrivate.sol:10",
        "version": {
          "withMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "withoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "linkedWithoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyRegistry": {
        "src": "contracts\\FantomArtTradablePrivate.sol:12",
        "version": {
          "withMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9",
          "withoutMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9",
          "linkedWithoutMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ProxyRegistry",
              "label": "proxies",
              "type": "t_mapping(t_address,t_contract(OwnableDelegateProxy)5923)",
              "src": "contracts\\FantomArtTradablePrivate.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_contract(OwnableDelegateProxy)5923)": {
              "label": "mapping(address => contract OwnableDelegateProxy)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(OwnableDelegateProxy)5923": {
              "label": "contract OwnableDelegateProxy"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradablePrivate": {
        "src": "contracts\\FantomArtTradablePrivate.sol:22",
        "version": {
          "withMetadata": "28a475c18ca3bd4f70c401fecbb1b9c87ced2934220c31a536e897a41f9499df",
          "withoutMetadata": "28a475c18ca3bd4f70c401fecbb1b9c87ced2934220c31a536e897a41f9499df",
          "linkedWithoutMetadata": "28a475c18ca3bd4f70c401fecbb1b9c87ced2934220c31a536e897a41f9499df"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradablePrivate",
            "src": "contracts\\FantomArtTradablePrivate.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts\\FantomArtTradablePrivate.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradablePrivate.sol:28"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts\\FantomArtTradablePrivate.sol:31"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtTradablePrivate.sol:33"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\FantomArtTradablePrivate.sol:34"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradablePrivate.sol:37"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradablePrivate.sol:39"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradablePrivate.sol:41"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtTradablePrivate.sol:43"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradablePrivate.sol:45"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradablePrivate.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Artion": {
        "src": "contracts\\FantomArtion.sol:9",
        "version": {
          "withMetadata": "1fbd3d067973b517f98c1c2447a1a8d7e6f344afa9fd08fe7e44bdd0efd89bd8",
          "withoutMetadata": "1fbd3d067973b517f98c1c2447a1a8d7e6f344afa9fd08fe7e44bdd0efd89bd8",
          "linkedWithoutMetadata": "1fbd3d067973b517f98c1c2447a1a8d7e6f344afa9fd08fe7e44bdd0efd89bd8"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable,uint256)",
          "mint(address,string)",
          "burn(uint256)",
          "exists(uint256)",
          "isApproved(uint256,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Artion",
            "src": "contracts\\FantomArtion.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Artion",
              "label": "tokenIdPointer",
              "type": "t_uint256",
              "src": "contracts\\FantomArtion.sol:26"
            },
            {
              "contract": "Artion",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtion.sol:29"
            },
            {
              "contract": "Artion",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtion.sol:32"
            },
            {
              "contract": "Artion",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtion.sol:35"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuction": {
        "src": "contracts\\FantomAuction.sol:55",
        "version": {
          "withMetadata": "8d19b46225e46d5101141be3926fb88f4c25386db36241fa12d9a9cfb9756d91",
          "withoutMetadata": "8d19b46225e46d5101141be3926fb88f4c25386db36241fa12d9a9cfb9756d91",
          "linkedWithoutMetadata": "8d19b46225e46d5101141be3926fb88f4c25386db36241fa12d9a9cfb9756d91"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable)",
          "createAuction(address,uint256,address,uint256,uint256,bool,uint256)",
          "placeBid(address,uint256)",
          "placeBid(address,uint256,uint256)",
          "withdrawBid(address,uint256)",
          "resultAuction(address,uint256)",
          "cancelAuction(address,uint256)",
          "toggleIsPaused()",
          "updateMinBidIncrement(uint256)",
          "updateBidWithdrawalLockTime(uint256)",
          "updateAuctionReservePrice(address,uint256,uint256)",
          "updateAuctionStartTime(address,uint256,uint256)",
          "updateAuctionEndTime(address,uint256,uint256)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "getAuction(address,uint256)",
          "getHighestBidder(address,uint256)",
          "reclaimERC20(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "minBidIncrement",
            "src": "contracts\\FantomAuction.sol:156"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bidWithdrawalLockTime",
            "src": "contracts\\FantomAuction.sol:159"
          },
          {
            "kind": "state-variable-assignment",
            "name": "platformFee",
            "src": "contracts\\FantomAuction.sol:162"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuction",
              "label": "auctions",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6732_storage))",
              "src": "contracts\\FantomAuction.sol:150"
            },
            {
              "contract": "FantomAuction",
              "label": "highestBids",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6739_storage))",
              "src": "contracts\\FantomAuction.sol:153"
            },
            {
              "contract": "FantomAuction",
              "label": "minBidIncrement",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:156"
            },
            {
              "contract": "FantomAuction",
              "label": "bidWithdrawalLockTime",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:159"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:162"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFeeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomAuction.sol:165"
            },
            {
              "contract": "FantomAuction",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)6539",
              "src": "contracts\\FantomAuction.sol:168"
            },
            {
              "contract": "FantomAuction",
              "label": "isPaused",
              "type": "t_bool",
              "src": "contracts\\FantomAuction.sol:171"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6732_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.Auction))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(Auction)6732_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.Auction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Auction)6732_storage": {
              "label": "struct FantomAuction.Auction",
              "members": [
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "minBid",
                  "type": "t_uint256"
                },
                {
                  "label": "reservePrice",
                  "type": "t_uint256"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256"
                },
                {
                  "label": "resulted",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6739_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.HighestBid))"
            },
            "t_mapping(t_uint256,t_struct(HighestBid)6739_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.HighestBid)"
            },
            "t_struct(HighestBid)6739_storage": {
              "label": "struct FantomAuction.HighestBid",
              "members": [
                {
                  "label": "bidder",
                  "type": "t_address_payable"
                },
                {
                  "label": "bid",
                  "type": "t_uint256"
                },
                {
                  "label": "lastBidTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)6539": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAddressRegistry": {
        "src": "contracts\\FantomPriceFeed.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenRegistry()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomBundleMarketplace": {
        "src": "contracts\\FantomMarketplace.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,address,address)",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomTokenRegistry": {
        "src": "contracts\\FantomPriceFeed.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enabled(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomBundleMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:39",
        "version": {
          "withMetadata": "922a93dbb454a7e8548f20e3d8081b3b330d2eceef115128208c16952a787148",
          "withoutMetadata": "922a93dbb454a7e8548f20e3d8081b3b330d2eceef115128208c16952a787148",
          "linkedWithoutMetadata": "922a93dbb454a7e8548f20e3d8081b3b330d2eceef115128208c16952a787148"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20",
          "EnumerableSet"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "getListing(address,string)",
          "listItem(string,address[],uint256[],uint256[],address,uint256,uint256)",
          "cancelListing(string)",
          "updateListing(string,address,uint256)",
          "buyItem(string)",
          "buyItem(string,address)",
          "createOffer(string,address,uint256,uint256)",
          "cancelOffer(string)",
          "acceptOffer(string,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomBundleMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8636_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:106"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "owners",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts\\FantomBundleMarketplace.sol:109"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIdsPerItem",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4473_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:111"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "nftIndexes",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))",
              "src": "contracts\\FantomBundleMarketplace.sol:113"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIds",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "src": "contracts\\FantomBundleMarketplace.sol:115"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "offers",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8643_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:118"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomBundleMarketplace.sol:121"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomBundleMarketplace.sol:124"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)8499",
              "src": "contracts\\FantomBundleMarketplace.sol:127"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8636_storage))": {
              "label": "mapping(address => mapping(bytes32 => struct FantomBundleMarketplace.Listing))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_struct(Listing)8636_storage)": {
              "label": "mapping(bytes32 => struct FantomBundleMarketplace.Listing)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Listing)8636_storage": {
              "label": "struct FantomBundleMarketplace.Listing",
              "members": [
                {
                  "label": "nfts",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "tokenIds",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "quantities",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4473_storage))": {
              "label": "mapping(address => mapping(uint256 => struct EnumerableSet.Bytes32Set))"
            },
            "t_mapping(t_uint256,t_struct(Bytes32Set)4473_storage)": {
              "label": "mapping(uint256 => struct EnumerableSet.Bytes32Set)"
            },
            "t_struct(Bytes32Set)4473_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4293_storage"
                }
              ]
            },
            "t_struct(Set)4293_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
              "label": "mapping(bytes32 => mapping(address => mapping(uint256 => uint256)))"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8643_storage))": {
              "label": "mapping(bytes32 => mapping(address => struct FantomBundleMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)8643_storage)": {
              "label": "mapping(address => struct FantomBundleMarketplace.Offer)"
            },
            "t_struct(Offer)8643_storage": {
              "label": "struct FantomBundleMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)8499": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomMarketplace": {
        "src": "contracts\\FantomMarketplace.sol:71",
        "version": {
          "withMetadata": "d80d6a2d666b19c59a5e6627b3eb7b5f4dd19ed0b71d2361a7fddca0e892911b",
          "withoutMetadata": "d80d6a2d666b19c59a5e6627b3eb7b5f4dd19ed0b71d2361a7fddca0e892911b",
          "linkedWithoutMetadata": "d80d6a2d666b19c59a5e6627b3eb7b5f4dd19ed0b71d2361a7fddca0e892911b"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable,uint16)",
          "listItem(address,uint256,uint256,address,uint256,uint256)",
          "cancelListing(address,uint256)",
          "updateListing(address,uint256,address,uint256)",
          "buyItem(address,uint256,address,address)",
          "createOffer(address,uint256,address,uint256,uint256,uint256)",
          "cancelOffer(address,uint256)",
          "acceptOffer(address,uint256,address)",
          "registerRoyalty(address,uint256,uint16)",
          "registerCollectionRoyalty(address,address,uint16,address)",
          "getPrice(address)",
          "updatePlatformFee(uint16)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomMarketplace",
              "label": "minters",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
              "src": "contracts\\FantomMarketplace.sol:151"
            },
            {
              "contract": "FantomMarketplace",
              "label": "royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint16))",
              "src": "contracts\\FantomMarketplace.sol:154"
            },
            {
              "contract": "FantomMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10840_storage)))",
              "src": "contracts\\FantomMarketplace.sol:157"
            },
            {
              "contract": "FantomMarketplace",
              "label": "offers",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10849_storage)))",
              "src": "contracts\\FantomMarketplace.sol:161"
            },
            {
              "contract": "FantomMarketplace",
              "label": "platformFee",
              "type": "t_uint16",
              "src": "contracts\\FantomMarketplace.sol:165"
            },
            {
              "contract": "FantomMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomMarketplace.sol:168"
            },
            {
              "contract": "FantomMarketplace",
              "label": "collectionRoyalties",
              "type": "t_mapping(t_address,t_struct(CollectionRoyalty)10856_storage)",
              "src": "contracts\\FantomMarketplace.sol:171"
            },
            {
              "contract": "FantomMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)10670",
              "src": "contracts\\FantomMarketplace.sol:174"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
              "label": "mapping(address => mapping(uint256 => address))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint16))": {
              "label": "mapping(address => mapping(uint256 => uint16))"
            },
            "t_mapping(t_uint256,t_uint16)": {
              "label": "mapping(uint256 => uint16)"
            },
            "t_uint16": {
              "label": "uint16"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10840_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Listing)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10840_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Listing))"
            },
            "t_mapping(t_address,t_struct(Listing)10840_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Listing)"
            },
            "t_struct(Listing)10840_storage": {
              "label": "struct FantomMarketplace.Listing",
              "members": [
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10849_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Offer)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10849_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)10849_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Offer)"
            },
            "t_struct(Offer)10849_storage": {
              "label": "struct FantomMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_struct(CollectionRoyalty)10856_storage)": {
              "label": "mapping(address => struct FantomMarketplace.CollectionRoyalty)"
            },
            "t_struct(CollectionRoyalty)10856_storage": {
              "label": "struct FantomMarketplace.CollectionRoyalty",
              "members": [
                {
                  "label": "royalty",
                  "type": "t_uint16"
                },
                {
                  "label": "creator",
                  "type": "t_address"
                },
                {
                  "label": "feeRecipient",
                  "type": "t_address"
                }
              ]
            },
            "t_contract(IFantomAddressRegistry)10670": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAuction": {
        "src": "contracts\\FantomMarketplace.sol:35",
        "inherit": [],
        "libraries": [],
        "methods": [
          "auctions(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomNFTFactory": {
        "src": "contracts\\FantomMarketplace.sol:57",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exists(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomPriceFeed": {
        "src": "contracts\\FantomMarketplace.sol:65",
        "inherit": [],
        "libraries": [],
        "methods": [
          "wFTM()",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactory": {
        "src": "contracts\\FantomNFTFactory.sol:8",
        "version": {
          "withMetadata": "8de7ccec42bb2887661ac7827aa39ca292ec085834623368f5cc82c2d66215a1",
          "withoutMetadata": "8de7ccec42bb2887661ac7827aa39ca292ec085834623368f5cc82c2d66215a1",
          "linkedWithoutMetadata": "8de7ccec42bb2887661ac7827aa39ca292ec085834623368f5cc82c2d66215a1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactory",
            "src": "contracts\\FantomNFTFactory.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactory",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:14"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:17"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:20"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactory.sol:23"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactory.sol:26"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTFactory.sol:29"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomNFTFactory.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactoryPrivate": {
        "src": "contracts\\FantomNFTFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "617d5aac8c2d8b9886c0beaa02c7273f4585bb8cbc3086ddd092da39807e75fd",
          "withoutMetadata": "617d5aac8c2d8b9886c0beaa02c7273f4585bb8cbc3086ddd092da39807e75fd",
          "linkedWithoutMetadata": "617d5aac8c2d8b9886c0beaa02c7273f4585bb8cbc3086ddd092da39807e75fd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactoryPrivate",
            "src": "contracts\\FantomNFTFactoryPrivate.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:29"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradable": {
        "src": "contracts\\FantomNFTTradable.sol:12",
        "version": {
          "withMetadata": "7782f24d2790ef5f4a840150d203fbad27789671a16943fc5de8e439abe2a051",
          "withoutMetadata": "7782f24d2790ef5f4a840150d203fbad27789671a16943fc5de8e439abe2a051",
          "linkedWithoutMetadata": "7782f24d2790ef5f4a840150d203fbad27789671a16943fc5de8e439abe2a051"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradable",
            "src": "contracts\\FantomNFTTradable.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts\\FantomNFTTradable.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradable",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:27"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:28"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:29"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradable.sol:30"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradable.sol:33"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTTradable.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradablePrivate": {
        "src": "contracts\\FantomNFTTradablePrivate.sol:12",
        "version": {
          "withMetadata": "37c2cd6de62c9befdccc511175806c228b43a6cd762d8be1dffcb01f188dc53d",
          "withoutMetadata": "37c2cd6de62c9befdccc511175806c228b43a6cd762d8be1dffcb01f188dc53d",
          "linkedWithoutMetadata": "37c2cd6de62c9befdccc511175806c228b43a6cd762d8be1dffcb01f188dc53d"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradablePrivate",
            "src": "contracts\\FantomNFTTradablePrivate.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts\\FantomNFTTradablePrivate.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:27"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:28"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:29"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradablePrivate.sol:30"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradablePrivate.sol:33"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTTradablePrivate.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomPriceFeed": {
        "src": "contracts\\FantomPriceFeed.sol:21",
        "version": {
          "withMetadata": "c3486acea602badcee713e0d4a167bc6e4167f4ebe58ea0974294fe748fcd396",
          "withoutMetadata": "c3486acea602badcee713e0d4a167bc6e4167f4ebe58ea0974294fe748fcd396",
          "linkedWithoutMetadata": "c3486acea602badcee713e0d4a167bc6e4167f4ebe58ea0974294fe748fcd396"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerOracle(address,address)",
          "updateOracle(address,address)",
          "getPrice(address)",
          "updateAddressRegistry(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomPriceFeed",
            "src": "contracts\\FantomPriceFeed.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomPriceFeed",
              "label": "oracles",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts\\FantomPriceFeed.sol:23"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "addressRegistry",
              "type": "t_address",
              "src": "contracts\\FantomPriceFeed.sol:26"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "wFTM",
              "type": "t_address",
              "src": "contracts\\FantomPriceFeed.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IOracle": {
        "src": "contracts\\FantomPriceFeed.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestAnswer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomTokenRegistry": {
        "src": "contracts\\FantomTokenRegistry.sol:7",
        "version": {
          "withMetadata": "15e092d3ba18f8b0b09cf3a08319d468dc9c698c094acc12a625b236ffdfe0d2",
          "withoutMetadata": "15e092d3ba18f8b0b09cf3a08319d468dc9c698c094acc12a625b236ffdfe0d2",
          "linkedWithoutMetadata": "15e092d3ba18f8b0b09cf3a08319d468dc9c698c094acc12a625b236ffdfe0d2"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "add(address)",
          "remove(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomTokenRegistry",
              "label": "enabled",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomTokenRegistry.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155": {
        "src": "contracts\\library\\ERC1155.sol:11",
        "version": {
          "withMetadata": "58bc2f4636c76f12bee92fae853139755d7ef8771fcafc0ac0d2a4559aae9623",
          "withoutMetadata": "58bc2f4636c76f12bee92fae853139755d7ef8771fcafc0ac0d2a4559aae9623",
          "linkedWithoutMetadata": "58bc2f4636c76f12bee92fae853139755d7ef8771fcafc0ac0d2a4559aae9623"
        },
        "inherit": [
          "IERC165"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155",
              "label": "balances",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts\\library\\ERC1155.sol:25"
            },
            {
              "contract": "ERC1155",
              "label": "operators",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts\\library\\ERC1155.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155Metadata": {
        "src": "contracts\\library\\ERC1155Metadata.sol:9",
        "version": {
          "withMetadata": "9f4ac3045c6d47f7902357b737f9b36eb6d74a6144b8f5ff47ba6041be851533",
          "withoutMetadata": "9f4ac3045c6d47f7902357b737f9b36eb6d74a6144b8f5ff47ba6041be851533",
          "linkedWithoutMetadata": "9f4ac3045c6d47f7902357b737f9b36eb6d74a6144b8f5ff47ba6041be851533"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155Metadata",
              "label": "baseMetadataURI",
              "type": "t_string_storage",
              "src": "contracts\\library\\ERC1155Metadata.sol:12"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155MintBurn": {
        "src": "contracts\\library\\ERC1155MintBurn.sol:9",
        "version": {
          "withMetadata": "58bc2f4636c76f12bee92fae853139755d7ef8771fcafc0ac0d2a4559aae9623",
          "withoutMetadata": "58bc2f4636c76f12bee92fae853139755d7ef8771fcafc0ac0d2a4559aae9623",
          "linkedWithoutMetadata": "58bc2f4636c76f12bee92fae853139755d7ef8771fcafc0ac0d2a4559aae9623"
        },
        "inherit": [
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155TokenReceiver": {
        "src": "contracts\\library\\IERC1155TokenReceiver.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BiddingContractMock": {
        "src": "contracts\\mock\\BiddingContractMock.sol:7",
        "version": {
          "withMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a",
          "withoutMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a",
          "linkedWithoutMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "bid(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BiddingContractMock",
            "src": "contracts\\mock\\BiddingContractMock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BiddingContractMock",
              "label": "auctionContract",
              "type": "t_contract(FantomAuction)8471",
              "src": "contracts\\mock\\BiddingContractMock.sol:8"
            }
          ],
          "types": {
            "t_contract(FantomAuction)8471": {
              "label": "contract FantomAuction"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuctionMock": {
        "src": "contracts\\mock\\FantomAuctionMock.sol:7",
        "version": {
          "withMetadata": "6fcb4ab4243f9d9416511b17b9ccb05f70e5f22d99904e93d4178e558547231f",
          "withoutMetadata": "6fcb4ab4243f9d9416511b17b9ccb05f70e5f22d99904e93d4178e558547231f",
          "linkedWithoutMetadata": "6fcb4ab4243f9d9416511b17b9ccb05f70e5f22d99904e93d4178e558547231f"
        },
        "inherit": [
          "FantomAuction",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "setNowOverride(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuctionMock",
              "label": "nowOverride",
              "type": "t_uint256",
              "src": "contracts\\mock\\FantomAuctionMock.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts\\mock\\MockERC20.sol:7",
        "version": {
          "withMetadata": "b73d87e4c8cacbaaea189aec044e8ddaf418db412bc65c27d4f610aa1ed782c7",
          "withoutMetadata": "b73d87e4c8cacbaaea189aec044e8ddaf418db412bc65c27d4f610aa1ed782c7",
          "linkedWithoutMetadata": "b73d87e4c8cacbaaea189aec044e8ddaf418db412bc65c27d4f610aa1ed782c7"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts\\mock\\MockERC20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:340",
        "version": {
          "withMetadata": "75ce8f9e6c8139b9214082e60df86ee29b7d565d21778a045d6e314517331159",
          "withoutMetadata": "75ce8f9e6c8139b9214082e60df86ee29b7d565d21778a045d6e314517331159",
          "linkedWithoutMetadata": "75ce8f9e6c8139b9214082e60df86ee29b7d565d21778a045d6e314517331159"
        },
        "inherit": [
          "UpgradeabilityProxy",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AdminUpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:350"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:428"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:46",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:264",
        "version": {
          "withMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298",
          "withoutMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298",
          "linkedWithoutMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298"
        },
        "inherit": [
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:273"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:277"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyAdmin": {
        "src": "contracts\\proxy\\ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "d9aa31c54b45f6b062f63d760e5867b89800b40f20def69a8978375156a01ff4",
          "withoutMetadata": "d9aa31c54b45f6b062f63d760e5867b89800b40f20def69a8978375156a01ff4",
          "linkedWithoutMetadata": "d9aa31c54b45f6b062f63d760e5867b89800b40f20def69a8978375156a01ff4"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\math\\SafeMath.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165",
            "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC165",
              "label": "_supportedInterfaces",
              "type": "t_mapping(t_bytes4,t_bool)",
              "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "contracts\\library\\IERC165.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155": {
        "src": "@openzeppelin\\contracts\\token\\ERC1155\\IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "allowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\SafeERC20.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:21",
        "version": {
          "withMetadata": "7d1b8bc65ea753431a375c253769a41f12e4558a054bd9d62e9b28b3d1ed7e26",
          "withoutMetadata": "7d1b8bc65ea753431a375c253769a41f12e4558a054bd9d62e9b28b3d1ed7e26",
          "linkedWithoutMetadata": "7d1b8bc65ea753431a375c253769a41f12e4558a054bd9d62e9b28b3d1ed7e26"
        },
        "inherit": [
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address",
          "EnumerableSet",
          "EnumerableMap",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "baseURI()",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:93"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_holderTokens",
              "type": "t_mapping(t_address,t_struct(UintSet)4679_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenOwners",
              "type": "t_struct(UintToAddressMap)4056_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:42"
            },
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:45"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:48"
            },
            {
              "contract": "ERC721",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:51"
            },
            {
              "contract": "ERC721",
              "label": "_baseURI",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(UintSet)4679_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UintSet)4679_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4293_storage"
                }
              ]
            },
            "t_struct(Set)4293_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(UintToAddressMap)4056_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)3738_storage"
                }
              ]
            },
            "t_struct(Map)3738_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)3730_storage)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_struct(MapEntry)3730_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]"
            },
            "t_struct(MapEntry)3730_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Enumerable.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:118",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableMap": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableMap.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableSet.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:8",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomAddressRegistry": {
        "src": "contracts\\FantomAddressRegistry.sol:8",
        "version": {
          "withMetadata": "d23406c4699cceaff85a21398efbe280eff819a264d72e8c82a514e4ff9d0075",
          "withoutMetadata": "d23406c4699cceaff85a21398efbe280eff819a264d72e8c82a514e4ff9d0075",
          "linkedWithoutMetadata": "d23406c4699cceaff85a21398efbe280eff819a264d72e8c82a514e4ff9d0075"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "updateArtion(address)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateNFTFactory(address)",
          "updateNFTFactoryPrivate(address)",
          "updateArtFactory(address)",
          "updateArtFactoryPrivate(address)",
          "updateTokenRegistry(address)",
          "updatePriceFeed(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAddressRegistry",
              "label": "artion",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:12"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:15"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:18"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:21"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "factory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:24"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:27"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "artFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:30"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateArtFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:33"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "tokenRegistry",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:36"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "priceFeed",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactory": {
        "src": "contracts\\FantomArtFactory.sol:8",
        "version": {
          "withMetadata": "fdacce07180257517dfa324303f347daa7c51e886fd11c1a516b7a18f28a44a7",
          "withoutMetadata": "fdacce07180257517dfa324303f347daa7c51e886fd11c1a516b7a18f28a44a7",
          "linkedWithoutMetadata": "fdacce07180257517dfa324303f347daa7c51e886fd11c1a516b7a18f28a44a7"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactory",
            "src": "contracts\\FantomArtFactory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactory.sol:14"
            },
            {
              "contract": "FantomArtFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactory.sol:17"
            },
            {
              "contract": "FantomArtFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactory.sol:20"
            },
            {
              "contract": "FantomArtFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactory.sol:23"
            },
            {
              "contract": "FantomArtFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtFactory.sol:26"
            },
            {
              "contract": "FantomArtFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomArtFactory.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactoryPrivate": {
        "src": "contracts\\FantomArtFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "1ef61cb6bf2cb44ed6e06796af734c60cce33f7045f700bb08313d0ca89103dd",
          "withoutMetadata": "1ef61cb6bf2cb44ed6e06796af734c60cce33f7045f700bb08313d0ca89103dd",
          "linkedWithoutMetadata": "1ef61cb6bf2cb44ed6e06796af734c60cce33f7045f700bb08313d0ca89103dd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactoryPrivate",
            "src": "contracts\\FantomArtFactoryPrivate.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomArtFactoryPrivate.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradable": {
        "src": "contracts\\FantomArtTradable.sol:22",
        "version": {
          "withMetadata": "9f5c186e1920edd4378a698c60cffa1b151a3189d98179024a820498ffe8d869",
          "withoutMetadata": "9f5c186e1920edd4378a698c60cffa1b151a3189d98179024a820498ffe8d869",
          "linkedWithoutMetadata": "9f5c186e1920edd4378a698c60cffa1b151a3189d98179024a820498ffe8d869"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradable",
            "src": "contracts\\FantomArtTradable.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts\\FantomArtTradable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradable",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradable.sol:28"
            },
            {
              "contract": "FantomArtTradable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts\\FantomArtTradable.sol:31"
            },
            {
              "contract": "FantomArtTradable",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtTradable.sol:33"
            },
            {
              "contract": "FantomArtTradable",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\FantomArtTradable.sol:34"
            },
            {
              "contract": "FantomArtTradable",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradable.sol:37"
            },
            {
              "contract": "FantomArtTradable",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradable.sol:39"
            },
            {
              "contract": "FantomArtTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradable.sol:41"
            },
            {
              "contract": "FantomArtTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtTradable.sol:43"
            },
            {
              "contract": "FantomArtTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradable.sol:45"
            },
            {
              "contract": "FantomArtTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradable.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "OwnableDelegateProxy": {
        "src": "contracts\\FantomArtTradablePrivate.sol:10",
        "version": {
          "withMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "withoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "linkedWithoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyRegistry": {
        "src": "contracts\\FantomArtTradablePrivate.sol:12",
        "version": {
          "withMetadata": "496481b621290956e068d441f49002df4ea1614c5c7d25dc01f4f856ed5446bb",
          "withoutMetadata": "496481b621290956e068d441f49002df4ea1614c5c7d25dc01f4f856ed5446bb",
          "linkedWithoutMetadata": "496481b621290956e068d441f49002df4ea1614c5c7d25dc01f4f856ed5446bb"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ProxyRegistry",
              "label": "proxies",
              "type": "t_mapping(t_address,t_contract(OwnableDelegateProxy)5923)",
              "src": "contracts\\FantomArtTradablePrivate.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_contract(OwnableDelegateProxy)5923)": {
              "label": "mapping(address => contract OwnableDelegateProxy)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(OwnableDelegateProxy)5923": {
              "label": "contract OwnableDelegateProxy"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradablePrivate": {
        "src": "contracts\\FantomArtTradablePrivate.sol:22",
        "version": {
          "withMetadata": "32239ceed7f4530a8c5537fb8258fa3f0263d049eed5bb7a884b5daa9f005044",
          "withoutMetadata": "32239ceed7f4530a8c5537fb8258fa3f0263d049eed5bb7a884b5daa9f005044",
          "linkedWithoutMetadata": "32239ceed7f4530a8c5537fb8258fa3f0263d049eed5bb7a884b5daa9f005044"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradablePrivate",
            "src": "contracts\\FantomArtTradablePrivate.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts\\FantomArtTradablePrivate.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradablePrivate.sol:28"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts\\FantomArtTradablePrivate.sol:31"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtTradablePrivate.sol:33"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\FantomArtTradablePrivate.sol:34"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradablePrivate.sol:37"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradablePrivate.sol:39"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradablePrivate.sol:41"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtTradablePrivate.sol:43"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradablePrivate.sol:45"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradablePrivate.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Artion": {
        "src": "contracts\\FantomArtion.sol:9",
        "version": {
          "withMetadata": "7d87cf18a1f16cb20233ea56421c1c04b4105063a5887a0a918937cdd20fd5bc",
          "withoutMetadata": "7d87cf18a1f16cb20233ea56421c1c04b4105063a5887a0a918937cdd20fd5bc",
          "linkedWithoutMetadata": "7d87cf18a1f16cb20233ea56421c1c04b4105063a5887a0a918937cdd20fd5bc"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable,uint256)",
          "mint(address,string)",
          "burn(uint256)",
          "exists(uint256)",
          "isApproved(uint256,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Artion",
            "src": "contracts\\FantomArtion.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Artion",
              "label": "tokenIdPointer",
              "type": "t_uint256",
              "src": "contracts\\FantomArtion.sol:26"
            },
            {
              "contract": "Artion",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtion.sol:29"
            },
            {
              "contract": "Artion",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtion.sol:32"
            },
            {
              "contract": "Artion",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtion.sol:35"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuction": {
        "src": "contracts\\FantomAuction.sol:55",
        "version": {
          "withMetadata": "f7ba83fb3ba6d0b20387b695a512e8ec1a5a8df39ad69741c140e2877433b937",
          "withoutMetadata": "f7ba83fb3ba6d0b20387b695a512e8ec1a5a8df39ad69741c140e2877433b937",
          "linkedWithoutMetadata": "f7ba83fb3ba6d0b20387b695a512e8ec1a5a8df39ad69741c140e2877433b937"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable)",
          "createAuction(address,uint256,address,uint256,uint256,bool,uint256)",
          "placeBid(address,uint256)",
          "placeBid(address,uint256,uint256)",
          "withdrawBid(address,uint256)",
          "resultAuction(address,uint256)",
          "cancelAuction(address,uint256)",
          "toggleIsPaused()",
          "updateMinBidIncrement(uint256)",
          "updateBidWithdrawalLockTime(uint256)",
          "updateAuctionReservePrice(address,uint256,uint256)",
          "updateAuctionStartTime(address,uint256,uint256)",
          "updateAuctionEndTime(address,uint256,uint256)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "getAuction(address,uint256)",
          "getHighestBidder(address,uint256)",
          "reclaimERC20(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "minBidIncrement",
            "src": "contracts\\FantomAuction.sol:156"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bidWithdrawalLockTime",
            "src": "contracts\\FantomAuction.sol:159"
          },
          {
            "kind": "state-variable-assignment",
            "name": "platformFee",
            "src": "contracts\\FantomAuction.sol:162"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuction",
              "label": "auctions",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6732_storage))",
              "src": "contracts\\FantomAuction.sol:150"
            },
            {
              "contract": "FantomAuction",
              "label": "highestBids",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6739_storage))",
              "src": "contracts\\FantomAuction.sol:153"
            },
            {
              "contract": "FantomAuction",
              "label": "minBidIncrement",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:156"
            },
            {
              "contract": "FantomAuction",
              "label": "bidWithdrawalLockTime",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:159"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:162"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFeeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomAuction.sol:165"
            },
            {
              "contract": "FantomAuction",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)6539",
              "src": "contracts\\FantomAuction.sol:168"
            },
            {
              "contract": "FantomAuction",
              "label": "isPaused",
              "type": "t_bool",
              "src": "contracts\\FantomAuction.sol:171"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6732_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.Auction))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(Auction)6732_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.Auction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Auction)6732_storage": {
              "label": "struct FantomAuction.Auction",
              "members": [
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "minBid",
                  "type": "t_uint256"
                },
                {
                  "label": "reservePrice",
                  "type": "t_uint256"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256"
                },
                {
                  "label": "resulted",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6739_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.HighestBid))"
            },
            "t_mapping(t_uint256,t_struct(HighestBid)6739_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.HighestBid)"
            },
            "t_struct(HighestBid)6739_storage": {
              "label": "struct FantomAuction.HighestBid",
              "members": [
                {
                  "label": "bidder",
                  "type": "t_address_payable"
                },
                {
                  "label": "bid",
                  "type": "t_uint256"
                },
                {
                  "label": "lastBidTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)6539": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAddressRegistry": {
        "src": "contracts\\FantomPriceFeed.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenRegistry()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomBundleMarketplace": {
        "src": "contracts\\FantomMarketplace.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,address,address)",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomTokenRegistry": {
        "src": "contracts\\FantomPriceFeed.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enabled(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomBundleMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:39",
        "version": {
          "withMetadata": "3cdbfa745458c9303b91e1f29d5cb8c0e52521a57baa36e0d281613a7a0d49ef",
          "withoutMetadata": "3cdbfa745458c9303b91e1f29d5cb8c0e52521a57baa36e0d281613a7a0d49ef",
          "linkedWithoutMetadata": "3cdbfa745458c9303b91e1f29d5cb8c0e52521a57baa36e0d281613a7a0d49ef"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20",
          "EnumerableSet"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "getListing(address,string)",
          "listItem(string,address[],uint256[],uint256[],address,uint256,uint256)",
          "cancelListing(string)",
          "updateListing(string,address,uint256)",
          "buyItem(string)",
          "buyItem(string,address)",
          "createOffer(string,address,uint256,uint256)",
          "cancelOffer(string)",
          "acceptOffer(string,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomBundleMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8636_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:106"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "owners",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts\\FantomBundleMarketplace.sol:109"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIdsPerItem",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4473_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:111"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "nftIndexes",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))",
              "src": "contracts\\FantomBundleMarketplace.sol:113"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIds",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "src": "contracts\\FantomBundleMarketplace.sol:115"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "offers",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8643_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:118"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomBundleMarketplace.sol:121"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomBundleMarketplace.sol:124"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)8499",
              "src": "contracts\\FantomBundleMarketplace.sol:127"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8636_storage))": {
              "label": "mapping(address => mapping(bytes32 => struct FantomBundleMarketplace.Listing))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_struct(Listing)8636_storage)": {
              "label": "mapping(bytes32 => struct FantomBundleMarketplace.Listing)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Listing)8636_storage": {
              "label": "struct FantomBundleMarketplace.Listing",
              "members": [
                {
                  "label": "nfts",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "tokenIds",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "quantities",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4473_storage))": {
              "label": "mapping(address => mapping(uint256 => struct EnumerableSet.Bytes32Set))"
            },
            "t_mapping(t_uint256,t_struct(Bytes32Set)4473_storage)": {
              "label": "mapping(uint256 => struct EnumerableSet.Bytes32Set)"
            },
            "t_struct(Bytes32Set)4473_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4293_storage"
                }
              ]
            },
            "t_struct(Set)4293_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
              "label": "mapping(bytes32 => mapping(address => mapping(uint256 => uint256)))"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8643_storage))": {
              "label": "mapping(bytes32 => mapping(address => struct FantomBundleMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)8643_storage)": {
              "label": "mapping(address => struct FantomBundleMarketplace.Offer)"
            },
            "t_struct(Offer)8643_storage": {
              "label": "struct FantomBundleMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)8499": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomMarketplace": {
        "src": "contracts\\FantomMarketplace.sol:71",
        "version": {
          "withMetadata": "b9e012bbcc70ac02702ab31f8b86f7c07cf305a3440a657b1d05a2bcd3112a61",
          "withoutMetadata": "b9e012bbcc70ac02702ab31f8b86f7c07cf305a3440a657b1d05a2bcd3112a61",
          "linkedWithoutMetadata": "b9e012bbcc70ac02702ab31f8b86f7c07cf305a3440a657b1d05a2bcd3112a61"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable,uint16)",
          "listItem(address,uint256,uint256,address,uint256,uint256)",
          "cancelListing(address,uint256)",
          "updateListing(address,uint256,address,uint256)",
          "buyItem(address,uint256,address,address)",
          "createOffer(address,uint256,address,uint256,uint256,uint256)",
          "cancelOffer(address,uint256)",
          "acceptOffer(address,uint256,address)",
          "registerRoyalty(address,uint256,uint16)",
          "registerCollectionRoyalty(address,address,uint16,address)",
          "getPrice(address)",
          "updatePlatformFee(uint16)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomMarketplace",
              "label": "minters",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
              "src": "contracts\\FantomMarketplace.sol:151"
            },
            {
              "contract": "FantomMarketplace",
              "label": "royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint16))",
              "src": "contracts\\FantomMarketplace.sol:154"
            },
            {
              "contract": "FantomMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10840_storage)))",
              "src": "contracts\\FantomMarketplace.sol:157"
            },
            {
              "contract": "FantomMarketplace",
              "label": "offers",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10849_storage)))",
              "src": "contracts\\FantomMarketplace.sol:161"
            },
            {
              "contract": "FantomMarketplace",
              "label": "platformFee",
              "type": "t_uint16",
              "src": "contracts\\FantomMarketplace.sol:165"
            },
            {
              "contract": "FantomMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomMarketplace.sol:168"
            },
            {
              "contract": "FantomMarketplace",
              "label": "collectionRoyalties",
              "type": "t_mapping(t_address,t_struct(CollectionRoyalty)10856_storage)",
              "src": "contracts\\FantomMarketplace.sol:171"
            },
            {
              "contract": "FantomMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)10670",
              "src": "contracts\\FantomMarketplace.sol:174"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
              "label": "mapping(address => mapping(uint256 => address))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint16))": {
              "label": "mapping(address => mapping(uint256 => uint16))"
            },
            "t_mapping(t_uint256,t_uint16)": {
              "label": "mapping(uint256 => uint16)"
            },
            "t_uint16": {
              "label": "uint16"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10840_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Listing)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10840_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Listing))"
            },
            "t_mapping(t_address,t_struct(Listing)10840_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Listing)"
            },
            "t_struct(Listing)10840_storage": {
              "label": "struct FantomMarketplace.Listing",
              "members": [
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10849_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Offer)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10849_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)10849_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Offer)"
            },
            "t_struct(Offer)10849_storage": {
              "label": "struct FantomMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_struct(CollectionRoyalty)10856_storage)": {
              "label": "mapping(address => struct FantomMarketplace.CollectionRoyalty)"
            },
            "t_struct(CollectionRoyalty)10856_storage": {
              "label": "struct FantomMarketplace.CollectionRoyalty",
              "members": [
                {
                  "label": "royalty",
                  "type": "t_uint16"
                },
                {
                  "label": "creator",
                  "type": "t_address"
                },
                {
                  "label": "feeRecipient",
                  "type": "t_address"
                }
              ]
            },
            "t_contract(IFantomAddressRegistry)10670": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAuction": {
        "src": "contracts\\FantomMarketplace.sol:35",
        "inherit": [],
        "libraries": [],
        "methods": [
          "auctions(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomNFTFactory": {
        "src": "contracts\\FantomMarketplace.sol:57",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exists(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomPriceFeed": {
        "src": "contracts\\FantomMarketplace.sol:65",
        "inherit": [],
        "libraries": [],
        "methods": [
          "wFTM()",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactory": {
        "src": "contracts\\FantomNFTFactory.sol:8",
        "version": {
          "withMetadata": "ae6a3cbcc86c833826fc9d541c16285a644d1f024c12bfb38ba00e61a40b7e40",
          "withoutMetadata": "ae6a3cbcc86c833826fc9d541c16285a644d1f024c12bfb38ba00e61a40b7e40",
          "linkedWithoutMetadata": "ae6a3cbcc86c833826fc9d541c16285a644d1f024c12bfb38ba00e61a40b7e40"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactory",
            "src": "contracts\\FantomNFTFactory.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactory",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:14"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:17"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:20"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactory.sol:23"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactory.sol:26"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTFactory.sol:29"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomNFTFactory.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactoryPrivate": {
        "src": "contracts\\FantomNFTFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "feb5bffed1f06ff1170bcdb834d3238211cbca969f16fcbba667f98e8c72f1b8",
          "withoutMetadata": "feb5bffed1f06ff1170bcdb834d3238211cbca969f16fcbba667f98e8c72f1b8",
          "linkedWithoutMetadata": "feb5bffed1f06ff1170bcdb834d3238211cbca969f16fcbba667f98e8c72f1b8"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactoryPrivate",
            "src": "contracts\\FantomNFTFactoryPrivate.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:29"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradable": {
        "src": "contracts\\FantomNFTTradable.sol:12",
        "version": {
          "withMetadata": "d890c6fb677c39b44b438c8052b7ce6e50ac6cf763cdcdf2d8c90420da7b1945",
          "withoutMetadata": "d890c6fb677c39b44b438c8052b7ce6e50ac6cf763cdcdf2d8c90420da7b1945",
          "linkedWithoutMetadata": "d890c6fb677c39b44b438c8052b7ce6e50ac6cf763cdcdf2d8c90420da7b1945"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradable",
            "src": "contracts\\FantomNFTTradable.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts\\FantomNFTTradable.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradable",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:27"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:28"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:29"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradable.sol:30"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradable.sol:33"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTTradable.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradablePrivate": {
        "src": "contracts\\FantomNFTTradablePrivate.sol:12",
        "version": {
          "withMetadata": "e952d2b3e0beb906f89152b74c6f32625ea81eff8f60de8af447834375a32a2c",
          "withoutMetadata": "e952d2b3e0beb906f89152b74c6f32625ea81eff8f60de8af447834375a32a2c",
          "linkedWithoutMetadata": "e952d2b3e0beb906f89152b74c6f32625ea81eff8f60de8af447834375a32a2c"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradablePrivate",
            "src": "contracts\\FantomNFTTradablePrivate.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts\\FantomNFTTradablePrivate.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:27"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:28"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:29"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradablePrivate.sol:30"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradablePrivate.sol:33"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTTradablePrivate.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomPriceFeed": {
        "src": "contracts\\FantomPriceFeed.sol:21",
        "version": {
          "withMetadata": "2d65dfe9470ea40318a0482146378a98d2e9b222c0fc6ce52c37c27c2755d093",
          "withoutMetadata": "2d65dfe9470ea40318a0482146378a98d2e9b222c0fc6ce52c37c27c2755d093",
          "linkedWithoutMetadata": "2d65dfe9470ea40318a0482146378a98d2e9b222c0fc6ce52c37c27c2755d093"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerOracle(address,address)",
          "updateOracle(address,address)",
          "getPrice(address)",
          "updateAddressRegistry(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomPriceFeed",
            "src": "contracts\\FantomPriceFeed.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomPriceFeed",
              "label": "oracles",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts\\FantomPriceFeed.sol:23"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "addressRegistry",
              "type": "t_address",
              "src": "contracts\\FantomPriceFeed.sol:26"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "wFTM",
              "type": "t_address",
              "src": "contracts\\FantomPriceFeed.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IOracle": {
        "src": "contracts\\FantomPriceFeed.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestAnswer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomTokenRegistry": {
        "src": "contracts\\FantomTokenRegistry.sol:7",
        "version": {
          "withMetadata": "e59039458ed222674cc78044885e3bd96f2d30fdcfad6a4fa62be5eac732f0c5",
          "withoutMetadata": "e59039458ed222674cc78044885e3bd96f2d30fdcfad6a4fa62be5eac732f0c5",
          "linkedWithoutMetadata": "e59039458ed222674cc78044885e3bd96f2d30fdcfad6a4fa62be5eac732f0c5"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "add(address)",
          "remove(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomTokenRegistry",
              "label": "enabled",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomTokenRegistry.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155": {
        "src": "contracts\\library\\ERC1155.sol:11",
        "version": {
          "withMetadata": "995a047f9dda8ade35bcfd1fa5dfdf101c590c81b97aba45432a2bb4e820908b",
          "withoutMetadata": "995a047f9dda8ade35bcfd1fa5dfdf101c590c81b97aba45432a2bb4e820908b",
          "linkedWithoutMetadata": "995a047f9dda8ade35bcfd1fa5dfdf101c590c81b97aba45432a2bb4e820908b"
        },
        "inherit": [
          "IERC165"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155",
              "label": "balances",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts\\library\\ERC1155.sol:25"
            },
            {
              "contract": "ERC1155",
              "label": "operators",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts\\library\\ERC1155.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155Metadata": {
        "src": "contracts\\library\\ERC1155Metadata.sol:9",
        "version": {
          "withMetadata": "9f18277c4f0c56d6425e805d167ac8bd797f350c71c4dee00d67817c9737862a",
          "withoutMetadata": "9f18277c4f0c56d6425e805d167ac8bd797f350c71c4dee00d67817c9737862a",
          "linkedWithoutMetadata": "9f18277c4f0c56d6425e805d167ac8bd797f350c71c4dee00d67817c9737862a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155Metadata",
              "label": "baseMetadataURI",
              "type": "t_string_storage",
              "src": "contracts\\library\\ERC1155Metadata.sol:12"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155MintBurn": {
        "src": "contracts\\library\\ERC1155MintBurn.sol:9",
        "version": {
          "withMetadata": "995a047f9dda8ade35bcfd1fa5dfdf101c590c81b97aba45432a2bb4e820908b",
          "withoutMetadata": "995a047f9dda8ade35bcfd1fa5dfdf101c590c81b97aba45432a2bb4e820908b",
          "linkedWithoutMetadata": "995a047f9dda8ade35bcfd1fa5dfdf101c590c81b97aba45432a2bb4e820908b"
        },
        "inherit": [
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155TokenReceiver": {
        "src": "contracts\\library\\IERC1155TokenReceiver.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BiddingContractMock": {
        "src": "contracts\\mock\\BiddingContractMock.sol:7",
        "version": {
          "withMetadata": "fc746d5ee23051a8f8db60ca378222d92512beb28f7e4c1900a346162fca59d3",
          "withoutMetadata": "fc746d5ee23051a8f8db60ca378222d92512beb28f7e4c1900a346162fca59d3",
          "linkedWithoutMetadata": "fc746d5ee23051a8f8db60ca378222d92512beb28f7e4c1900a346162fca59d3"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "bid(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BiddingContractMock",
            "src": "contracts\\mock\\BiddingContractMock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BiddingContractMock",
              "label": "auctionContract",
              "type": "t_contract(FantomAuction)8471",
              "src": "contracts\\mock\\BiddingContractMock.sol:8"
            }
          ],
          "types": {
            "t_contract(FantomAuction)8471": {
              "label": "contract FantomAuction"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuctionMock": {
        "src": "contracts\\mock\\FantomAuctionMock.sol:7",
        "version": {
          "withMetadata": "4b08c56cc9cca764b84e668fddf4cf0c89805975aa72aeaabf17b3644cf4ce5b",
          "withoutMetadata": "4b08c56cc9cca764b84e668fddf4cf0c89805975aa72aeaabf17b3644cf4ce5b",
          "linkedWithoutMetadata": "4b08c56cc9cca764b84e668fddf4cf0c89805975aa72aeaabf17b3644cf4ce5b"
        },
        "inherit": [
          "FantomAuction",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "setNowOverride(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuctionMock",
              "label": "nowOverride",
              "type": "t_uint256",
              "src": "contracts\\mock\\FantomAuctionMock.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts\\mock\\MockERC20.sol:7",
        "version": {
          "withMetadata": "8c362bddfb6a2b9e4f122df8cefefc53ff51d8be2d9ab2b0359ea50009c846db",
          "withoutMetadata": "8c362bddfb6a2b9e4f122df8cefefc53ff51d8be2d9ab2b0359ea50009c846db",
          "linkedWithoutMetadata": "8c362bddfb6a2b9e4f122df8cefefc53ff51d8be2d9ab2b0359ea50009c846db"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts\\mock\\MockERC20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:340",
        "version": {
          "withMetadata": "cc84e324946f1bc14fd16db7dc7862d97e1d55742d41b60b49f0fb2df0407889",
          "withoutMetadata": "cc84e324946f1bc14fd16db7dc7862d97e1d55742d41b60b49f0fb2df0407889",
          "linkedWithoutMetadata": "cc84e324946f1bc14fd16db7dc7862d97e1d55742d41b60b49f0fb2df0407889"
        },
        "inherit": [
          "UpgradeabilityProxy",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AdminUpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:350"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:428"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:46",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:264",
        "version": {
          "withMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298",
          "withoutMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298",
          "linkedWithoutMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298"
        },
        "inherit": [
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:273"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:277"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyAdmin": {
        "src": "contracts\\proxy\\ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "88b413bea706521fb86a7f6e901c6436e59849f7072000ac925b72225a9d4d20",
          "withoutMetadata": "88b413bea706521fb86a7f6e901c6436e59849f7072000ac925b72225a9d4d20",
          "linkedWithoutMetadata": "88b413bea706521fb86a7f6e901c6436e59849f7072000ac925b72225a9d4d20"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\math\\SafeMath.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165",
            "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC165",
              "label": "_supportedInterfaces",
              "type": "t_mapping(t_bytes4,t_bool)",
              "src": "@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "contracts\\library\\IERC165.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155": {
        "src": "@openzeppelin\\contracts\\token\\ERC1155\\IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "allowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\SafeERC20.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:21",
        "version": {
          "withMetadata": "ec590816ed5c25a1835c7c8e917fe81a8ed80bf74067decaaff8e1893d572804",
          "withoutMetadata": "ec590816ed5c25a1835c7c8e917fe81a8ed80bf74067decaaff8e1893d572804",
          "linkedWithoutMetadata": "ec590816ed5c25a1835c7c8e917fe81a8ed80bf74067decaaff8e1893d572804"
        },
        "inherit": [
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address",
          "EnumerableSet",
          "EnumerableMap",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "baseURI()",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:93"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_holderTokens",
              "type": "t_mapping(t_address,t_struct(UintSet)4679_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenOwners",
              "type": "t_struct(UintToAddressMap)4056_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:42"
            },
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:45"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:48"
            },
            {
              "contract": "ERC721",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:51"
            },
            {
              "contract": "ERC721",
              "label": "_baseURI",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(UintSet)4679_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UintSet)4679_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4293_storage"
                }
              ]
            },
            "t_struct(Set)4293_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(UintToAddressMap)4056_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)3738_storage"
                }
              ]
            },
            "t_struct(Map)3738_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)3730_storage)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_struct(MapEntry)3730_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]"
            },
            "t_struct(MapEntry)3730_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Enumerable.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:118",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableMap": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableMap.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\EnumerableSet.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:8",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomAddressRegistry": {
        "src": "contracts\\FantomAddressRegistry.sol:8",
        "version": {
          "withMetadata": "01210ef5a113adaade232d13a6ed6aa0103f2b25eafeceefe296975e29df66cb",
          "withoutMetadata": "01210ef5a113adaade232d13a6ed6aa0103f2b25eafeceefe296975e29df66cb",
          "linkedWithoutMetadata": "01210ef5a113adaade232d13a6ed6aa0103f2b25eafeceefe296975e29df66cb"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "updateArtion(address)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateNFTFactory(address)",
          "updateNFTFactoryPrivate(address)",
          "updateArtFactory(address)",
          "updateArtFactoryPrivate(address)",
          "updateTokenRegistry(address)",
          "updatePriceFeed(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAddressRegistry",
              "label": "artion",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:12"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:15"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:18"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:21"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "factory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:24"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:27"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "artFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:30"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateArtFactory",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:33"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "tokenRegistry",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:36"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "priceFeed",
              "type": "t_address",
              "src": "contracts\\FantomAddressRegistry.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactory": {
        "src": "contracts\\FantomArtFactory.sol:8",
        "version": {
          "withMetadata": "9df27e05e44575e70daa8898410ab03720347f72f29e1ec84ce8d2fdf14b534f",
          "withoutMetadata": "9df27e05e44575e70daa8898410ab03720347f72f29e1ec84ce8d2fdf14b534f",
          "linkedWithoutMetadata": "9df27e05e44575e70daa8898410ab03720347f72f29e1ec84ce8d2fdf14b534f"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactory",
            "src": "contracts\\FantomArtFactory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactory.sol:14"
            },
            {
              "contract": "FantomArtFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactory.sol:17"
            },
            {
              "contract": "FantomArtFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactory.sol:20"
            },
            {
              "contract": "FantomArtFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactory.sol:23"
            },
            {
              "contract": "FantomArtFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtFactory.sol:26"
            },
            {
              "contract": "FantomArtFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomArtFactory.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactoryPrivate": {
        "src": "contracts\\FantomArtFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "298a11e97a6c209f78207f6e6f2bbb1472158735ca002b411e4061af0a58c75a",
          "withoutMetadata": "298a11e97a6c209f78207f6e6f2bbb1472158735ca002b411e4061af0a58c75a",
          "linkedWithoutMetadata": "298a11e97a6c209f78207f6e6f2bbb1472158735ca002b411e4061af0a58c75a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactoryPrivate",
            "src": "contracts\\FantomArtFactoryPrivate.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomArtFactoryPrivate.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradable": {
        "src": "contracts\\FantomArtTradable.sol:22",
        "version": {
          "withMetadata": "073fe51513c158c095357630028d8a0956ecb69b5d37aef8e14b7ebd12b802cd",
          "withoutMetadata": "073fe51513c158c095357630028d8a0956ecb69b5d37aef8e14b7ebd12b802cd",
          "linkedWithoutMetadata": "073fe51513c158c095357630028d8a0956ecb69b5d37aef8e14b7ebd12b802cd"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradable",
            "src": "contracts\\FantomArtTradable.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts\\FantomArtTradable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradable",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradable.sol:28"
            },
            {
              "contract": "FantomArtTradable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts\\FantomArtTradable.sol:31"
            },
            {
              "contract": "FantomArtTradable",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtTradable.sol:33"
            },
            {
              "contract": "FantomArtTradable",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\FantomArtTradable.sol:34"
            },
            {
              "contract": "FantomArtTradable",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradable.sol:37"
            },
            {
              "contract": "FantomArtTradable",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradable.sol:39"
            },
            {
              "contract": "FantomArtTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradable.sol:41"
            },
            {
              "contract": "FantomArtTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtTradable.sol:43"
            },
            {
              "contract": "FantomArtTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradable.sol:45"
            },
            {
              "contract": "FantomArtTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradable.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "OwnableDelegateProxy": {
        "src": "contracts\\FantomArtTradablePrivate.sol:10",
        "version": {
          "withMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "withoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "linkedWithoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyRegistry": {
        "src": "contracts\\FantomArtTradablePrivate.sol:12",
        "version": {
          "withMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9",
          "withoutMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9",
          "linkedWithoutMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ProxyRegistry",
              "label": "proxies",
              "type": "t_mapping(t_address,t_contract(OwnableDelegateProxy)5923)",
              "src": "contracts\\FantomArtTradablePrivate.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_contract(OwnableDelegateProxy)5923)": {
              "label": "mapping(address => contract OwnableDelegateProxy)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(OwnableDelegateProxy)5923": {
              "label": "contract OwnableDelegateProxy"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradablePrivate": {
        "src": "contracts\\FantomArtTradablePrivate.sol:22",
        "version": {
          "withMetadata": "73c5ea2128ac23354b4437cd46710a957269f6a5e10d6f2eb8955d0f7811fd0b",
          "withoutMetadata": "73c5ea2128ac23354b4437cd46710a957269f6a5e10d6f2eb8955d0f7811fd0b",
          "linkedWithoutMetadata": "73c5ea2128ac23354b4437cd46710a957269f6a5e10d6f2eb8955d0f7811fd0b"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradablePrivate",
            "src": "contracts\\FantomArtTradablePrivate.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts\\FantomArtTradablePrivate.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradablePrivate.sol:28"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts\\FantomArtTradablePrivate.sol:31"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtTradablePrivate.sol:33"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\FantomArtTradablePrivate.sol:34"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradablePrivate.sol:37"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\FantomArtTradablePrivate.sol:39"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtTradablePrivate.sol:41"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtTradablePrivate.sol:43"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradablePrivate.sol:45"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomArtTradablePrivate.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Artion": {
        "src": "contracts\\FantomArtion.sol:9",
        "version": {
          "withMetadata": "add88fc63648eaac7c0296a3fa6d50c99000555ee0cf9ccca22f16032ebb051a",
          "withoutMetadata": "add88fc63648eaac7c0296a3fa6d50c99000555ee0cf9ccca22f16032ebb051a",
          "linkedWithoutMetadata": "add88fc63648eaac7c0296a3fa6d50c99000555ee0cf9ccca22f16032ebb051a"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable,uint256)",
          "mint(address,string)",
          "burn(uint256)",
          "exists(uint256)",
          "isApproved(uint256,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Artion",
            "src": "contracts\\FantomArtion.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Artion",
              "label": "tokenIdPointer",
              "type": "t_uint256",
              "src": "contracts\\FantomArtion.sol:26"
            },
            {
              "contract": "Artion",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\FantomArtion.sol:29"
            },
            {
              "contract": "Artion",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomArtion.sol:32"
            },
            {
              "contract": "Artion",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomArtion.sol:35"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuction": {
        "src": "contracts\\FantomAuction.sol:55",
        "version": {
          "withMetadata": "b1d7876a39f761c828455415df736e7122eef51d924f4378a713036d42a59212",
          "withoutMetadata": "b1d7876a39f761c828455415df736e7122eef51d924f4378a713036d42a59212",
          "linkedWithoutMetadata": "b1d7876a39f761c828455415df736e7122eef51d924f4378a713036d42a59212"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable)",
          "createAuction(address,uint256,address,uint256,uint256,bool,uint256)",
          "placeBid(address,uint256)",
          "placeBid(address,uint256,uint256)",
          "withdrawBid(address,uint256)",
          "resultAuction(address,uint256)",
          "cancelAuction(address,uint256)",
          "toggleIsPaused()",
          "updateMinBidIncrement(uint256)",
          "updateBidWithdrawalLockTime(uint256)",
          "updateAuctionReservePrice(address,uint256,uint256)",
          "updateAuctionStartTime(address,uint256,uint256)",
          "updateAuctionEndTime(address,uint256,uint256)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "getAuction(address,uint256)",
          "getHighestBidder(address,uint256)",
          "reclaimERC20(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "minBidIncrement",
            "src": "contracts\\FantomAuction.sol:156"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bidWithdrawalLockTime",
            "src": "contracts\\FantomAuction.sol:159"
          },
          {
            "kind": "state-variable-assignment",
            "name": "platformFee",
            "src": "contracts\\FantomAuction.sol:162"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuction",
              "label": "auctions",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6732_storage))",
              "src": "contracts\\FantomAuction.sol:150"
            },
            {
              "contract": "FantomAuction",
              "label": "highestBids",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6739_storage))",
              "src": "contracts\\FantomAuction.sol:153"
            },
            {
              "contract": "FantomAuction",
              "label": "minBidIncrement",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:156"
            },
            {
              "contract": "FantomAuction",
              "label": "bidWithdrawalLockTime",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:159"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomAuction.sol:162"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFeeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomAuction.sol:165"
            },
            {
              "contract": "FantomAuction",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)6539",
              "src": "contracts\\FantomAuction.sol:168"
            },
            {
              "contract": "FantomAuction",
              "label": "isPaused",
              "type": "t_bool",
              "src": "contracts\\FantomAuction.sol:171"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6732_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.Auction))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(Auction)6732_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.Auction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Auction)6732_storage": {
              "label": "struct FantomAuction.Auction",
              "members": [
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "minBid",
                  "type": "t_uint256"
                },
                {
                  "label": "reservePrice",
                  "type": "t_uint256"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256"
                },
                {
                  "label": "resulted",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6739_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.HighestBid))"
            },
            "t_mapping(t_uint256,t_struct(HighestBid)6739_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.HighestBid)"
            },
            "t_struct(HighestBid)6739_storage": {
              "label": "struct FantomAuction.HighestBid",
              "members": [
                {
                  "label": "bidder",
                  "type": "t_address_payable"
                },
                {
                  "label": "bid",
                  "type": "t_uint256"
                },
                {
                  "label": "lastBidTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)6539": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAddressRegistry": {
        "src": "contracts\\FantomPriceFeed.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenRegistry()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomBundleMarketplace": {
        "src": "contracts\\FantomMarketplace.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,address,address)",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomTokenRegistry": {
        "src": "contracts\\FantomPriceFeed.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enabled(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomBundleMarketplace": {
        "src": "contracts\\FantomBundleMarketplace.sol:39",
        "version": {
          "withMetadata": "58452c833a3e6bf49312ba56d4f24483ac163a2bf9e85105613b3491001ebe38",
          "withoutMetadata": "58452c833a3e6bf49312ba56d4f24483ac163a2bf9e85105613b3491001ebe38",
          "linkedWithoutMetadata": "58452c833a3e6bf49312ba56d4f24483ac163a2bf9e85105613b3491001ebe38"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20",
          "EnumerableSet"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "getListing(address,string)",
          "listItem(string,address[],uint256[],uint256[],address,uint256,uint256)",
          "cancelListing(string)",
          "updateListing(string,address,uint256)",
          "buyItem(string)",
          "buyItem(string,address)",
          "createOffer(string,address,uint256,uint256)",
          "cancelOffer(string)",
          "acceptOffer(string,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomBundleMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8636_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:106"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "owners",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts\\FantomBundleMarketplace.sol:109"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIdsPerItem",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4473_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:111"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "nftIndexes",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))",
              "src": "contracts\\FantomBundleMarketplace.sol:113"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIds",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "src": "contracts\\FantomBundleMarketplace.sol:115"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "offers",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8643_storage))",
              "src": "contracts\\FantomBundleMarketplace.sol:118"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomBundleMarketplace.sol:121"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomBundleMarketplace.sol:124"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)8499",
              "src": "contracts\\FantomBundleMarketplace.sol:127"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8636_storage))": {
              "label": "mapping(address => mapping(bytes32 => struct FantomBundleMarketplace.Listing))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_struct(Listing)8636_storage)": {
              "label": "mapping(bytes32 => struct FantomBundleMarketplace.Listing)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Listing)8636_storage": {
              "label": "struct FantomBundleMarketplace.Listing",
              "members": [
                {
                  "label": "nfts",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "tokenIds",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "quantities",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4473_storage))": {
              "label": "mapping(address => mapping(uint256 => struct EnumerableSet.Bytes32Set))"
            },
            "t_mapping(t_uint256,t_struct(Bytes32Set)4473_storage)": {
              "label": "mapping(uint256 => struct EnumerableSet.Bytes32Set)"
            },
            "t_struct(Bytes32Set)4473_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4293_storage"
                }
              ]
            },
            "t_struct(Set)4293_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
              "label": "mapping(bytes32 => mapping(address => mapping(uint256 => uint256)))"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8643_storage))": {
              "label": "mapping(bytes32 => mapping(address => struct FantomBundleMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)8643_storage)": {
              "label": "mapping(address => struct FantomBundleMarketplace.Offer)"
            },
            "t_struct(Offer)8643_storage": {
              "label": "struct FantomBundleMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)8499": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomMarketplace": {
        "src": "contracts\\FantomMarketplace.sol:71",
        "version": {
          "withMetadata": "aac16dd29bd0f5a23ab23dc808b9527af84cbef6c8f705a7b396a75bc5c565f9",
          "withoutMetadata": "aac16dd29bd0f5a23ab23dc808b9527af84cbef6c8f705a7b396a75bc5c565f9",
          "linkedWithoutMetadata": "aac16dd29bd0f5a23ab23dc808b9527af84cbef6c8f705a7b396a75bc5c565f9"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable,uint16)",
          "listItem(address,uint256,uint256,address,uint256,uint256)",
          "cancelListing(address,uint256)",
          "updateListing(address,uint256,address,uint256)",
          "buyItem(address,uint256,address,address)",
          "createOffer(address,uint256,address,uint256,uint256,uint256)",
          "cancelOffer(address,uint256)",
          "acceptOffer(address,uint256,address)",
          "registerRoyalty(address,uint256,uint16)",
          "registerCollectionRoyalty(address,address,uint16,address)",
          "getPrice(address)",
          "updatePlatformFee(uint16)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomMarketplace",
              "label": "minters",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
              "src": "contracts\\FantomMarketplace.sol:151"
            },
            {
              "contract": "FantomMarketplace",
              "label": "royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint16))",
              "src": "contracts\\FantomMarketplace.sol:154"
            },
            {
              "contract": "FantomMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10840_storage)))",
              "src": "contracts\\FantomMarketplace.sol:157"
            },
            {
              "contract": "FantomMarketplace",
              "label": "offers",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10849_storage)))",
              "src": "contracts\\FantomMarketplace.sol:161"
            },
            {
              "contract": "FantomMarketplace",
              "label": "platformFee",
              "type": "t_uint16",
              "src": "contracts\\FantomMarketplace.sol:165"
            },
            {
              "contract": "FantomMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomMarketplace.sol:168"
            },
            {
              "contract": "FantomMarketplace",
              "label": "collectionRoyalties",
              "type": "t_mapping(t_address,t_struct(CollectionRoyalty)10856_storage)",
              "src": "contracts\\FantomMarketplace.sol:171"
            },
            {
              "contract": "FantomMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)10670",
              "src": "contracts\\FantomMarketplace.sol:174"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
              "label": "mapping(address => mapping(uint256 => address))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint16))": {
              "label": "mapping(address => mapping(uint256 => uint16))"
            },
            "t_mapping(t_uint256,t_uint16)": {
              "label": "mapping(uint256 => uint16)"
            },
            "t_uint16": {
              "label": "uint16"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10840_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Listing)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10840_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Listing))"
            },
            "t_mapping(t_address,t_struct(Listing)10840_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Listing)"
            },
            "t_struct(Listing)10840_storage": {
              "label": "struct FantomMarketplace.Listing",
              "members": [
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10849_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Offer)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10849_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)10849_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Offer)"
            },
            "t_struct(Offer)10849_storage": {
              "label": "struct FantomMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_struct(CollectionRoyalty)10856_storage)": {
              "label": "mapping(address => struct FantomMarketplace.CollectionRoyalty)"
            },
            "t_struct(CollectionRoyalty)10856_storage": {
              "label": "struct FantomMarketplace.CollectionRoyalty",
              "members": [
                {
                  "label": "royalty",
                  "type": "t_uint16"
                },
                {
                  "label": "creator",
                  "type": "t_address"
                },
                {
                  "label": "feeRecipient",
                  "type": "t_address"
                }
              ]
            },
            "t_contract(IFantomAddressRegistry)10670": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAuction": {
        "src": "contracts\\FantomMarketplace.sol:35",
        "inherit": [],
        "libraries": [],
        "methods": [
          "auctions(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomNFTFactory": {
        "src": "contracts\\FantomMarketplace.sol:57",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exists(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomPriceFeed": {
        "src": "contracts\\FantomMarketplace.sol:65",
        "inherit": [],
        "libraries": [],
        "methods": [
          "wFTM()",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactory": {
        "src": "contracts\\FantomNFTFactory.sol:8",
        "version": {
          "withMetadata": "914fd99126bf5141b41a4874daabbef72d4fc1ea2b081fb9e57fc6e628b82e75",
          "withoutMetadata": "914fd99126bf5141b41a4874daabbef72d4fc1ea2b081fb9e57fc6e628b82e75",
          "linkedWithoutMetadata": "914fd99126bf5141b41a4874daabbef72d4fc1ea2b081fb9e57fc6e628b82e75"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactory",
            "src": "contracts\\FantomNFTFactory.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactory",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:14"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:17"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactory.sol:20"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactory.sol:23"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactory.sol:26"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTFactory.sol:29"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomNFTFactory.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactoryPrivate": {
        "src": "contracts\\FantomNFTFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "9aaefeb44120a7c5f3eb39fa4f86f2b7b33cb56d60959f33a42ffe1ed2ad1b43",
          "withoutMetadata": "9aaefeb44120a7c5f3eb39fa4f86f2b7b33cb56d60959f33a42ffe1ed2ad1b43",
          "linkedWithoutMetadata": "9aaefeb44120a7c5f3eb39fa4f86f2b7b33cb56d60959f33a42ffe1ed2ad1b43"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactoryPrivate",
            "src": "contracts\\FantomNFTFactoryPrivate.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:29"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomNFTFactoryPrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradable": {
        "src": "contracts\\FantomNFTTradable.sol:12",
        "version": {
          "withMetadata": "e4531be1f170df8480065b3b9fc86616d512addea17d4e897e15d403e626c887",
          "withoutMetadata": "e4531be1f170df8480065b3b9fc86616d512addea17d4e897e15d403e626c887",
          "linkedWithoutMetadata": "e4531be1f170df8480065b3b9fc86616d512addea17d4e897e15d403e626c887"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradable",
            "src": "contracts\\FantomNFTTradable.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts\\FantomNFTTradable.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradable",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:27"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:28"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradable.sol:29"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradable.sol:30"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradable.sol:33"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTTradable.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradablePrivate": {
        "src": "contracts\\FantomNFTTradablePrivate.sol:12",
        "version": {
          "withMetadata": "e61bb5b78db344eeab50005060c51f74a351bf9bd4d0389705178c2efc6f461e",
          "withoutMetadata": "e61bb5b78db344eeab50005060c51f74a351bf9bd4d0389705178c2efc6f461e",
          "linkedWithoutMetadata": "e61bb5b78db344eeab50005060c51f74a351bf9bd4d0389705178c2efc6f461e"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradablePrivate",
            "src": "contracts\\FantomNFTTradablePrivate.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts\\FantomNFTTradablePrivate.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:27"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:28"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts\\FantomNFTTradablePrivate.sol:29"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradablePrivate.sol:30"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts\\FantomNFTTradablePrivate.sol:33"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts\\FantomNFTTradablePrivate.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomPriceFeed": {
        "src": "contracts\\FantomPriceFeed.sol:21",
        "version": {
          "withMetadata": "c3486acea602badcee713e0d4a167bc6e4167f4ebe58ea0974294fe748fcd396",
          "withoutMetadata": "c3486acea602badcee713e0d4a167bc6e4167f4ebe58ea0974294fe748fcd396",
          "linkedWithoutMetadata": "c3486acea602badcee713e0d4a167bc6e4167f4ebe58ea0974294fe748fcd396"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerOracle(address,address)",
          "updateOracle(address,address)",
          "getPrice(address)",
          "updateAddressRegistry(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomPriceFeed",
            "src": "contracts\\FantomPriceFeed.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomPriceFeed",
              "label": "oracles",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts\\FantomPriceFeed.sol:23"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "addressRegistry",
              "type": "t_address",
              "src": "contracts\\FantomPriceFeed.sol:26"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "wFTM",
              "type": "t_address",
              "src": "contracts\\FantomPriceFeed.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IOracle": {
        "src": "contracts\\FantomPriceFeed.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestAnswer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomTokenRegistry": {
        "src": "contracts\\FantomTokenRegistry.sol:7",
        "version": {
          "withMetadata": "15e092d3ba18f8b0b09cf3a08319d468dc9c698c094acc12a625b236ffdfe0d2",
          "withoutMetadata": "15e092d3ba18f8b0b09cf3a08319d468dc9c698c094acc12a625b236ffdfe0d2",
          "linkedWithoutMetadata": "15e092d3ba18f8b0b09cf3a08319d468dc9c698c094acc12a625b236ffdfe0d2"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "add(address)",
          "remove(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomTokenRegistry",
              "label": "enabled",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\FantomTokenRegistry.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155": {
        "src": "contracts\\library\\ERC1155.sol:11",
        "version": {
          "withMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71",
          "withoutMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71",
          "linkedWithoutMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71"
        },
        "inherit": [
          "IERC165"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155",
              "label": "balances",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts\\library\\ERC1155.sol:25"
            },
            {
              "contract": "ERC1155",
              "label": "operators",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts\\library\\ERC1155.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155Metadata": {
        "src": "contracts\\library\\ERC1155Metadata.sol:9",
        "version": {
          "withMetadata": "9f4ac3045c6d47f7902357b737f9b36eb6d74a6144b8f5ff47ba6041be851533",
          "withoutMetadata": "9f4ac3045c6d47f7902357b737f9b36eb6d74a6144b8f5ff47ba6041be851533",
          "linkedWithoutMetadata": "9f4ac3045c6d47f7902357b737f9b36eb6d74a6144b8f5ff47ba6041be851533"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155Metadata",
              "label": "baseMetadataURI",
              "type": "t_string_storage",
              "src": "contracts\\library\\ERC1155Metadata.sol:12"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155MintBurn": {
        "src": "contracts\\library\\ERC1155MintBurn.sol:9",
        "version": {
          "withMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71",
          "withoutMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71",
          "linkedWithoutMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71"
        },
        "inherit": [
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155TokenReceiver": {
        "src": "contracts\\library\\IERC1155TokenReceiver.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BiddingContractMock": {
        "src": "contracts\\mock\\BiddingContractMock.sol:7",
        "version": {
          "withMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a",
          "withoutMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a",
          "linkedWithoutMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "bid(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BiddingContractMock",
            "src": "contracts\\mock\\BiddingContractMock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BiddingContractMock",
              "label": "auctionContract",
              "type": "t_contract(FantomAuction)8471",
              "src": "contracts\\mock\\BiddingContractMock.sol:8"
            }
          ],
          "types": {
            "t_contract(FantomAuction)8471": {
              "label": "contract FantomAuction"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuctionMock": {
        "src": "contracts\\mock\\FantomAuctionMock.sol:7",
        "version": {
          "withMetadata": "7d55c898852b8b1e86d032cef7abd574ffe789a496166c8870c9ef7b97c292ea",
          "withoutMetadata": "7d55c898852b8b1e86d032cef7abd574ffe789a496166c8870c9ef7b97c292ea",
          "linkedWithoutMetadata": "7d55c898852b8b1e86d032cef7abd574ffe789a496166c8870c9ef7b97c292ea"
        },
        "inherit": [
          "FantomAuction",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "setNowOverride(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuctionMock",
              "label": "nowOverride",
              "type": "t_uint256",
              "src": "contracts\\mock\\FantomAuctionMock.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts\\mock\\MockERC20.sol:7",
        "version": {
          "withMetadata": "b73d87e4c8cacbaaea189aec044e8ddaf418db412bc65c27d4f610aa1ed782c7",
          "withoutMetadata": "b73d87e4c8cacbaaea189aec044e8ddaf418db412bc65c27d4f610aa1ed782c7",
          "linkedWithoutMetadata": "b73d87e4c8cacbaaea189aec044e8ddaf418db412bc65c27d4f610aa1ed782c7"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts\\mock\\MockERC20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:340",
        "version": {
          "withMetadata": "75ce8f9e6c8139b9214082e60df86ee29b7d565d21778a045d6e314517331159",
          "withoutMetadata": "75ce8f9e6c8139b9214082e60df86ee29b7d565d21778a045d6e314517331159",
          "linkedWithoutMetadata": "75ce8f9e6c8139b9214082e60df86ee29b7d565d21778a045d6e314517331159"
        },
        "inherit": [
          "UpgradeabilityProxy",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AdminUpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:350"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:428"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:46",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UpgradeabilityProxy": {
        "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:264",
        "version": {
          "withMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298",
          "withoutMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298",
          "linkedWithoutMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298"
        },
        "inherit": [
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeabilityProxy",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:273"
          },
          {
            "kind": "delegatecall",
            "src": "contracts\\proxy\\AdminUpgradeabilityProxy.sol:277"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyAdmin": {
        "src": "contracts\\proxy\\ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "3305751fab7d99ff0661e547aca203a151c84f44f5d8c4da9e0b927b0467e8d6",
          "withoutMetadata": "3305751fab7d99ff0661e547aca203a151c84f44f5d8c4da9e0b927b0467e8d6",
          "linkedWithoutMetadata": "3305751fab7d99ff0661e547aca203a151c84f44f5d8c4da9e0b927b0467e8d6"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "@openzeppelin/contracts/math/SafeMath.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/introspection/ERC165.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165",
            "src": "@openzeppelin/contracts/introspection/ERC165.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC165",
              "label": "_supportedInterfaces",
              "type": "t_mapping(t_bytes4,t_bool)",
              "src": "@openzeppelin/contracts/introspection/ERC165.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "contracts/library/IERC165.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155": {
        "src": "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "allowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:21",
        "version": {
          "withMetadata": "c619b06be359c76da907e91cb7d261294d4e83a005a7c2395a5ca5913295475d",
          "withoutMetadata": "c619b06be359c76da907e91cb7d261294d4e83a005a7c2395a5ca5913295475d",
          "linkedWithoutMetadata": "c619b06be359c76da907e91cb7d261294d4e83a005a7c2395a5ca5913295475d"
        },
        "inherit": [
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address",
          "EnumerableSet",
          "EnumerableMap",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "baseURI()",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:93"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_holderTokens",
              "type": "t_mapping(t_address,t_struct(UintSet)4582_storage)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenOwners",
              "type": "t_struct(UintToAddressMap)3959_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:42"
            },
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:45"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:48"
            },
            {
              "contract": "ERC721",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:51"
            },
            {
              "contract": "ERC721",
              "label": "_baseURI",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(UintSet)4582_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UintSet)4582_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4196_storage"
                }
              ]
            },
            "t_struct(Set)4196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(UintToAddressMap)3959_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)3641_storage"
                }
              ]
            },
            "t_struct(Map)3641_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)3633_storage)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_struct(MapEntry)3633_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]"
            },
            "t_struct(MapEntry)3633_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:118",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableMap": {
        "src": "@openzeppelin/contracts/utils/EnumerableMap.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomAddressRegistry": {
        "src": "contracts/FantomAddressRegistry.sol:8",
        "version": {
          "withMetadata": "01210ef5a113adaade232d13a6ed6aa0103f2b25eafeceefe296975e29df66cb",
          "withoutMetadata": "01210ef5a113adaade232d13a6ed6aa0103f2b25eafeceefe296975e29df66cb",
          "linkedWithoutMetadata": "01210ef5a113adaade232d13a6ed6aa0103f2b25eafeceefe296975e29df66cb"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "updateArtion(address)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateNFTFactory(address)",
          "updateNFTFactoryPrivate(address)",
          "updateArtFactory(address)",
          "updateArtFactoryPrivate(address)",
          "updateTokenRegistry(address)",
          "updatePriceFeed(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAddressRegistry",
              "label": "artion",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:12"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:15"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:18"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:21"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:24"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateFactory",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:27"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "artFactory",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:30"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateArtFactory",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:33"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "tokenRegistry",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:36"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "priceFeed",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactory": {
        "src": "contracts/FantomArtFactory.sol:8",
        "version": {
          "withMetadata": "9df27e05e44575e70daa8898410ab03720347f72f29e1ec84ce8d2fdf14b534f",
          "withoutMetadata": "9df27e05e44575e70daa8898410ab03720347f72f29e1ec84ce8d2fdf14b534f",
          "linkedWithoutMetadata": "9df27e05e44575e70daa8898410ab03720347f72f29e1ec84ce8d2fdf14b534f"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactory",
            "src": "contracts/FantomArtFactory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomArtFactory.sol:14"
            },
            {
              "contract": "FantomArtFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomArtFactory.sol:17"
            },
            {
              "contract": "FantomArtFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtFactory.sol:20"
            },
            {
              "contract": "FantomArtFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtFactory.sol:23"
            },
            {
              "contract": "FantomArtFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtFactory.sol:26"
            },
            {
              "contract": "FantomArtFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomArtFactory.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactoryPrivate": {
        "src": "contracts/FantomArtFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "298a11e97a6c209f78207f6e6f2bbb1472158735ca002b411e4061af0a58c75a",
          "withoutMetadata": "298a11e97a6c209f78207f6e6f2bbb1472158735ca002b411e4061af0a58c75a",
          "linkedWithoutMetadata": "298a11e97a6c209f78207f6e6f2bbb1472158735ca002b411e4061af0a58c75a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactoryPrivate",
            "src": "contracts/FantomArtFactoryPrivate.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomArtFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomArtFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomArtFactoryPrivate.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradable": {
        "src": "contracts/FantomArtTradable.sol:22",
        "version": {
          "withMetadata": "073fe51513c158c095357630028d8a0956ecb69b5d37aef8e14b7ebd12b802cd",
          "withoutMetadata": "073fe51513c158c095357630028d8a0956ecb69b5d37aef8e14b7ebd12b802cd",
          "linkedWithoutMetadata": "073fe51513c158c095357630028d8a0956ecb69b5d37aef8e14b7ebd12b802cd"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradable",
            "src": "contracts/FantomArtTradable.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts/FantomArtTradable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradable",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts/FantomArtTradable.sol:28"
            },
            {
              "contract": "FantomArtTradable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts/FantomArtTradable.sol:31"
            },
            {
              "contract": "FantomArtTradable",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/FantomArtTradable.sol:33"
            },
            {
              "contract": "FantomArtTradable",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/FantomArtTradable.sol:34"
            },
            {
              "contract": "FantomArtTradable",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/FantomArtTradable.sol:37"
            },
            {
              "contract": "FantomArtTradable",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/FantomArtTradable.sol:39"
            },
            {
              "contract": "FantomArtTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtTradable.sol:41"
            },
            {
              "contract": "FantomArtTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtTradable.sol:43"
            },
            {
              "contract": "FantomArtTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomArtTradable.sol:45"
            },
            {
              "contract": "FantomArtTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomArtTradable.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "OwnableDelegateProxy": {
        "src": "contracts/FantomArtTradablePrivate.sol:10",
        "version": {
          "withMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "withoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "linkedWithoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyRegistry": {
        "src": "contracts/FantomArtTradablePrivate.sol:12",
        "version": {
          "withMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9",
          "withoutMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9",
          "linkedWithoutMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ProxyRegistry",
              "label": "proxies",
              "type": "t_mapping(t_address,t_contract(OwnableDelegateProxy)5826)",
              "src": "contracts/FantomArtTradablePrivate.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_contract(OwnableDelegateProxy)5826)": {
              "label": "mapping(address => contract OwnableDelegateProxy)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(OwnableDelegateProxy)5826": {
              "label": "contract OwnableDelegateProxy"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradablePrivate": {
        "src": "contracts/FantomArtTradablePrivate.sol:22",
        "version": {
          "withMetadata": "73c5ea2128ac23354b4437cd46710a957269f6a5e10d6f2eb8955d0f7811fd0b",
          "withoutMetadata": "73c5ea2128ac23354b4437cd46710a957269f6a5e10d6f2eb8955d0f7811fd0b",
          "linkedWithoutMetadata": "73c5ea2128ac23354b4437cd46710a957269f6a5e10d6f2eb8955d0f7811fd0b"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradablePrivate",
            "src": "contracts/FantomArtTradablePrivate.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts/FantomArtTradablePrivate.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts/FantomArtTradablePrivate.sol:28"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts/FantomArtTradablePrivate.sol:31"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/FantomArtTradablePrivate.sol:33"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/FantomArtTradablePrivate.sol:34"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/FantomArtTradablePrivate.sol:37"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/FantomArtTradablePrivate.sol:39"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtTradablePrivate.sol:41"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtTradablePrivate.sol:43"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomArtTradablePrivate.sol:45"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomArtTradablePrivate.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Artion": {
        "src": "contracts/FantomArtion.sol:9",
        "version": {
          "withMetadata": "0906a2a64eab674cc5697e3478fbc1983e5279f62af94e495fcfd58500fb6a8f",
          "withoutMetadata": "0906a2a64eab674cc5697e3478fbc1983e5279f62af94e495fcfd58500fb6a8f",
          "linkedWithoutMetadata": "0906a2a64eab674cc5697e3478fbc1983e5279f62af94e495fcfd58500fb6a8f"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable,uint256)",
          "mint(address,string)",
          "burn(uint256)",
          "exists(uint256)",
          "isApproved(uint256,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Artion",
            "src": "contracts/FantomArtion.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Artion",
              "label": "tokenIdPointer",
              "type": "t_uint256",
              "src": "contracts/FantomArtion.sol:26"
            },
            {
              "contract": "Artion",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/FantomArtion.sol:29"
            },
            {
              "contract": "Artion",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtion.sol:32"
            },
            {
              "contract": "Artion",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtion.sol:35"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuction": {
        "src": "contracts/FantomAuction.sol:55",
        "version": {
          "withMetadata": "b1d7876a39f761c828455415df736e7122eef51d924f4378a713036d42a59212",
          "withoutMetadata": "b1d7876a39f761c828455415df736e7122eef51d924f4378a713036d42a59212",
          "linkedWithoutMetadata": "b1d7876a39f761c828455415df736e7122eef51d924f4378a713036d42a59212"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable)",
          "createAuction(address,uint256,address,uint256,uint256,bool,uint256)",
          "placeBid(address,uint256)",
          "placeBid(address,uint256,uint256)",
          "withdrawBid(address,uint256)",
          "resultAuction(address,uint256)",
          "cancelAuction(address,uint256)",
          "toggleIsPaused()",
          "updateMinBidIncrement(uint256)",
          "updateBidWithdrawalLockTime(uint256)",
          "updateAuctionReservePrice(address,uint256,uint256)",
          "updateAuctionStartTime(address,uint256,uint256)",
          "updateAuctionEndTime(address,uint256,uint256)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "getAuction(address,uint256)",
          "getHighestBidder(address,uint256)",
          "reclaimERC20(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "minBidIncrement",
            "src": "contracts/FantomAuction.sol:156"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bidWithdrawalLockTime",
            "src": "contracts/FantomAuction.sol:159"
          },
          {
            "kind": "state-variable-assignment",
            "name": "platformFee",
            "src": "contracts/FantomAuction.sol:162"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuction",
              "label": "auctions",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6635_storage))",
              "src": "contracts/FantomAuction.sol:150"
            },
            {
              "contract": "FantomAuction",
              "label": "highestBids",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6642_storage))",
              "src": "contracts/FantomAuction.sol:153"
            },
            {
              "contract": "FantomAuction",
              "label": "minBidIncrement",
              "type": "t_uint256",
              "src": "contracts/FantomAuction.sol:156"
            },
            {
              "contract": "FantomAuction",
              "label": "bidWithdrawalLockTime",
              "type": "t_uint256",
              "src": "contracts/FantomAuction.sol:159"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomAuction.sol:162"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFeeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomAuction.sol:165"
            },
            {
              "contract": "FantomAuction",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)6442",
              "src": "contracts/FantomAuction.sol:168"
            },
            {
              "contract": "FantomAuction",
              "label": "isPaused",
              "type": "t_bool",
              "src": "contracts/FantomAuction.sol:171"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6635_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.Auction))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(Auction)6635_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.Auction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Auction)6635_storage": {
              "label": "struct FantomAuction.Auction",
              "members": [
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "minBid",
                  "type": "t_uint256"
                },
                {
                  "label": "reservePrice",
                  "type": "t_uint256"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256"
                },
                {
                  "label": "resulted",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6642_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.HighestBid))"
            },
            "t_mapping(t_uint256,t_struct(HighestBid)6642_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.HighestBid)"
            },
            "t_struct(HighestBid)6642_storage": {
              "label": "struct FantomAuction.HighestBid",
              "members": [
                {
                  "label": "bidder",
                  "type": "t_address_payable"
                },
                {
                  "label": "bid",
                  "type": "t_uint256"
                },
                {
                  "label": "lastBidTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)6442": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAddressRegistry": {
        "src": "contracts/FantomPriceFeed.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenRegistry()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomBundleMarketplace": {
        "src": "contracts/FantomMarketplace.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomMarketplace": {
        "src": "contracts/FantomBundleMarketplace.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,address,address)",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomTokenRegistry": {
        "src": "contracts/FantomPriceFeed.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enabled(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomBundleMarketplace": {
        "src": "contracts/FantomBundleMarketplace.sol:39",
        "version": {
          "withMetadata": "29c855f5efc12cfad575f1a5a2d63c8a5dc755cbef6dca449c8d74b30fa68a1e",
          "withoutMetadata": "29c855f5efc12cfad575f1a5a2d63c8a5dc755cbef6dca449c8d74b30fa68a1e",
          "linkedWithoutMetadata": "29c855f5efc12cfad575f1a5a2d63c8a5dc755cbef6dca449c8d74b30fa68a1e"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20",
          "EnumerableSet"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "getListing(address,string)",
          "listItem(string,address[],uint256[],uint256[],address,uint256,uint256)",
          "cancelListing(string)",
          "updateListing(string,address,uint256)",
          "buyItem(string)",
          "buyItem(string,address)",
          "createOffer(string,address,uint256,uint256)",
          "cancelOffer(string)",
          "acceptOffer(string,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomBundleMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8539_storage))",
              "src": "contracts/FantomBundleMarketplace.sol:106"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "owners",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/FantomBundleMarketplace.sol:109"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIdsPerItem",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4376_storage))",
              "src": "contracts/FantomBundleMarketplace.sol:111"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "nftIndexes",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))",
              "src": "contracts/FantomBundleMarketplace.sol:113"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIds",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "src": "contracts/FantomBundleMarketplace.sol:115"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "offers",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8546_storage))",
              "src": "contracts/FantomBundleMarketplace.sol:118"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomBundleMarketplace.sol:121"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomBundleMarketplace.sol:124"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)8402",
              "src": "contracts/FantomBundleMarketplace.sol:127"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8539_storage))": {
              "label": "mapping(address => mapping(bytes32 => struct FantomBundleMarketplace.Listing))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_struct(Listing)8539_storage)": {
              "label": "mapping(bytes32 => struct FantomBundleMarketplace.Listing)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Listing)8539_storage": {
              "label": "struct FantomBundleMarketplace.Listing",
              "members": [
                {
                  "label": "nfts",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "tokenIds",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "quantities",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4376_storage))": {
              "label": "mapping(address => mapping(uint256 => struct EnumerableSet.Bytes32Set))"
            },
            "t_mapping(t_uint256,t_struct(Bytes32Set)4376_storage)": {
              "label": "mapping(uint256 => struct EnumerableSet.Bytes32Set)"
            },
            "t_struct(Bytes32Set)4376_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4196_storage"
                }
              ]
            },
            "t_struct(Set)4196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
              "label": "mapping(bytes32 => mapping(address => mapping(uint256 => uint256)))"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8546_storage))": {
              "label": "mapping(bytes32 => mapping(address => struct FantomBundleMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)8546_storage)": {
              "label": "mapping(address => struct FantomBundleMarketplace.Offer)"
            },
            "t_struct(Offer)8546_storage": {
              "label": "struct FantomBundleMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)8402": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomMarketplace": {
        "src": "contracts/FantomMarketplace.sol:71",
        "version": {
          "withMetadata": "ec5a89cc91784742f085e45caabc13c7327a2c9c8d2846f9077690f63e45a3a1",
          "withoutMetadata": "ec5a89cc91784742f085e45caabc13c7327a2c9c8d2846f9077690f63e45a3a1",
          "linkedWithoutMetadata": "ec5a89cc91784742f085e45caabc13c7327a2c9c8d2846f9077690f63e45a3a1"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable,uint16)",
          "listItem(address,uint256,uint256,address,uint256,uint256)",
          "cancelListing(address,uint256)",
          "updateListing(address,uint256,address,uint256)",
          "buyItem(address,uint256,address,address)",
          "createOffer(address,uint256,address,uint256,uint256,uint256)",
          "cancelOffer(address,uint256)",
          "acceptOffer(address,uint256,address)",
          "registerRoyalty(address,uint256,uint16)",
          "registerCollectionRoyalty(address,address,uint16,address)",
          "getPrice(address)",
          "updatePlatformFee(uint16)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomMarketplace",
              "label": "minters",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
              "src": "contracts/FantomMarketplace.sol:151"
            },
            {
              "contract": "FantomMarketplace",
              "label": "royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint16))",
              "src": "contracts/FantomMarketplace.sol:154"
            },
            {
              "contract": "FantomMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10743_storage)))",
              "src": "contracts/FantomMarketplace.sol:157"
            },
            {
              "contract": "FantomMarketplace",
              "label": "offers",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10752_storage)))",
              "src": "contracts/FantomMarketplace.sol:161"
            },
            {
              "contract": "FantomMarketplace",
              "label": "platformFee",
              "type": "t_uint16",
              "src": "contracts/FantomMarketplace.sol:165"
            },
            {
              "contract": "FantomMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomMarketplace.sol:168"
            },
            {
              "contract": "FantomMarketplace",
              "label": "collectionRoyalties",
              "type": "t_mapping(t_address,t_struct(CollectionRoyalty)10759_storage)",
              "src": "contracts/FantomMarketplace.sol:171"
            },
            {
              "contract": "FantomMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)10573",
              "src": "contracts/FantomMarketplace.sol:174"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
              "label": "mapping(address => mapping(uint256 => address))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint16))": {
              "label": "mapping(address => mapping(uint256 => uint16))"
            },
            "t_mapping(t_uint256,t_uint16)": {
              "label": "mapping(uint256 => uint16)"
            },
            "t_uint16": {
              "label": "uint16"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10743_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Listing)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10743_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Listing))"
            },
            "t_mapping(t_address,t_struct(Listing)10743_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Listing)"
            },
            "t_struct(Listing)10743_storage": {
              "label": "struct FantomMarketplace.Listing",
              "members": [
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10752_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Offer)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10752_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)10752_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Offer)"
            },
            "t_struct(Offer)10752_storage": {
              "label": "struct FantomMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_struct(CollectionRoyalty)10759_storage)": {
              "label": "mapping(address => struct FantomMarketplace.CollectionRoyalty)"
            },
            "t_struct(CollectionRoyalty)10759_storage": {
              "label": "struct FantomMarketplace.CollectionRoyalty",
              "members": [
                {
                  "label": "royalty",
                  "type": "t_uint16"
                },
                {
                  "label": "creator",
                  "type": "t_address"
                },
                {
                  "label": "feeRecipient",
                  "type": "t_address"
                }
              ]
            },
            "t_contract(IFantomAddressRegistry)10573": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAuction": {
        "src": "contracts/FantomMarketplace.sol:35",
        "inherit": [],
        "libraries": [],
        "methods": [
          "auctions(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomNFTFactory": {
        "src": "contracts/FantomMarketplace.sol:57",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exists(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomPriceFeed": {
        "src": "contracts/FantomMarketplace.sol:65",
        "inherit": [],
        "libraries": [],
        "methods": [
          "wFTM()",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactory": {
        "src": "contracts/FantomNFTFactory.sol:8",
        "version": {
          "withMetadata": "17ef76723026f4b788a995d0124f8a8492c2dfe57584d502edb702429c81bc39",
          "withoutMetadata": "17ef76723026f4b788a995d0124f8a8492c2dfe57584d502edb702429c81bc39",
          "linkedWithoutMetadata": "17ef76723026f4b788a995d0124f8a8492c2dfe57584d502edb702429c81bc39"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactory",
            "src": "contracts/FantomNFTFactory.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactory",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomNFTFactory.sol:14"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTFactory.sol:17"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTFactory.sol:20"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTFactory.sol:23"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTFactory.sol:26"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomNFTFactory.sol:29"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomNFTFactory.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactoryPrivate": {
        "src": "contracts/FantomNFTFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "4f4729172eb48c9b6893ee2cd3ccd8b0dfd21e910625f8334d8e175dd52f68d9",
          "withoutMetadata": "4f4729172eb48c9b6893ee2cd3ccd8b0dfd21e910625f8334d8e175dd52f68d9",
          "linkedWithoutMetadata": "4f4729172eb48c9b6893ee2cd3ccd8b0dfd21e910625f8334d8e175dd52f68d9"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactoryPrivate",
            "src": "contracts/FantomNFTFactoryPrivate.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomNFTFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomNFTFactoryPrivate.sol:29"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomNFTFactoryPrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradable": {
        "src": "contracts/FantomNFTTradable.sol:12",
        "version": {
          "withMetadata": "b548345b464c1226826ee298ea9e7aec75c11de1702496f8ae977a40d0d4ddfc",
          "withoutMetadata": "b548345b464c1226826ee298ea9e7aec75c11de1702496f8ae977a40d0d4ddfc",
          "linkedWithoutMetadata": "b548345b464c1226826ee298ea9e7aec75c11de1702496f8ae977a40d0d4ddfc"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradable",
            "src": "contracts/FantomNFTTradable.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts/FantomNFTTradable.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradable",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomNFTTradable.sol:27"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTTradable.sol:28"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTTradable.sol:29"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts/FantomNFTTradable.sol:30"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTTradable.sol:33"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomNFTTradable.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradablePrivate": {
        "src": "contracts/FantomNFTTradablePrivate.sol:12",
        "version": {
          "withMetadata": "9195fbad1a671ba81fa3dbeda90a1d2b33d90780263738fea126802d5353c000",
          "withoutMetadata": "9195fbad1a671ba81fa3dbeda90a1d2b33d90780263738fea126802d5353c000",
          "linkedWithoutMetadata": "9195fbad1a671ba81fa3dbeda90a1d2b33d90780263738fea126802d5353c000"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradablePrivate",
            "src": "contracts/FantomNFTTradablePrivate.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts/FantomNFTTradablePrivate.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomNFTTradablePrivate.sol:27"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTTradablePrivate.sol:28"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTTradablePrivate.sol:29"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts/FantomNFTTradablePrivate.sol:30"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTTradablePrivate.sol:33"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomNFTTradablePrivate.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomPriceFeed": {
        "src": "contracts/FantomPriceFeed.sol:21",
        "version": {
          "withMetadata": "c3486acea602badcee713e0d4a167bc6e4167f4ebe58ea0974294fe748fcd396",
          "withoutMetadata": "c3486acea602badcee713e0d4a167bc6e4167f4ebe58ea0974294fe748fcd396",
          "linkedWithoutMetadata": "c3486acea602badcee713e0d4a167bc6e4167f4ebe58ea0974294fe748fcd396"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerOracle(address,address)",
          "updateOracle(address,address)",
          "getPrice(address)",
          "updateAddressRegistry(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomPriceFeed",
            "src": "contracts/FantomPriceFeed.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomPriceFeed",
              "label": "oracles",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FantomPriceFeed.sol:23"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "addressRegistry",
              "type": "t_address",
              "src": "contracts/FantomPriceFeed.sol:26"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "wFTM",
              "type": "t_address",
              "src": "contracts/FantomPriceFeed.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IOracle": {
        "src": "contracts/FantomPriceFeed.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestAnswer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomTokenRegistry": {
        "src": "contracts/FantomTokenRegistry.sol:7",
        "version": {
          "withMetadata": "15e092d3ba18f8b0b09cf3a08319d468dc9c698c094acc12a625b236ffdfe0d2",
          "withoutMetadata": "15e092d3ba18f8b0b09cf3a08319d468dc9c698c094acc12a625b236ffdfe0d2",
          "linkedWithoutMetadata": "15e092d3ba18f8b0b09cf3a08319d468dc9c698c094acc12a625b236ffdfe0d2"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "add(address)",
          "remove(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomTokenRegistry",
              "label": "enabled",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomTokenRegistry.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155": {
        "src": "contracts/library/ERC1155.sol:11",
        "version": {
          "withMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71",
          "withoutMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71",
          "linkedWithoutMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71"
        },
        "inherit": [
          "IERC165"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155",
              "label": "balances",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/library/ERC1155.sol:25"
            },
            {
              "contract": "ERC1155",
              "label": "operators",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts/library/ERC1155.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155Metadata": {
        "src": "contracts/library/ERC1155Metadata.sol:9",
        "version": {
          "withMetadata": "9f4ac3045c6d47f7902357b737f9b36eb6d74a6144b8f5ff47ba6041be851533",
          "withoutMetadata": "9f4ac3045c6d47f7902357b737f9b36eb6d74a6144b8f5ff47ba6041be851533",
          "linkedWithoutMetadata": "9f4ac3045c6d47f7902357b737f9b36eb6d74a6144b8f5ff47ba6041be851533"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155Metadata",
              "label": "baseMetadataURI",
              "type": "t_string_storage",
              "src": "contracts/library/ERC1155Metadata.sol:12"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155MintBurn": {
        "src": "contracts/library/ERC1155MintBurn.sol:9",
        "version": {
          "withMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71",
          "withoutMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71",
          "linkedWithoutMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71"
        },
        "inherit": [
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155TokenReceiver": {
        "src": "contracts/library/IERC1155TokenReceiver.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BiddingContractMock": {
        "src": "contracts/mock/BiddingContractMock.sol:7",
        "version": {
          "withMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a",
          "withoutMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a",
          "linkedWithoutMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "bid(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BiddingContractMock",
            "src": "contracts/mock/BiddingContractMock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BiddingContractMock",
              "label": "auctionContract",
              "type": "t_contract(FantomAuction)8374",
              "src": "contracts/mock/BiddingContractMock.sol:8"
            }
          ],
          "types": {
            "t_contract(FantomAuction)8374": {
              "label": "contract FantomAuction"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuctionMock": {
        "src": "contracts/mock/FantomAuctionMock.sol:7",
        "version": {
          "withMetadata": "7d55c898852b8b1e86d032cef7abd574ffe789a496166c8870c9ef7b97c292ea",
          "withoutMetadata": "7d55c898852b8b1e86d032cef7abd574ffe789a496166c8870c9ef7b97c292ea",
          "linkedWithoutMetadata": "7d55c898852b8b1e86d032cef7abd574ffe789a496166c8870c9ef7b97c292ea"
        },
        "inherit": [
          "FantomAuction",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "setNowOverride(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuctionMock",
              "label": "nowOverride",
              "type": "t_uint256",
              "src": "contracts/mock/FantomAuctionMock.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts/mock/MockERC20.sol:7",
        "version": {
          "withMetadata": "b73d87e4c8cacbaaea189aec044e8ddaf418db412bc65c27d4f610aa1ed782c7",
          "withoutMetadata": "b73d87e4c8cacbaaea189aec044e8ddaf418db412bc65c27d4f610aa1ed782c7",
          "linkedWithoutMetadata": "b73d87e4c8cacbaaea189aec044e8ddaf418db412bc65c27d4f610aa1ed782c7"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/mock/MockERC20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeabilityProxy": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:340",
        "version": {
          "withMetadata": "75ce8f9e6c8139b9214082e60df86ee29b7d565d21778a045d6e314517331159",
          "withoutMetadata": "75ce8f9e6c8139b9214082e60df86ee29b7d565d21778a045d6e314517331159",
          "linkedWithoutMetadata": "75ce8f9e6c8139b9214082e60df86ee29b7d565d21778a045d6e314517331159"
        },
        "inherit": [
          "UpgradeabilityProxy",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AdminUpgradeabilityProxy",
            "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:350"
          },
          {
            "kind": "delegatecall",
            "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:428"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:46",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UpgradeabilityProxy": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:264",
        "version": {
          "withMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298",
          "withoutMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298",
          "linkedWithoutMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298"
        },
        "inherit": [
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeabilityProxy",
            "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:273"
          },
          {
            "kind": "delegatecall",
            "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:277"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyAdmin": {
        "src": "contracts/proxy/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "3305751fab7d99ff0661e547aca203a151c84f44f5d8c4da9e0b927b0467e8d6",
          "withoutMetadata": "3305751fab7d99ff0661e547aca203a151c84f44f5d8c4da9e0b927b0467e8d6",
          "linkedWithoutMetadata": "3305751fab7d99ff0661e547aca203a151c84f44f5d8c4da9e0b927b0467e8d6"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "@openzeppelin/contracts/math/SafeMath.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/introspection/ERC165.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165",
            "src": "@openzeppelin/contracts/introspection/ERC165.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC165",
              "label": "_supportedInterfaces",
              "type": "t_mapping(t_bytes4,t_bool)",
              "src": "@openzeppelin/contracts/introspection/ERC165.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "contracts/library/IERC165.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155": {
        "src": "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "allowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:21",
        "version": {
          "withMetadata": "c619b06be359c76da907e91cb7d261294d4e83a005a7c2395a5ca5913295475d",
          "withoutMetadata": "c619b06be359c76da907e91cb7d261294d4e83a005a7c2395a5ca5913295475d",
          "linkedWithoutMetadata": "c619b06be359c76da907e91cb7d261294d4e83a005a7c2395a5ca5913295475d"
        },
        "inherit": [
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address",
          "EnumerableSet",
          "EnumerableMap",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "baseURI()",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:93"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_holderTokens",
              "type": "t_mapping(t_address,t_struct(UintSet)4582_storage)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenOwners",
              "type": "t_struct(UintToAddressMap)3959_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:42"
            },
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:45"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:48"
            },
            {
              "contract": "ERC721",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:51"
            },
            {
              "contract": "ERC721",
              "label": "_baseURI",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(UintSet)4582_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UintSet)4582_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4196_storage"
                }
              ]
            },
            "t_struct(Set)4196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(UintToAddressMap)3959_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)3641_storage"
                }
              ]
            },
            "t_struct(Map)3641_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)3633_storage)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_struct(MapEntry)3633_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]"
            },
            "t_struct(MapEntry)3633_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:118",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableMap": {
        "src": "@openzeppelin/contracts/utils/EnumerableMap.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomAddressRegistry": {
        "src": "contracts/FantomAddressRegistry.sol:8",
        "version": {
          "withMetadata": "01210ef5a113adaade232d13a6ed6aa0103f2b25eafeceefe296975e29df66cb",
          "withoutMetadata": "01210ef5a113adaade232d13a6ed6aa0103f2b25eafeceefe296975e29df66cb",
          "linkedWithoutMetadata": "01210ef5a113adaade232d13a6ed6aa0103f2b25eafeceefe296975e29df66cb"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "updateArtion(address)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateNFTFactory(address)",
          "updateNFTFactoryPrivate(address)",
          "updateArtFactory(address)",
          "updateArtFactoryPrivate(address)",
          "updateTokenRegistry(address)",
          "updatePriceFeed(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAddressRegistry",
              "label": "artion",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:12"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:15"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:18"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:21"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:24"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateFactory",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:27"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "artFactory",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:30"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateArtFactory",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:33"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "tokenRegistry",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:36"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "priceFeed",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactory": {
        "src": "contracts/FantomArtFactory.sol:8",
        "version": {
          "withMetadata": "9df27e05e44575e70daa8898410ab03720347f72f29e1ec84ce8d2fdf14b534f",
          "withoutMetadata": "9df27e05e44575e70daa8898410ab03720347f72f29e1ec84ce8d2fdf14b534f",
          "linkedWithoutMetadata": "9df27e05e44575e70daa8898410ab03720347f72f29e1ec84ce8d2fdf14b534f"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactory",
            "src": "contracts/FantomArtFactory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomArtFactory.sol:14"
            },
            {
              "contract": "FantomArtFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomArtFactory.sol:17"
            },
            {
              "contract": "FantomArtFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtFactory.sol:20"
            },
            {
              "contract": "FantomArtFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtFactory.sol:23"
            },
            {
              "contract": "FantomArtFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtFactory.sol:26"
            },
            {
              "contract": "FantomArtFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomArtFactory.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactoryPrivate": {
        "src": "contracts/FantomArtFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "298a11e97a6c209f78207f6e6f2bbb1472158735ca002b411e4061af0a58c75a",
          "withoutMetadata": "298a11e97a6c209f78207f6e6f2bbb1472158735ca002b411e4061af0a58c75a",
          "linkedWithoutMetadata": "298a11e97a6c209f78207f6e6f2bbb1472158735ca002b411e4061af0a58c75a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactoryPrivate",
            "src": "contracts/FantomArtFactoryPrivate.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomArtFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomArtFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomArtFactoryPrivate.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradable": {
        "src": "contracts/FantomArtTradable.sol:22",
        "version": {
          "withMetadata": "073fe51513c158c095357630028d8a0956ecb69b5d37aef8e14b7ebd12b802cd",
          "withoutMetadata": "073fe51513c158c095357630028d8a0956ecb69b5d37aef8e14b7ebd12b802cd",
          "linkedWithoutMetadata": "073fe51513c158c095357630028d8a0956ecb69b5d37aef8e14b7ebd12b802cd"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradable",
            "src": "contracts/FantomArtTradable.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts/FantomArtTradable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradable",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts/FantomArtTradable.sol:28"
            },
            {
              "contract": "FantomArtTradable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts/FantomArtTradable.sol:31"
            },
            {
              "contract": "FantomArtTradable",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/FantomArtTradable.sol:33"
            },
            {
              "contract": "FantomArtTradable",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/FantomArtTradable.sol:34"
            },
            {
              "contract": "FantomArtTradable",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/FantomArtTradable.sol:37"
            },
            {
              "contract": "FantomArtTradable",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/FantomArtTradable.sol:39"
            },
            {
              "contract": "FantomArtTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtTradable.sol:41"
            },
            {
              "contract": "FantomArtTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtTradable.sol:43"
            },
            {
              "contract": "FantomArtTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomArtTradable.sol:45"
            },
            {
              "contract": "FantomArtTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomArtTradable.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "OwnableDelegateProxy": {
        "src": "contracts/FantomArtTradablePrivate.sol:10",
        "version": {
          "withMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "withoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "linkedWithoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyRegistry": {
        "src": "contracts/FantomArtTradablePrivate.sol:12",
        "version": {
          "withMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9",
          "withoutMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9",
          "linkedWithoutMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ProxyRegistry",
              "label": "proxies",
              "type": "t_mapping(t_address,t_contract(OwnableDelegateProxy)5826)",
              "src": "contracts/FantomArtTradablePrivate.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_contract(OwnableDelegateProxy)5826)": {
              "label": "mapping(address => contract OwnableDelegateProxy)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(OwnableDelegateProxy)5826": {
              "label": "contract OwnableDelegateProxy"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradablePrivate": {
        "src": "contracts/FantomArtTradablePrivate.sol:22",
        "version": {
          "withMetadata": "73c5ea2128ac23354b4437cd46710a957269f6a5e10d6f2eb8955d0f7811fd0b",
          "withoutMetadata": "73c5ea2128ac23354b4437cd46710a957269f6a5e10d6f2eb8955d0f7811fd0b",
          "linkedWithoutMetadata": "73c5ea2128ac23354b4437cd46710a957269f6a5e10d6f2eb8955d0f7811fd0b"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradablePrivate",
            "src": "contracts/FantomArtTradablePrivate.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts/FantomArtTradablePrivate.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts/FantomArtTradablePrivate.sol:28"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts/FantomArtTradablePrivate.sol:31"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/FantomArtTradablePrivate.sol:33"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/FantomArtTradablePrivate.sol:34"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/FantomArtTradablePrivate.sol:37"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/FantomArtTradablePrivate.sol:39"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtTradablePrivate.sol:41"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtTradablePrivate.sol:43"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomArtTradablePrivate.sol:45"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomArtTradablePrivate.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Artion": {
        "src": "contracts/FantomArtion.sol:9",
        "version": {
          "withMetadata": "0906a2a64eab674cc5697e3478fbc1983e5279f62af94e495fcfd58500fb6a8f",
          "withoutMetadata": "0906a2a64eab674cc5697e3478fbc1983e5279f62af94e495fcfd58500fb6a8f",
          "linkedWithoutMetadata": "0906a2a64eab674cc5697e3478fbc1983e5279f62af94e495fcfd58500fb6a8f"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable,uint256)",
          "mint(address,string)",
          "burn(uint256)",
          "exists(uint256)",
          "isApproved(uint256,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Artion",
            "src": "contracts/FantomArtion.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Artion",
              "label": "tokenIdPointer",
              "type": "t_uint256",
              "src": "contracts/FantomArtion.sol:26"
            },
            {
              "contract": "Artion",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/FantomArtion.sol:29"
            },
            {
              "contract": "Artion",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtion.sol:32"
            },
            {
              "contract": "Artion",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtion.sol:35"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuction": {
        "src": "contracts/FantomAuction.sol:55",
        "version": {
          "withMetadata": "b1d7876a39f761c828455415df736e7122eef51d924f4378a713036d42a59212",
          "withoutMetadata": "b1d7876a39f761c828455415df736e7122eef51d924f4378a713036d42a59212",
          "linkedWithoutMetadata": "b1d7876a39f761c828455415df736e7122eef51d924f4378a713036d42a59212"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable)",
          "createAuction(address,uint256,address,uint256,uint256,bool,uint256)",
          "placeBid(address,uint256)",
          "placeBid(address,uint256,uint256)",
          "withdrawBid(address,uint256)",
          "resultAuction(address,uint256)",
          "cancelAuction(address,uint256)",
          "toggleIsPaused()",
          "updateMinBidIncrement(uint256)",
          "updateBidWithdrawalLockTime(uint256)",
          "updateAuctionReservePrice(address,uint256,uint256)",
          "updateAuctionStartTime(address,uint256,uint256)",
          "updateAuctionEndTime(address,uint256,uint256)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "getAuction(address,uint256)",
          "getHighestBidder(address,uint256)",
          "reclaimERC20(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "minBidIncrement",
            "src": "contracts/FantomAuction.sol:156"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bidWithdrawalLockTime",
            "src": "contracts/FantomAuction.sol:159"
          },
          {
            "kind": "state-variable-assignment",
            "name": "platformFee",
            "src": "contracts/FantomAuction.sol:162"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuction",
              "label": "auctions",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6635_storage))",
              "src": "contracts/FantomAuction.sol:150"
            },
            {
              "contract": "FantomAuction",
              "label": "highestBids",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6642_storage))",
              "src": "contracts/FantomAuction.sol:153"
            },
            {
              "contract": "FantomAuction",
              "label": "minBidIncrement",
              "type": "t_uint256",
              "src": "contracts/FantomAuction.sol:156"
            },
            {
              "contract": "FantomAuction",
              "label": "bidWithdrawalLockTime",
              "type": "t_uint256",
              "src": "contracts/FantomAuction.sol:159"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomAuction.sol:162"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFeeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomAuction.sol:165"
            },
            {
              "contract": "FantomAuction",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)6442",
              "src": "contracts/FantomAuction.sol:168"
            },
            {
              "contract": "FantomAuction",
              "label": "isPaused",
              "type": "t_bool",
              "src": "contracts/FantomAuction.sol:171"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6635_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.Auction))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(Auction)6635_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.Auction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Auction)6635_storage": {
              "label": "struct FantomAuction.Auction",
              "members": [
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "minBid",
                  "type": "t_uint256"
                },
                {
                  "label": "reservePrice",
                  "type": "t_uint256"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256"
                },
                {
                  "label": "resulted",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6642_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.HighestBid))"
            },
            "t_mapping(t_uint256,t_struct(HighestBid)6642_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.HighestBid)"
            },
            "t_struct(HighestBid)6642_storage": {
              "label": "struct FantomAuction.HighestBid",
              "members": [
                {
                  "label": "bidder",
                  "type": "t_address_payable"
                },
                {
                  "label": "bid",
                  "type": "t_uint256"
                },
                {
                  "label": "lastBidTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)6442": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAddressRegistry": {
        "src": "contracts/FantomPriceFeed.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenRegistry()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomBundleMarketplace": {
        "src": "contracts/FantomMarketplace.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomMarketplace": {
        "src": "contracts/FantomBundleMarketplace.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,address,address)",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomTokenRegistry": {
        "src": "contracts/FantomPriceFeed.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enabled(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomBundleMarketplace": {
        "src": "contracts/FantomBundleMarketplace.sol:39",
        "version": {
          "withMetadata": "29c855f5efc12cfad575f1a5a2d63c8a5dc755cbef6dca449c8d74b30fa68a1e",
          "withoutMetadata": "29c855f5efc12cfad575f1a5a2d63c8a5dc755cbef6dca449c8d74b30fa68a1e",
          "linkedWithoutMetadata": "29c855f5efc12cfad575f1a5a2d63c8a5dc755cbef6dca449c8d74b30fa68a1e"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20",
          "EnumerableSet"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "getListing(address,string)",
          "listItem(string,address[],uint256[],uint256[],address,uint256,uint256)",
          "cancelListing(string)",
          "updateListing(string,address,uint256)",
          "buyItem(string)",
          "buyItem(string,address)",
          "createOffer(string,address,uint256,uint256)",
          "cancelOffer(string)",
          "acceptOffer(string,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomBundleMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8539_storage))",
              "src": "contracts/FantomBundleMarketplace.sol:106"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "owners",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/FantomBundleMarketplace.sol:109"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIdsPerItem",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4376_storage))",
              "src": "contracts/FantomBundleMarketplace.sol:111"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "nftIndexes",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))",
              "src": "contracts/FantomBundleMarketplace.sol:113"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIds",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "src": "contracts/FantomBundleMarketplace.sol:115"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "offers",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8546_storage))",
              "src": "contracts/FantomBundleMarketplace.sol:118"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomBundleMarketplace.sol:121"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomBundleMarketplace.sol:124"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)8402",
              "src": "contracts/FantomBundleMarketplace.sol:127"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8539_storage))": {
              "label": "mapping(address => mapping(bytes32 => struct FantomBundleMarketplace.Listing))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_struct(Listing)8539_storage)": {
              "label": "mapping(bytes32 => struct FantomBundleMarketplace.Listing)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Listing)8539_storage": {
              "label": "struct FantomBundleMarketplace.Listing",
              "members": [
                {
                  "label": "nfts",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "tokenIds",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "quantities",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4376_storage))": {
              "label": "mapping(address => mapping(uint256 => struct EnumerableSet.Bytes32Set))"
            },
            "t_mapping(t_uint256,t_struct(Bytes32Set)4376_storage)": {
              "label": "mapping(uint256 => struct EnumerableSet.Bytes32Set)"
            },
            "t_struct(Bytes32Set)4376_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4196_storage"
                }
              ]
            },
            "t_struct(Set)4196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
              "label": "mapping(bytes32 => mapping(address => mapping(uint256 => uint256)))"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8546_storage))": {
              "label": "mapping(bytes32 => mapping(address => struct FantomBundleMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)8546_storage)": {
              "label": "mapping(address => struct FantomBundleMarketplace.Offer)"
            },
            "t_struct(Offer)8546_storage": {
              "label": "struct FantomBundleMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)8402": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomMarketplace": {
        "src": "contracts/FantomMarketplace.sol:71",
        "version": {
          "withMetadata": "06f6aeed802c7ef9bb3c407aceaba0c875f3fc37e9141914e312d0a1d2677e50",
          "withoutMetadata": "06f6aeed802c7ef9bb3c407aceaba0c875f3fc37e9141914e312d0a1d2677e50",
          "linkedWithoutMetadata": "06f6aeed802c7ef9bb3c407aceaba0c875f3fc37e9141914e312d0a1d2677e50"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable,uint16)",
          "listItem(address,uint256,uint256,address,uint256,uint256)",
          "cancelListing(address,uint256)",
          "updateListing(address,uint256,address,uint256)",
          "buyItem(address,uint256,address,address)",
          "createOffer(address,uint256,address,uint256,uint256,uint256)",
          "cancelOffer(address,uint256)",
          "acceptOffer(address,uint256,address)",
          "registerRoyalty(address,uint256,uint16)",
          "registerCollectionRoyalty(address,address,uint16,address)",
          "getPrice(address)",
          "updatePlatformFee(uint16)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomMarketplace",
              "label": "minters",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
              "src": "contracts/FantomMarketplace.sol:151"
            },
            {
              "contract": "FantomMarketplace",
              "label": "royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint16))",
              "src": "contracts/FantomMarketplace.sol:154"
            },
            {
              "contract": "FantomMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10743_storage)))",
              "src": "contracts/FantomMarketplace.sol:157"
            },
            {
              "contract": "FantomMarketplace",
              "label": "offers",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10752_storage)))",
              "src": "contracts/FantomMarketplace.sol:161"
            },
            {
              "contract": "FantomMarketplace",
              "label": "platformFee",
              "type": "t_uint16",
              "src": "contracts/FantomMarketplace.sol:165"
            },
            {
              "contract": "FantomMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomMarketplace.sol:168"
            },
            {
              "contract": "FantomMarketplace",
              "label": "collectionRoyalties",
              "type": "t_mapping(t_address,t_struct(CollectionRoyalty)10759_storage)",
              "src": "contracts/FantomMarketplace.sol:171"
            },
            {
              "contract": "FantomMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)10573",
              "src": "contracts/FantomMarketplace.sol:174"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
              "label": "mapping(address => mapping(uint256 => address))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint16))": {
              "label": "mapping(address => mapping(uint256 => uint16))"
            },
            "t_mapping(t_uint256,t_uint16)": {
              "label": "mapping(uint256 => uint16)"
            },
            "t_uint16": {
              "label": "uint16"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10743_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Listing)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10743_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Listing))"
            },
            "t_mapping(t_address,t_struct(Listing)10743_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Listing)"
            },
            "t_struct(Listing)10743_storage": {
              "label": "struct FantomMarketplace.Listing",
              "members": [
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10752_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Offer)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10752_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)10752_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Offer)"
            },
            "t_struct(Offer)10752_storage": {
              "label": "struct FantomMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_struct(CollectionRoyalty)10759_storage)": {
              "label": "mapping(address => struct FantomMarketplace.CollectionRoyalty)"
            },
            "t_struct(CollectionRoyalty)10759_storage": {
              "label": "struct FantomMarketplace.CollectionRoyalty",
              "members": [
                {
                  "label": "royalty",
                  "type": "t_uint16"
                },
                {
                  "label": "creator",
                  "type": "t_address"
                },
                {
                  "label": "feeRecipient",
                  "type": "t_address"
                }
              ]
            },
            "t_contract(IFantomAddressRegistry)10573": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAuction": {
        "src": "contracts/FantomMarketplace.sol:35",
        "inherit": [],
        "libraries": [],
        "methods": [
          "auctions(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomNFTFactory": {
        "src": "contracts/FantomMarketplace.sol:57",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exists(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomPriceFeed": {
        "src": "contracts/FantomMarketplace.sol:65",
        "inherit": [],
        "libraries": [],
        "methods": [
          "wFTM()",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactory": {
        "src": "contracts/FantomNFTFactory.sol:8",
        "version": {
          "withMetadata": "17ef76723026f4b788a995d0124f8a8492c2dfe57584d502edb702429c81bc39",
          "withoutMetadata": "17ef76723026f4b788a995d0124f8a8492c2dfe57584d502edb702429c81bc39",
          "linkedWithoutMetadata": "17ef76723026f4b788a995d0124f8a8492c2dfe57584d502edb702429c81bc39"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactory",
            "src": "contracts/FantomNFTFactory.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactory",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomNFTFactory.sol:14"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTFactory.sol:17"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTFactory.sol:20"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTFactory.sol:23"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTFactory.sol:26"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomNFTFactory.sol:29"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomNFTFactory.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactoryPrivate": {
        "src": "contracts/FantomNFTFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "4f4729172eb48c9b6893ee2cd3ccd8b0dfd21e910625f8334d8e175dd52f68d9",
          "withoutMetadata": "4f4729172eb48c9b6893ee2cd3ccd8b0dfd21e910625f8334d8e175dd52f68d9",
          "linkedWithoutMetadata": "4f4729172eb48c9b6893ee2cd3ccd8b0dfd21e910625f8334d8e175dd52f68d9"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactoryPrivate",
            "src": "contracts/FantomNFTFactoryPrivate.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomNFTFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomNFTFactoryPrivate.sol:29"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomNFTFactoryPrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradable": {
        "src": "contracts/FantomNFTTradable.sol:12",
        "version": {
          "withMetadata": "b548345b464c1226826ee298ea9e7aec75c11de1702496f8ae977a40d0d4ddfc",
          "withoutMetadata": "b548345b464c1226826ee298ea9e7aec75c11de1702496f8ae977a40d0d4ddfc",
          "linkedWithoutMetadata": "b548345b464c1226826ee298ea9e7aec75c11de1702496f8ae977a40d0d4ddfc"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradable",
            "src": "contracts/FantomNFTTradable.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts/FantomNFTTradable.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradable",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomNFTTradable.sol:27"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTTradable.sol:28"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTTradable.sol:29"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts/FantomNFTTradable.sol:30"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTTradable.sol:33"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomNFTTradable.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradablePrivate": {
        "src": "contracts/FantomNFTTradablePrivate.sol:12",
        "version": {
          "withMetadata": "9195fbad1a671ba81fa3dbeda90a1d2b33d90780263738fea126802d5353c000",
          "withoutMetadata": "9195fbad1a671ba81fa3dbeda90a1d2b33d90780263738fea126802d5353c000",
          "linkedWithoutMetadata": "9195fbad1a671ba81fa3dbeda90a1d2b33d90780263738fea126802d5353c000"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradablePrivate",
            "src": "contracts/FantomNFTTradablePrivate.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts/FantomNFTTradablePrivate.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomNFTTradablePrivate.sol:27"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTTradablePrivate.sol:28"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTTradablePrivate.sol:29"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts/FantomNFTTradablePrivate.sol:30"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTTradablePrivate.sol:33"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomNFTTradablePrivate.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomPriceFeed": {
        "src": "contracts/FantomPriceFeed.sol:21",
        "version": {
          "withMetadata": "c3486acea602badcee713e0d4a167bc6e4167f4ebe58ea0974294fe748fcd396",
          "withoutMetadata": "c3486acea602badcee713e0d4a167bc6e4167f4ebe58ea0974294fe748fcd396",
          "linkedWithoutMetadata": "c3486acea602badcee713e0d4a167bc6e4167f4ebe58ea0974294fe748fcd396"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerOracle(address,address)",
          "updateOracle(address,address)",
          "getPrice(address)",
          "updateAddressRegistry(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomPriceFeed",
            "src": "contracts/FantomPriceFeed.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomPriceFeed",
              "label": "oracles",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FantomPriceFeed.sol:23"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "addressRegistry",
              "type": "t_address",
              "src": "contracts/FantomPriceFeed.sol:26"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "wFTM",
              "type": "t_address",
              "src": "contracts/FantomPriceFeed.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IOracle": {
        "src": "contracts/FantomPriceFeed.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestAnswer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomTokenRegistry": {
        "src": "contracts/FantomTokenRegistry.sol:7",
        "version": {
          "withMetadata": "15e092d3ba18f8b0b09cf3a08319d468dc9c698c094acc12a625b236ffdfe0d2",
          "withoutMetadata": "15e092d3ba18f8b0b09cf3a08319d468dc9c698c094acc12a625b236ffdfe0d2",
          "linkedWithoutMetadata": "15e092d3ba18f8b0b09cf3a08319d468dc9c698c094acc12a625b236ffdfe0d2"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "add(address)",
          "remove(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomTokenRegistry",
              "label": "enabled",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomTokenRegistry.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155": {
        "src": "contracts/library/ERC1155.sol:11",
        "version": {
          "withMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71",
          "withoutMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71",
          "linkedWithoutMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71"
        },
        "inherit": [
          "IERC165"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155",
              "label": "balances",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/library/ERC1155.sol:25"
            },
            {
              "contract": "ERC1155",
              "label": "operators",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts/library/ERC1155.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155Metadata": {
        "src": "contracts/library/ERC1155Metadata.sol:9",
        "version": {
          "withMetadata": "9f4ac3045c6d47f7902357b737f9b36eb6d74a6144b8f5ff47ba6041be851533",
          "withoutMetadata": "9f4ac3045c6d47f7902357b737f9b36eb6d74a6144b8f5ff47ba6041be851533",
          "linkedWithoutMetadata": "9f4ac3045c6d47f7902357b737f9b36eb6d74a6144b8f5ff47ba6041be851533"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155Metadata",
              "label": "baseMetadataURI",
              "type": "t_string_storage",
              "src": "contracts/library/ERC1155Metadata.sol:12"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155MintBurn": {
        "src": "contracts/library/ERC1155MintBurn.sol:9",
        "version": {
          "withMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71",
          "withoutMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71",
          "linkedWithoutMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71"
        },
        "inherit": [
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155TokenReceiver": {
        "src": "contracts/library/IERC1155TokenReceiver.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BiddingContractMock": {
        "src": "contracts/mock/BiddingContractMock.sol:7",
        "version": {
          "withMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a",
          "withoutMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a",
          "linkedWithoutMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "bid(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BiddingContractMock",
            "src": "contracts/mock/BiddingContractMock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BiddingContractMock",
              "label": "auctionContract",
              "type": "t_contract(FantomAuction)8374",
              "src": "contracts/mock/BiddingContractMock.sol:8"
            }
          ],
          "types": {
            "t_contract(FantomAuction)8374": {
              "label": "contract FantomAuction"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuctionMock": {
        "src": "contracts/mock/FantomAuctionMock.sol:7",
        "version": {
          "withMetadata": "7d55c898852b8b1e86d032cef7abd574ffe789a496166c8870c9ef7b97c292ea",
          "withoutMetadata": "7d55c898852b8b1e86d032cef7abd574ffe789a496166c8870c9ef7b97c292ea",
          "linkedWithoutMetadata": "7d55c898852b8b1e86d032cef7abd574ffe789a496166c8870c9ef7b97c292ea"
        },
        "inherit": [
          "FantomAuction",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "setNowOverride(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuctionMock",
              "label": "nowOverride",
              "type": "t_uint256",
              "src": "contracts/mock/FantomAuctionMock.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts/mock/MockERC20.sol:7",
        "version": {
          "withMetadata": "b73d87e4c8cacbaaea189aec044e8ddaf418db412bc65c27d4f610aa1ed782c7",
          "withoutMetadata": "b73d87e4c8cacbaaea189aec044e8ddaf418db412bc65c27d4f610aa1ed782c7",
          "linkedWithoutMetadata": "b73d87e4c8cacbaaea189aec044e8ddaf418db412bc65c27d4f610aa1ed782c7"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/mock/MockERC20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeabilityProxy": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:340",
        "version": {
          "withMetadata": "75ce8f9e6c8139b9214082e60df86ee29b7d565d21778a045d6e314517331159",
          "withoutMetadata": "75ce8f9e6c8139b9214082e60df86ee29b7d565d21778a045d6e314517331159",
          "linkedWithoutMetadata": "75ce8f9e6c8139b9214082e60df86ee29b7d565d21778a045d6e314517331159"
        },
        "inherit": [
          "UpgradeabilityProxy",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AdminUpgradeabilityProxy",
            "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:350"
          },
          {
            "kind": "delegatecall",
            "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:428"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:46",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UpgradeabilityProxy": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:264",
        "version": {
          "withMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298",
          "withoutMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298",
          "linkedWithoutMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298"
        },
        "inherit": [
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeabilityProxy",
            "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:273"
          },
          {
            "kind": "delegatecall",
            "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:277"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyAdmin": {
        "src": "contracts/proxy/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "3305751fab7d99ff0661e547aca203a151c84f44f5d8c4da9e0b927b0467e8d6",
          "withoutMetadata": "3305751fab7d99ff0661e547aca203a151c84f44f5d8c4da9e0b927b0467e8d6",
          "linkedWithoutMetadata": "3305751fab7d99ff0661e547aca203a151c84f44f5d8c4da9e0b927b0467e8d6"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "@openzeppelin/contracts/math/SafeMath.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/introspection/ERC165.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165",
            "src": "@openzeppelin/contracts/introspection/ERC165.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC165",
              "label": "_supportedInterfaces",
              "type": "t_mapping(t_bytes4,t_bool)",
              "src": "@openzeppelin/contracts/introspection/ERC165.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "contracts/library/IERC165.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155": {
        "src": "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "allowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:21",
        "version": {
          "withMetadata": "c619b06be359c76da907e91cb7d261294d4e83a005a7c2395a5ca5913295475d",
          "withoutMetadata": "c619b06be359c76da907e91cb7d261294d4e83a005a7c2395a5ca5913295475d",
          "linkedWithoutMetadata": "c619b06be359c76da907e91cb7d261294d4e83a005a7c2395a5ca5913295475d"
        },
        "inherit": [
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address",
          "EnumerableSet",
          "EnumerableMap",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "baseURI()",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:93"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_holderTokens",
              "type": "t_mapping(t_address,t_struct(UintSet)4582_storage)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenOwners",
              "type": "t_struct(UintToAddressMap)3959_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:42"
            },
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:45"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:48"
            },
            {
              "contract": "ERC721",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:51"
            },
            {
              "contract": "ERC721",
              "label": "_baseURI",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(UintSet)4582_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UintSet)4582_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4196_storage"
                }
              ]
            },
            "t_struct(Set)4196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(UintToAddressMap)3959_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)3641_storage"
                }
              ]
            },
            "t_struct(Map)3641_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)3633_storage)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_struct(MapEntry)3633_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]"
            },
            "t_struct(MapEntry)3633_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:118",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableMap": {
        "src": "@openzeppelin/contracts/utils/EnumerableMap.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomAddressRegistry": {
        "src": "contracts/FantomAddressRegistry.sol:8",
        "version": {
          "withMetadata": "01210ef5a113adaade232d13a6ed6aa0103f2b25eafeceefe296975e29df66cb",
          "withoutMetadata": "01210ef5a113adaade232d13a6ed6aa0103f2b25eafeceefe296975e29df66cb",
          "linkedWithoutMetadata": "01210ef5a113adaade232d13a6ed6aa0103f2b25eafeceefe296975e29df66cb"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "updateArtion(address)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateNFTFactory(address)",
          "updateNFTFactoryPrivate(address)",
          "updateArtFactory(address)",
          "updateArtFactoryPrivate(address)",
          "updateTokenRegistry(address)",
          "updatePriceFeed(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAddressRegistry",
              "label": "artion",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:12"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:15"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:18"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:21"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:24"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateFactory",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:27"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "artFactory",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:30"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateArtFactory",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:33"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "tokenRegistry",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:36"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "priceFeed",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactory": {
        "src": "contracts/FantomArtFactory.sol:8",
        "version": {
          "withMetadata": "9df27e05e44575e70daa8898410ab03720347f72f29e1ec84ce8d2fdf14b534f",
          "withoutMetadata": "9df27e05e44575e70daa8898410ab03720347f72f29e1ec84ce8d2fdf14b534f",
          "linkedWithoutMetadata": "9df27e05e44575e70daa8898410ab03720347f72f29e1ec84ce8d2fdf14b534f"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactory",
            "src": "contracts/FantomArtFactory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomArtFactory.sol:14"
            },
            {
              "contract": "FantomArtFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomArtFactory.sol:17"
            },
            {
              "contract": "FantomArtFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtFactory.sol:20"
            },
            {
              "contract": "FantomArtFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtFactory.sol:23"
            },
            {
              "contract": "FantomArtFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtFactory.sol:26"
            },
            {
              "contract": "FantomArtFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomArtFactory.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactoryPrivate": {
        "src": "contracts/FantomArtFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "298a11e97a6c209f78207f6e6f2bbb1472158735ca002b411e4061af0a58c75a",
          "withoutMetadata": "298a11e97a6c209f78207f6e6f2bbb1472158735ca002b411e4061af0a58c75a",
          "linkedWithoutMetadata": "298a11e97a6c209f78207f6e6f2bbb1472158735ca002b411e4061af0a58c75a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactoryPrivate",
            "src": "contracts/FantomArtFactoryPrivate.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomArtFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomArtFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomArtFactoryPrivate.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradable": {
        "src": "contracts/FantomArtTradable.sol:22",
        "version": {
          "withMetadata": "073fe51513c158c095357630028d8a0956ecb69b5d37aef8e14b7ebd12b802cd",
          "withoutMetadata": "073fe51513c158c095357630028d8a0956ecb69b5d37aef8e14b7ebd12b802cd",
          "linkedWithoutMetadata": "073fe51513c158c095357630028d8a0956ecb69b5d37aef8e14b7ebd12b802cd"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradable",
            "src": "contracts/FantomArtTradable.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts/FantomArtTradable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradable",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts/FantomArtTradable.sol:28"
            },
            {
              "contract": "FantomArtTradable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts/FantomArtTradable.sol:31"
            },
            {
              "contract": "FantomArtTradable",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/FantomArtTradable.sol:33"
            },
            {
              "contract": "FantomArtTradable",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/FantomArtTradable.sol:34"
            },
            {
              "contract": "FantomArtTradable",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/FantomArtTradable.sol:37"
            },
            {
              "contract": "FantomArtTradable",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/FantomArtTradable.sol:39"
            },
            {
              "contract": "FantomArtTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtTradable.sol:41"
            },
            {
              "contract": "FantomArtTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtTradable.sol:43"
            },
            {
              "contract": "FantomArtTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomArtTradable.sol:45"
            },
            {
              "contract": "FantomArtTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomArtTradable.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "OwnableDelegateProxy": {
        "src": "contracts/FantomArtTradablePrivate.sol:10",
        "version": {
          "withMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "withoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "linkedWithoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyRegistry": {
        "src": "contracts/FantomArtTradablePrivate.sol:12",
        "version": {
          "withMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9",
          "withoutMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9",
          "linkedWithoutMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ProxyRegistry",
              "label": "proxies",
              "type": "t_mapping(t_address,t_contract(OwnableDelegateProxy)5826)",
              "src": "contracts/FantomArtTradablePrivate.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_contract(OwnableDelegateProxy)5826)": {
              "label": "mapping(address => contract OwnableDelegateProxy)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(OwnableDelegateProxy)5826": {
              "label": "contract OwnableDelegateProxy"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradablePrivate": {
        "src": "contracts/FantomArtTradablePrivate.sol:22",
        "version": {
          "withMetadata": "73c5ea2128ac23354b4437cd46710a957269f6a5e10d6f2eb8955d0f7811fd0b",
          "withoutMetadata": "73c5ea2128ac23354b4437cd46710a957269f6a5e10d6f2eb8955d0f7811fd0b",
          "linkedWithoutMetadata": "73c5ea2128ac23354b4437cd46710a957269f6a5e10d6f2eb8955d0f7811fd0b"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradablePrivate",
            "src": "contracts/FantomArtTradablePrivate.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts/FantomArtTradablePrivate.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts/FantomArtTradablePrivate.sol:28"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts/FantomArtTradablePrivate.sol:31"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/FantomArtTradablePrivate.sol:33"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/FantomArtTradablePrivate.sol:34"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/FantomArtTradablePrivate.sol:37"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/FantomArtTradablePrivate.sol:39"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtTradablePrivate.sol:41"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtTradablePrivate.sol:43"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomArtTradablePrivate.sol:45"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomArtTradablePrivate.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Artion": {
        "src": "contracts/FantomArtion.sol:9",
        "version": {
          "withMetadata": "0906a2a64eab674cc5697e3478fbc1983e5279f62af94e495fcfd58500fb6a8f",
          "withoutMetadata": "0906a2a64eab674cc5697e3478fbc1983e5279f62af94e495fcfd58500fb6a8f",
          "linkedWithoutMetadata": "0906a2a64eab674cc5697e3478fbc1983e5279f62af94e495fcfd58500fb6a8f"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable,uint256)",
          "mint(address,string)",
          "burn(uint256)",
          "exists(uint256)",
          "isApproved(uint256,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Artion",
            "src": "contracts/FantomArtion.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Artion",
              "label": "tokenIdPointer",
              "type": "t_uint256",
              "src": "contracts/FantomArtion.sol:26"
            },
            {
              "contract": "Artion",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/FantomArtion.sol:29"
            },
            {
              "contract": "Artion",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtion.sol:32"
            },
            {
              "contract": "Artion",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtion.sol:35"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuction": {
        "src": "contracts/FantomAuction.sol:55",
        "version": {
          "withMetadata": "b1d7876a39f761c828455415df736e7122eef51d924f4378a713036d42a59212",
          "withoutMetadata": "b1d7876a39f761c828455415df736e7122eef51d924f4378a713036d42a59212",
          "linkedWithoutMetadata": "b1d7876a39f761c828455415df736e7122eef51d924f4378a713036d42a59212"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable)",
          "createAuction(address,uint256,address,uint256,uint256,bool,uint256)",
          "placeBid(address,uint256)",
          "placeBid(address,uint256,uint256)",
          "withdrawBid(address,uint256)",
          "resultAuction(address,uint256)",
          "cancelAuction(address,uint256)",
          "toggleIsPaused()",
          "updateMinBidIncrement(uint256)",
          "updateBidWithdrawalLockTime(uint256)",
          "updateAuctionReservePrice(address,uint256,uint256)",
          "updateAuctionStartTime(address,uint256,uint256)",
          "updateAuctionEndTime(address,uint256,uint256)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "getAuction(address,uint256)",
          "getHighestBidder(address,uint256)",
          "reclaimERC20(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "minBidIncrement",
            "src": "contracts/FantomAuction.sol:156"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bidWithdrawalLockTime",
            "src": "contracts/FantomAuction.sol:159"
          },
          {
            "kind": "state-variable-assignment",
            "name": "platformFee",
            "src": "contracts/FantomAuction.sol:162"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuction",
              "label": "auctions",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6635_storage))",
              "src": "contracts/FantomAuction.sol:150"
            },
            {
              "contract": "FantomAuction",
              "label": "highestBids",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6642_storage))",
              "src": "contracts/FantomAuction.sol:153"
            },
            {
              "contract": "FantomAuction",
              "label": "minBidIncrement",
              "type": "t_uint256",
              "src": "contracts/FantomAuction.sol:156"
            },
            {
              "contract": "FantomAuction",
              "label": "bidWithdrawalLockTime",
              "type": "t_uint256",
              "src": "contracts/FantomAuction.sol:159"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomAuction.sol:162"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFeeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomAuction.sol:165"
            },
            {
              "contract": "FantomAuction",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)6442",
              "src": "contracts/FantomAuction.sol:168"
            },
            {
              "contract": "FantomAuction",
              "label": "isPaused",
              "type": "t_bool",
              "src": "contracts/FantomAuction.sol:171"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6635_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.Auction))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(Auction)6635_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.Auction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Auction)6635_storage": {
              "label": "struct FantomAuction.Auction",
              "members": [
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "minBid",
                  "type": "t_uint256"
                },
                {
                  "label": "reservePrice",
                  "type": "t_uint256"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256"
                },
                {
                  "label": "resulted",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6642_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.HighestBid))"
            },
            "t_mapping(t_uint256,t_struct(HighestBid)6642_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.HighestBid)"
            },
            "t_struct(HighestBid)6642_storage": {
              "label": "struct FantomAuction.HighestBid",
              "members": [
                {
                  "label": "bidder",
                  "type": "t_address_payable"
                },
                {
                  "label": "bid",
                  "type": "t_uint256"
                },
                {
                  "label": "lastBidTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)6442": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAddressRegistry": {
        "src": "contracts/FantomPriceFeed.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenRegistry()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomBundleMarketplace": {
        "src": "contracts/FantomMarketplace.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomMarketplace": {
        "src": "contracts/FantomBundleMarketplace.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,address,address)",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomTokenRegistry": {
        "src": "contracts/FantomPriceFeed.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enabled(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomBundleMarketplace": {
        "src": "contracts/FantomBundleMarketplace.sol:39",
        "version": {
          "withMetadata": "29c855f5efc12cfad575f1a5a2d63c8a5dc755cbef6dca449c8d74b30fa68a1e",
          "withoutMetadata": "29c855f5efc12cfad575f1a5a2d63c8a5dc755cbef6dca449c8d74b30fa68a1e",
          "linkedWithoutMetadata": "29c855f5efc12cfad575f1a5a2d63c8a5dc755cbef6dca449c8d74b30fa68a1e"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20",
          "EnumerableSet"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "getListing(address,string)",
          "listItem(string,address[],uint256[],uint256[],address,uint256,uint256)",
          "cancelListing(string)",
          "updateListing(string,address,uint256)",
          "buyItem(string)",
          "buyItem(string,address)",
          "createOffer(string,address,uint256,uint256)",
          "cancelOffer(string)",
          "acceptOffer(string,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomBundleMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8539_storage))",
              "src": "contracts/FantomBundleMarketplace.sol:106"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "owners",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/FantomBundleMarketplace.sol:109"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIdsPerItem",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4376_storage))",
              "src": "contracts/FantomBundleMarketplace.sol:111"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "nftIndexes",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))",
              "src": "contracts/FantomBundleMarketplace.sol:113"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIds",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "src": "contracts/FantomBundleMarketplace.sol:115"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "offers",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8546_storage))",
              "src": "contracts/FantomBundleMarketplace.sol:118"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomBundleMarketplace.sol:121"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomBundleMarketplace.sol:124"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)8402",
              "src": "contracts/FantomBundleMarketplace.sol:127"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8539_storage))": {
              "label": "mapping(address => mapping(bytes32 => struct FantomBundleMarketplace.Listing))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_struct(Listing)8539_storage)": {
              "label": "mapping(bytes32 => struct FantomBundleMarketplace.Listing)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Listing)8539_storage": {
              "label": "struct FantomBundleMarketplace.Listing",
              "members": [
                {
                  "label": "nfts",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "tokenIds",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "quantities",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4376_storage))": {
              "label": "mapping(address => mapping(uint256 => struct EnumerableSet.Bytes32Set))"
            },
            "t_mapping(t_uint256,t_struct(Bytes32Set)4376_storage)": {
              "label": "mapping(uint256 => struct EnumerableSet.Bytes32Set)"
            },
            "t_struct(Bytes32Set)4376_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4196_storage"
                }
              ]
            },
            "t_struct(Set)4196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
              "label": "mapping(bytes32 => mapping(address => mapping(uint256 => uint256)))"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8546_storage))": {
              "label": "mapping(bytes32 => mapping(address => struct FantomBundleMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)8546_storage)": {
              "label": "mapping(address => struct FantomBundleMarketplace.Offer)"
            },
            "t_struct(Offer)8546_storage": {
              "label": "struct FantomBundleMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)8402": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomMarketplace": {
        "src": "contracts/FantomMarketplace.sol:71",
        "version": {
          "withMetadata": "ec5a89cc91784742f085e45caabc13c7327a2c9c8d2846f9077690f63e45a3a1",
          "withoutMetadata": "ec5a89cc91784742f085e45caabc13c7327a2c9c8d2846f9077690f63e45a3a1",
          "linkedWithoutMetadata": "ec5a89cc91784742f085e45caabc13c7327a2c9c8d2846f9077690f63e45a3a1"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable,uint16)",
          "listItem(address,uint256,uint256,address,uint256,uint256)",
          "cancelListing(address,uint256)",
          "updateListing(address,uint256,address,uint256)",
          "buyItem(address,uint256,address,address)",
          "createOffer(address,uint256,address,uint256,uint256,uint256)",
          "cancelOffer(address,uint256)",
          "acceptOffer(address,uint256,address)",
          "registerRoyalty(address,uint256,uint16)",
          "registerCollectionRoyalty(address,address,uint16,address)",
          "getPrice(address)",
          "updatePlatformFee(uint16)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomMarketplace",
              "label": "minters",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
              "src": "contracts/FantomMarketplace.sol:151"
            },
            {
              "contract": "FantomMarketplace",
              "label": "royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint16))",
              "src": "contracts/FantomMarketplace.sol:154"
            },
            {
              "contract": "FantomMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10743_storage)))",
              "src": "contracts/FantomMarketplace.sol:157"
            },
            {
              "contract": "FantomMarketplace",
              "label": "offers",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10752_storage)))",
              "src": "contracts/FantomMarketplace.sol:161"
            },
            {
              "contract": "FantomMarketplace",
              "label": "platformFee",
              "type": "t_uint16",
              "src": "contracts/FantomMarketplace.sol:165"
            },
            {
              "contract": "FantomMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomMarketplace.sol:168"
            },
            {
              "contract": "FantomMarketplace",
              "label": "collectionRoyalties",
              "type": "t_mapping(t_address,t_struct(CollectionRoyalty)10759_storage)",
              "src": "contracts/FantomMarketplace.sol:171"
            },
            {
              "contract": "FantomMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)10573",
              "src": "contracts/FantomMarketplace.sol:174"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
              "label": "mapping(address => mapping(uint256 => address))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint16))": {
              "label": "mapping(address => mapping(uint256 => uint16))"
            },
            "t_mapping(t_uint256,t_uint16)": {
              "label": "mapping(uint256 => uint16)"
            },
            "t_uint16": {
              "label": "uint16"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10743_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Listing)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10743_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Listing))"
            },
            "t_mapping(t_address,t_struct(Listing)10743_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Listing)"
            },
            "t_struct(Listing)10743_storage": {
              "label": "struct FantomMarketplace.Listing",
              "members": [
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10752_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Offer)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10752_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)10752_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Offer)"
            },
            "t_struct(Offer)10752_storage": {
              "label": "struct FantomMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_struct(CollectionRoyalty)10759_storage)": {
              "label": "mapping(address => struct FantomMarketplace.CollectionRoyalty)"
            },
            "t_struct(CollectionRoyalty)10759_storage": {
              "label": "struct FantomMarketplace.CollectionRoyalty",
              "members": [
                {
                  "label": "royalty",
                  "type": "t_uint16"
                },
                {
                  "label": "creator",
                  "type": "t_address"
                },
                {
                  "label": "feeRecipient",
                  "type": "t_address"
                }
              ]
            },
            "t_contract(IFantomAddressRegistry)10573": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAuction": {
        "src": "contracts/FantomMarketplace.sol:35",
        "inherit": [],
        "libraries": [],
        "methods": [
          "auctions(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomNFTFactory": {
        "src": "contracts/FantomMarketplace.sol:57",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exists(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomPriceFeed": {
        "src": "contracts/FantomMarketplace.sol:65",
        "inherit": [],
        "libraries": [],
        "methods": [
          "wFTM()",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactory": {
        "src": "contracts/FantomNFTFactory.sol:8",
        "version": {
          "withMetadata": "17ef76723026f4b788a995d0124f8a8492c2dfe57584d502edb702429c81bc39",
          "withoutMetadata": "17ef76723026f4b788a995d0124f8a8492c2dfe57584d502edb702429c81bc39",
          "linkedWithoutMetadata": "17ef76723026f4b788a995d0124f8a8492c2dfe57584d502edb702429c81bc39"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactory",
            "src": "contracts/FantomNFTFactory.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactory",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomNFTFactory.sol:14"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTFactory.sol:17"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTFactory.sol:20"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTFactory.sol:23"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTFactory.sol:26"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomNFTFactory.sol:29"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomNFTFactory.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactoryPrivate": {
        "src": "contracts/FantomNFTFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "4f4729172eb48c9b6893ee2cd3ccd8b0dfd21e910625f8334d8e175dd52f68d9",
          "withoutMetadata": "4f4729172eb48c9b6893ee2cd3ccd8b0dfd21e910625f8334d8e175dd52f68d9",
          "linkedWithoutMetadata": "4f4729172eb48c9b6893ee2cd3ccd8b0dfd21e910625f8334d8e175dd52f68d9"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactoryPrivate",
            "src": "contracts/FantomNFTFactoryPrivate.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomNFTFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomNFTFactoryPrivate.sol:29"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomNFTFactoryPrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradable": {
        "src": "contracts/FantomNFTTradable.sol:12",
        "version": {
          "withMetadata": "b548345b464c1226826ee298ea9e7aec75c11de1702496f8ae977a40d0d4ddfc",
          "withoutMetadata": "b548345b464c1226826ee298ea9e7aec75c11de1702496f8ae977a40d0d4ddfc",
          "linkedWithoutMetadata": "b548345b464c1226826ee298ea9e7aec75c11de1702496f8ae977a40d0d4ddfc"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradable",
            "src": "contracts/FantomNFTTradable.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts/FantomNFTTradable.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradable",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomNFTTradable.sol:27"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTTradable.sol:28"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTTradable.sol:29"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts/FantomNFTTradable.sol:30"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTTradable.sol:33"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomNFTTradable.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradablePrivate": {
        "src": "contracts/FantomNFTTradablePrivate.sol:12",
        "version": {
          "withMetadata": "9195fbad1a671ba81fa3dbeda90a1d2b33d90780263738fea126802d5353c000",
          "withoutMetadata": "9195fbad1a671ba81fa3dbeda90a1d2b33d90780263738fea126802d5353c000",
          "linkedWithoutMetadata": "9195fbad1a671ba81fa3dbeda90a1d2b33d90780263738fea126802d5353c000"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradablePrivate",
            "src": "contracts/FantomNFTTradablePrivate.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts/FantomNFTTradablePrivate.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomNFTTradablePrivate.sol:27"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTTradablePrivate.sol:28"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTTradablePrivate.sol:29"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts/FantomNFTTradablePrivate.sol:30"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTTradablePrivate.sol:33"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomNFTTradablePrivate.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomPriceFeed": {
        "src": "contracts/FantomPriceFeed.sol:21",
        "version": {
          "withMetadata": "c3486acea602badcee713e0d4a167bc6e4167f4ebe58ea0974294fe748fcd396",
          "withoutMetadata": "c3486acea602badcee713e0d4a167bc6e4167f4ebe58ea0974294fe748fcd396",
          "linkedWithoutMetadata": "c3486acea602badcee713e0d4a167bc6e4167f4ebe58ea0974294fe748fcd396"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerOracle(address,address)",
          "updateOracle(address,address)",
          "getPrice(address)",
          "updateAddressRegistry(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomPriceFeed",
            "src": "contracts/FantomPriceFeed.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomPriceFeed",
              "label": "oracles",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FantomPriceFeed.sol:23"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "addressRegistry",
              "type": "t_address",
              "src": "contracts/FantomPriceFeed.sol:26"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "wFTM",
              "type": "t_address",
              "src": "contracts/FantomPriceFeed.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IOracle": {
        "src": "contracts/FantomPriceFeed.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestAnswer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomTokenRegistry": {
        "src": "contracts/FantomTokenRegistry.sol:7",
        "version": {
          "withMetadata": "15e092d3ba18f8b0b09cf3a08319d468dc9c698c094acc12a625b236ffdfe0d2",
          "withoutMetadata": "15e092d3ba18f8b0b09cf3a08319d468dc9c698c094acc12a625b236ffdfe0d2",
          "linkedWithoutMetadata": "15e092d3ba18f8b0b09cf3a08319d468dc9c698c094acc12a625b236ffdfe0d2"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "add(address)",
          "remove(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomTokenRegistry",
              "label": "enabled",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomTokenRegistry.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155": {
        "src": "contracts/library/ERC1155.sol:11",
        "version": {
          "withMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71",
          "withoutMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71",
          "linkedWithoutMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71"
        },
        "inherit": [
          "IERC165"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155",
              "label": "balances",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/library/ERC1155.sol:25"
            },
            {
              "contract": "ERC1155",
              "label": "operators",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts/library/ERC1155.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155Metadata": {
        "src": "contracts/library/ERC1155Metadata.sol:9",
        "version": {
          "withMetadata": "9f4ac3045c6d47f7902357b737f9b36eb6d74a6144b8f5ff47ba6041be851533",
          "withoutMetadata": "9f4ac3045c6d47f7902357b737f9b36eb6d74a6144b8f5ff47ba6041be851533",
          "linkedWithoutMetadata": "9f4ac3045c6d47f7902357b737f9b36eb6d74a6144b8f5ff47ba6041be851533"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155Metadata",
              "label": "baseMetadataURI",
              "type": "t_string_storage",
              "src": "contracts/library/ERC1155Metadata.sol:12"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155MintBurn": {
        "src": "contracts/library/ERC1155MintBurn.sol:9",
        "version": {
          "withMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71",
          "withoutMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71",
          "linkedWithoutMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71"
        },
        "inherit": [
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155TokenReceiver": {
        "src": "contracts/library/IERC1155TokenReceiver.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BiddingContractMock": {
        "src": "contracts/mock/BiddingContractMock.sol:7",
        "version": {
          "withMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a",
          "withoutMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a",
          "linkedWithoutMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "bid(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BiddingContractMock",
            "src": "contracts/mock/BiddingContractMock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BiddingContractMock",
              "label": "auctionContract",
              "type": "t_contract(FantomAuction)8374",
              "src": "contracts/mock/BiddingContractMock.sol:8"
            }
          ],
          "types": {
            "t_contract(FantomAuction)8374": {
              "label": "contract FantomAuction"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuctionMock": {
        "src": "contracts/mock/FantomAuctionMock.sol:7",
        "version": {
          "withMetadata": "7d55c898852b8b1e86d032cef7abd574ffe789a496166c8870c9ef7b97c292ea",
          "withoutMetadata": "7d55c898852b8b1e86d032cef7abd574ffe789a496166c8870c9ef7b97c292ea",
          "linkedWithoutMetadata": "7d55c898852b8b1e86d032cef7abd574ffe789a496166c8870c9ef7b97c292ea"
        },
        "inherit": [
          "FantomAuction",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "setNowOverride(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuctionMock",
              "label": "nowOverride",
              "type": "t_uint256",
              "src": "contracts/mock/FantomAuctionMock.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts/mock/MockERC20.sol:7",
        "version": {
          "withMetadata": "b73d87e4c8cacbaaea189aec044e8ddaf418db412bc65c27d4f610aa1ed782c7",
          "withoutMetadata": "b73d87e4c8cacbaaea189aec044e8ddaf418db412bc65c27d4f610aa1ed782c7",
          "linkedWithoutMetadata": "b73d87e4c8cacbaaea189aec044e8ddaf418db412bc65c27d4f610aa1ed782c7"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/mock/MockERC20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeabilityProxy": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:340",
        "version": {
          "withMetadata": "75ce8f9e6c8139b9214082e60df86ee29b7d565d21778a045d6e314517331159",
          "withoutMetadata": "75ce8f9e6c8139b9214082e60df86ee29b7d565d21778a045d6e314517331159",
          "linkedWithoutMetadata": "75ce8f9e6c8139b9214082e60df86ee29b7d565d21778a045d6e314517331159"
        },
        "inherit": [
          "UpgradeabilityProxy",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AdminUpgradeabilityProxy",
            "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:350"
          },
          {
            "kind": "delegatecall",
            "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:428"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:46",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UpgradeabilityProxy": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:264",
        "version": {
          "withMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298",
          "withoutMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298",
          "linkedWithoutMetadata": "11b39b5241974589d19bf8585f2190a0d907e5adb4be7152650fb34cb9777298"
        },
        "inherit": [
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeabilityProxy",
            "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:273"
          },
          {
            "kind": "delegatecall",
            "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:277"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyAdmin": {
        "src": "contracts/proxy/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "3305751fab7d99ff0661e547aca203a151c84f44f5d8c4da9e0b927b0467e8d6",
          "withoutMetadata": "3305751fab7d99ff0661e547aca203a151c84f44f5d8c4da9e0b927b0467e8d6",
          "linkedWithoutMetadata": "3305751fab7d99ff0661e547aca203a151c84f44f5d8c4da9e0b927b0467e8d6"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "@openzeppelin/contracts/math/SafeMath.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/introspection/ERC165.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165",
            "src": "@openzeppelin/contracts/introspection/ERC165.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC165",
              "label": "_supportedInterfaces",
              "type": "t_mapping(t_bytes4,t_bool)",
              "src": "@openzeppelin/contracts/introspection/ERC165.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "contracts/library/IERC165.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155": {
        "src": "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "allowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:21",
        "version": {
          "withMetadata": "c619b06be359c76da907e91cb7d261294d4e83a005a7c2395a5ca5913295475d",
          "withoutMetadata": "c619b06be359c76da907e91cb7d261294d4e83a005a7c2395a5ca5913295475d",
          "linkedWithoutMetadata": "c619b06be359c76da907e91cb7d261294d4e83a005a7c2395a5ca5913295475d"
        },
        "inherit": [
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address",
          "EnumerableSet",
          "EnumerableMap",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "baseURI()",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:93"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_holderTokens",
              "type": "t_mapping(t_address,t_struct(UintSet)4582_storage)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenOwners",
              "type": "t_struct(UintToAddressMap)3959_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:42"
            },
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:45"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:48"
            },
            {
              "contract": "ERC721",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:51"
            },
            {
              "contract": "ERC721",
              "label": "_baseURI",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(UintSet)4582_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UintSet)4582_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4196_storage"
                }
              ]
            },
            "t_struct(Set)4196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(UintToAddressMap)3959_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)3641_storage"
                }
              ]
            },
            "t_struct(Map)3641_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)3633_storage)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_struct(MapEntry)3633_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]"
            },
            "t_struct(MapEntry)3633_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:118",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableMap": {
        "src": "@openzeppelin/contracts/utils/EnumerableMap.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomAddressRegistry": {
        "src": "contracts/FantomAddressRegistry.sol:8",
        "version": {
          "withMetadata": "01210ef5a113adaade232d13a6ed6aa0103f2b25eafeceefe296975e29df66cb",
          "withoutMetadata": "01210ef5a113adaade232d13a6ed6aa0103f2b25eafeceefe296975e29df66cb",
          "linkedWithoutMetadata": "01210ef5a113adaade232d13a6ed6aa0103f2b25eafeceefe296975e29df66cb"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "updateArtion(address)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateNFTFactory(address)",
          "updateNFTFactoryPrivate(address)",
          "updateArtFactory(address)",
          "updateArtFactoryPrivate(address)",
          "updateTokenRegistry(address)",
          "updatePriceFeed(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAddressRegistry",
              "label": "artion",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:12"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:15"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:18"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:21"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:24"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateFactory",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:27"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "artFactory",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:30"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateArtFactory",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:33"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "tokenRegistry",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:36"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "priceFeed",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactory": {
        "src": "contracts/FantomArtFactory.sol:8",
        "version": {
          "withMetadata": "9df27e05e44575e70daa8898410ab03720347f72f29e1ec84ce8d2fdf14b534f",
          "withoutMetadata": "9df27e05e44575e70daa8898410ab03720347f72f29e1ec84ce8d2fdf14b534f",
          "linkedWithoutMetadata": "9df27e05e44575e70daa8898410ab03720347f72f29e1ec84ce8d2fdf14b534f"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactory",
            "src": "contracts/FantomArtFactory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomArtFactory.sol:14"
            },
            {
              "contract": "FantomArtFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomArtFactory.sol:17"
            },
            {
              "contract": "FantomArtFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtFactory.sol:20"
            },
            {
              "contract": "FantomArtFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtFactory.sol:23"
            },
            {
              "contract": "FantomArtFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtFactory.sol:26"
            },
            {
              "contract": "FantomArtFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomArtFactory.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactoryPrivate": {
        "src": "contracts/FantomArtFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "298a11e97a6c209f78207f6e6f2bbb1472158735ca002b411e4061af0a58c75a",
          "withoutMetadata": "298a11e97a6c209f78207f6e6f2bbb1472158735ca002b411e4061af0a58c75a",
          "linkedWithoutMetadata": "298a11e97a6c209f78207f6e6f2bbb1472158735ca002b411e4061af0a58c75a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactoryPrivate",
            "src": "contracts/FantomArtFactoryPrivate.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomArtFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomArtFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomArtFactoryPrivate.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradable": {
        "src": "contracts/FantomArtTradable.sol:22",
        "version": {
          "withMetadata": "073fe51513c158c095357630028d8a0956ecb69b5d37aef8e14b7ebd12b802cd",
          "withoutMetadata": "073fe51513c158c095357630028d8a0956ecb69b5d37aef8e14b7ebd12b802cd",
          "linkedWithoutMetadata": "073fe51513c158c095357630028d8a0956ecb69b5d37aef8e14b7ebd12b802cd"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradable",
            "src": "contracts/FantomArtTradable.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts/FantomArtTradable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradable",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts/FantomArtTradable.sol:28"
            },
            {
              "contract": "FantomArtTradable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts/FantomArtTradable.sol:31"
            },
            {
              "contract": "FantomArtTradable",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/FantomArtTradable.sol:33"
            },
            {
              "contract": "FantomArtTradable",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/FantomArtTradable.sol:34"
            },
            {
              "contract": "FantomArtTradable",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/FantomArtTradable.sol:37"
            },
            {
              "contract": "FantomArtTradable",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/FantomArtTradable.sol:39"
            },
            {
              "contract": "FantomArtTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtTradable.sol:41"
            },
            {
              "contract": "FantomArtTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtTradable.sol:43"
            },
            {
              "contract": "FantomArtTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomArtTradable.sol:45"
            },
            {
              "contract": "FantomArtTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomArtTradable.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "OwnableDelegateProxy": {
        "src": "contracts/FantomArtTradablePrivate.sol:10",
        "version": {
          "withMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "withoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "linkedWithoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyRegistry": {
        "src": "contracts/FantomArtTradablePrivate.sol:12",
        "version": {
          "withMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9",
          "withoutMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9",
          "linkedWithoutMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ProxyRegistry",
              "label": "proxies",
              "type": "t_mapping(t_address,t_contract(OwnableDelegateProxy)5826)",
              "src": "contracts/FantomArtTradablePrivate.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_contract(OwnableDelegateProxy)5826)": {
              "label": "mapping(address => contract OwnableDelegateProxy)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(OwnableDelegateProxy)5826": {
              "label": "contract OwnableDelegateProxy"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradablePrivate": {
        "src": "contracts/FantomArtTradablePrivate.sol:22",
        "version": {
          "withMetadata": "73c5ea2128ac23354b4437cd46710a957269f6a5e10d6f2eb8955d0f7811fd0b",
          "withoutMetadata": "73c5ea2128ac23354b4437cd46710a957269f6a5e10d6f2eb8955d0f7811fd0b",
          "linkedWithoutMetadata": "73c5ea2128ac23354b4437cd46710a957269f6a5e10d6f2eb8955d0f7811fd0b"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradablePrivate",
            "src": "contracts/FantomArtTradablePrivate.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts/FantomArtTradablePrivate.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts/FantomArtTradablePrivate.sol:28"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts/FantomArtTradablePrivate.sol:31"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/FantomArtTradablePrivate.sol:33"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/FantomArtTradablePrivate.sol:34"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/FantomArtTradablePrivate.sol:37"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/FantomArtTradablePrivate.sol:39"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtTradablePrivate.sol:41"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtTradablePrivate.sol:43"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomArtTradablePrivate.sol:45"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomArtTradablePrivate.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Artion": {
        "src": "contracts/FantomArtion.sol:9",
        "version": {
          "withMetadata": "0906a2a64eab674cc5697e3478fbc1983e5279f62af94e495fcfd58500fb6a8f",
          "withoutMetadata": "0906a2a64eab674cc5697e3478fbc1983e5279f62af94e495fcfd58500fb6a8f",
          "linkedWithoutMetadata": "0906a2a64eab674cc5697e3478fbc1983e5279f62af94e495fcfd58500fb6a8f"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable,uint256)",
          "mint(address,string)",
          "burn(uint256)",
          "exists(uint256)",
          "isApproved(uint256,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Artion",
            "src": "contracts/FantomArtion.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Artion",
              "label": "tokenIdPointer",
              "type": "t_uint256",
              "src": "contracts/FantomArtion.sol:26"
            },
            {
              "contract": "Artion",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/FantomArtion.sol:29"
            },
            {
              "contract": "Artion",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtion.sol:32"
            },
            {
              "contract": "Artion",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtion.sol:35"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuction": {
        "src": "contracts/FantomAuction.sol:55",
        "version": {
          "withMetadata": "b1d7876a39f761c828455415df736e7122eef51d924f4378a713036d42a59212",
          "withoutMetadata": "b1d7876a39f761c828455415df736e7122eef51d924f4378a713036d42a59212",
          "linkedWithoutMetadata": "b1d7876a39f761c828455415df736e7122eef51d924f4378a713036d42a59212"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable)",
          "createAuction(address,uint256,address,uint256,uint256,bool,uint256)",
          "placeBid(address,uint256)",
          "placeBid(address,uint256,uint256)",
          "withdrawBid(address,uint256)",
          "resultAuction(address,uint256)",
          "cancelAuction(address,uint256)",
          "toggleIsPaused()",
          "updateMinBidIncrement(uint256)",
          "updateBidWithdrawalLockTime(uint256)",
          "updateAuctionReservePrice(address,uint256,uint256)",
          "updateAuctionStartTime(address,uint256,uint256)",
          "updateAuctionEndTime(address,uint256,uint256)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "getAuction(address,uint256)",
          "getHighestBidder(address,uint256)",
          "reclaimERC20(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "minBidIncrement",
            "src": "contracts/FantomAuction.sol:156"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bidWithdrawalLockTime",
            "src": "contracts/FantomAuction.sol:159"
          },
          {
            "kind": "state-variable-assignment",
            "name": "platformFee",
            "src": "contracts/FantomAuction.sol:162"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuction",
              "label": "auctions",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6635_storage))",
              "src": "contracts/FantomAuction.sol:150"
            },
            {
              "contract": "FantomAuction",
              "label": "highestBids",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6642_storage))",
              "src": "contracts/FantomAuction.sol:153"
            },
            {
              "contract": "FantomAuction",
              "label": "minBidIncrement",
              "type": "t_uint256",
              "src": "contracts/FantomAuction.sol:156"
            },
            {
              "contract": "FantomAuction",
              "label": "bidWithdrawalLockTime",
              "type": "t_uint256",
              "src": "contracts/FantomAuction.sol:159"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomAuction.sol:162"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFeeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomAuction.sol:165"
            },
            {
              "contract": "FantomAuction",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)6442",
              "src": "contracts/FantomAuction.sol:168"
            },
            {
              "contract": "FantomAuction",
              "label": "isPaused",
              "type": "t_bool",
              "src": "contracts/FantomAuction.sol:171"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6635_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.Auction))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(Auction)6635_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.Auction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Auction)6635_storage": {
              "label": "struct FantomAuction.Auction",
              "members": [
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "minBid",
                  "type": "t_uint256"
                },
                {
                  "label": "reservePrice",
                  "type": "t_uint256"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256"
                },
                {
                  "label": "resulted",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6642_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.HighestBid))"
            },
            "t_mapping(t_uint256,t_struct(HighestBid)6642_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.HighestBid)"
            },
            "t_struct(HighestBid)6642_storage": {
              "label": "struct FantomAuction.HighestBid",
              "members": [
                {
                  "label": "bidder",
                  "type": "t_address_payable"
                },
                {
                  "label": "bid",
                  "type": "t_uint256"
                },
                {
                  "label": "lastBidTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)6442": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAddressRegistry": {
        "src": "contracts/FantomPriceFeed.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenRegistry()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomBundleMarketplace": {
        "src": "contracts/FantomMarketplace.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomMarketplace": {
        "src": "contracts/FantomBundleMarketplace.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,address,address)",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomTokenRegistry": {
        "src": "contracts/FantomPriceFeed.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enabled(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomBundleMarketplace": {
        "src": "contracts/FantomBundleMarketplace.sol:39",
        "version": {
          "withMetadata": "29c855f5efc12cfad575f1a5a2d63c8a5dc755cbef6dca449c8d74b30fa68a1e",
          "withoutMetadata": "29c855f5efc12cfad575f1a5a2d63c8a5dc755cbef6dca449c8d74b30fa68a1e",
          "linkedWithoutMetadata": "29c855f5efc12cfad575f1a5a2d63c8a5dc755cbef6dca449c8d74b30fa68a1e"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20",
          "EnumerableSet"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "getListing(address,string)",
          "listItem(string,address[],uint256[],uint256[],address,uint256,uint256)",
          "cancelListing(string)",
          "updateListing(string,address,uint256)",
          "buyItem(string)",
          "buyItem(string,address)",
          "createOffer(string,address,uint256,uint256)",
          "cancelOffer(string)",
          "acceptOffer(string,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomBundleMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8539_storage))",
              "src": "contracts/FantomBundleMarketplace.sol:106"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "owners",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/FantomBundleMarketplace.sol:109"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIdsPerItem",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4376_storage))",
              "src": "contracts/FantomBundleMarketplace.sol:111"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "nftIndexes",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))",
              "src": "contracts/FantomBundleMarketplace.sol:113"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIds",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "src": "contracts/FantomBundleMarketplace.sol:115"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "offers",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8546_storage))",
              "src": "contracts/FantomBundleMarketplace.sol:118"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomBundleMarketplace.sol:121"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomBundleMarketplace.sol:124"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)8402",
              "src": "contracts/FantomBundleMarketplace.sol:127"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8539_storage))": {
              "label": "mapping(address => mapping(bytes32 => struct FantomBundleMarketplace.Listing))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_struct(Listing)8539_storage)": {
              "label": "mapping(bytes32 => struct FantomBundleMarketplace.Listing)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Listing)8539_storage": {
              "label": "struct FantomBundleMarketplace.Listing",
              "members": [
                {
                  "label": "nfts",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "tokenIds",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "quantities",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4376_storage))": {
              "label": "mapping(address => mapping(uint256 => struct EnumerableSet.Bytes32Set))"
            },
            "t_mapping(t_uint256,t_struct(Bytes32Set)4376_storage)": {
              "label": "mapping(uint256 => struct EnumerableSet.Bytes32Set)"
            },
            "t_struct(Bytes32Set)4376_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4196_storage"
                }
              ]
            },
            "t_struct(Set)4196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
              "label": "mapping(bytes32 => mapping(address => mapping(uint256 => uint256)))"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8546_storage))": {
              "label": "mapping(bytes32 => mapping(address => struct FantomBundleMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)8546_storage)": {
              "label": "mapping(address => struct FantomBundleMarketplace.Offer)"
            },
            "t_struct(Offer)8546_storage": {
              "label": "struct FantomBundleMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)8402": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomMarketplace": {
        "src": "contracts/FantomMarketplace.sol:71",
        "version": {
          "withMetadata": "ec5a89cc91784742f085e45caabc13c7327a2c9c8d2846f9077690f63e45a3a1",
          "withoutMetadata": "ec5a89cc91784742f085e45caabc13c7327a2c9c8d2846f9077690f63e45a3a1",
          "linkedWithoutMetadata": "ec5a89cc91784742f085e45caabc13c7327a2c9c8d2846f9077690f63e45a3a1"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable,uint16)",
          "listItem(address,uint256,uint256,address,uint256,uint256)",
          "cancelListing(address,uint256)",
          "updateListing(address,uint256,address,uint256)",
          "buyItem(address,uint256,address,address)",
          "createOffer(address,uint256,address,uint256,uint256,uint256)",
          "cancelOffer(address,uint256)",
          "acceptOffer(address,uint256,address)",
          "registerRoyalty(address,uint256,uint16)",
          "registerCollectionRoyalty(address,address,uint16,address)",
          "getPrice(address)",
          "updatePlatformFee(uint16)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomMarketplace",
              "label": "minters",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
              "src": "contracts/FantomMarketplace.sol:151"
            },
            {
              "contract": "FantomMarketplace",
              "label": "royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint16))",
              "src": "contracts/FantomMarketplace.sol:154"
            },
            {
              "contract": "FantomMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10743_storage)))",
              "src": "contracts/FantomMarketplace.sol:157"
            },
            {
              "contract": "FantomMarketplace",
              "label": "offers",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10752_storage)))",
              "src": "contracts/FantomMarketplace.sol:161"
            },
            {
              "contract": "FantomMarketplace",
              "label": "platformFee",
              "type": "t_uint16",
              "src": "contracts/FantomMarketplace.sol:165"
            },
            {
              "contract": "FantomMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomMarketplace.sol:168"
            },
            {
              "contract": "FantomMarketplace",
              "label": "collectionRoyalties",
              "type": "t_mapping(t_address,t_struct(CollectionRoyalty)10759_storage)",
              "src": "contracts/FantomMarketplace.sol:171"
            },
            {
              "contract": "FantomMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)10573",
              "src": "contracts/FantomMarketplace.sol:174"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
              "label": "mapping(address => mapping(uint256 => address))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint16))": {
              "label": "mapping(address => mapping(uint256 => uint16))"
            },
            "t_mapping(t_uint256,t_uint16)": {
              "label": "mapping(uint256 => uint16)"
            },
            "t_uint16": {
              "label": "uint16"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10743_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Listing)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10743_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Listing))"
            },
            "t_mapping(t_address,t_struct(Listing)10743_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Listing)"
            },
            "t_struct(Listing)10743_storage": {
              "label": "struct FantomMarketplace.Listing",
              "members": [
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10752_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Offer)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10752_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)10752_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Offer)"
            },
            "t_struct(Offer)10752_storage": {
              "label": "struct FantomMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_struct(CollectionRoyalty)10759_storage)": {
              "label": "mapping(address => struct FantomMarketplace.CollectionRoyalty)"
            },
            "t_struct(CollectionRoyalty)10759_storage": {
              "label": "struct FantomMarketplace.CollectionRoyalty",
              "members": [
                {
                  "label": "royalty",
                  "type": "t_uint16"
                },
                {
                  "label": "creator",
                  "type": "t_address"
                },
                {
                  "label": "feeRecipient",
                  "type": "t_address"
                }
              ]
            },
            "t_contract(IFantomAddressRegistry)10573": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAuction": {
        "src": "contracts/FantomMarketplace.sol:35",
        "inherit": [],
        "libraries": [],
        "methods": [
          "auctions(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomNFTFactory": {
        "src": "contracts/FantomMarketplace.sol:57",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exists(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomPriceFeed": {
        "src": "contracts/FantomMarketplace.sol:65",
        "inherit": [],
        "libraries": [],
        "methods": [
          "wFTM()",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactory": {
        "src": "contracts/FantomNFTFactory.sol:8",
        "version": {
          "withMetadata": "17ef76723026f4b788a995d0124f8a8492c2dfe57584d502edb702429c81bc39",
          "withoutMetadata": "17ef76723026f4b788a995d0124f8a8492c2dfe57584d502edb702429c81bc39",
          "linkedWithoutMetadata": "17ef76723026f4b788a995d0124f8a8492c2dfe57584d502edb702429c81bc39"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactory",
            "src": "contracts/FantomNFTFactory.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactory",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomNFTFactory.sol:14"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTFactory.sol:17"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTFactory.sol:20"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTFactory.sol:23"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTFactory.sol:26"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomNFTFactory.sol:29"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomNFTFactory.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactoryPrivate": {
        "src": "contracts/FantomNFTFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "4f4729172eb48c9b6893ee2cd3ccd8b0dfd21e910625f8334d8e175dd52f68d9",
          "withoutMetadata": "4f4729172eb48c9b6893ee2cd3ccd8b0dfd21e910625f8334d8e175dd52f68d9",
          "linkedWithoutMetadata": "4f4729172eb48c9b6893ee2cd3ccd8b0dfd21e910625f8334d8e175dd52f68d9"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactoryPrivate",
            "src": "contracts/FantomNFTFactoryPrivate.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomNFTFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomNFTFactoryPrivate.sol:29"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomNFTFactoryPrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradable": {
        "src": "contracts/FantomNFTTradable.sol:12",
        "version": {
          "withMetadata": "b548345b464c1226826ee298ea9e7aec75c11de1702496f8ae977a40d0d4ddfc",
          "withoutMetadata": "b548345b464c1226826ee298ea9e7aec75c11de1702496f8ae977a40d0d4ddfc",
          "linkedWithoutMetadata": "b548345b464c1226826ee298ea9e7aec75c11de1702496f8ae977a40d0d4ddfc"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradable",
            "src": "contracts/FantomNFTTradable.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts/FantomNFTTradable.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradable",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomNFTTradable.sol:27"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTTradable.sol:28"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTTradable.sol:29"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts/FantomNFTTradable.sol:30"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTTradable.sol:33"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomNFTTradable.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradablePrivate": {
        "src": "contracts/FantomNFTTradablePrivate.sol:12",
        "version": {
          "withMetadata": "9195fbad1a671ba81fa3dbeda90a1d2b33d90780263738fea126802d5353c000",
          "withoutMetadata": "9195fbad1a671ba81fa3dbeda90a1d2b33d90780263738fea126802d5353c000",
          "linkedWithoutMetadata": "9195fbad1a671ba81fa3dbeda90a1d2b33d90780263738fea126802d5353c000"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradablePrivate",
            "src": "contracts/FantomNFTTradablePrivate.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts/FantomNFTTradablePrivate.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomNFTTradablePrivate.sol:27"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTTradablePrivate.sol:28"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTTradablePrivate.sol:29"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts/FantomNFTTradablePrivate.sol:30"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTTradablePrivate.sol:33"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomNFTTradablePrivate.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomPriceFeed": {
        "src": "contracts/FantomPriceFeed.sol:21",
        "version": {
          "withMetadata": "c3486acea602badcee713e0d4a167bc6e4167f4ebe58ea0974294fe748fcd396",
          "withoutMetadata": "c3486acea602badcee713e0d4a167bc6e4167f4ebe58ea0974294fe748fcd396",
          "linkedWithoutMetadata": "c3486acea602badcee713e0d4a167bc6e4167f4ebe58ea0974294fe748fcd396"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerOracle(address,address)",
          "updateOracle(address,address)",
          "getPrice(address)",
          "updateAddressRegistry(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomPriceFeed",
            "src": "contracts/FantomPriceFeed.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomPriceFeed",
              "label": "oracles",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FantomPriceFeed.sol:23"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "addressRegistry",
              "type": "t_address",
              "src": "contracts/FantomPriceFeed.sol:26"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "wFTM",
              "type": "t_address",
              "src": "contracts/FantomPriceFeed.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IOracle": {
        "src": "contracts/FantomPriceFeed.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestAnswer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomTokenRegistry": {
        "src": "contracts/FantomTokenRegistry.sol:7",
        "version": {
          "withMetadata": "15e092d3ba18f8b0b09cf3a08319d468dc9c698c094acc12a625b236ffdfe0d2",
          "withoutMetadata": "15e092d3ba18f8b0b09cf3a08319d468dc9c698c094acc12a625b236ffdfe0d2",
          "linkedWithoutMetadata": "15e092d3ba18f8b0b09cf3a08319d468dc9c698c094acc12a625b236ffdfe0d2"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "add(address)",
          "remove(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomTokenRegistry",
              "label": "enabled",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomTokenRegistry.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155": {
        "src": "contracts/library/ERC1155.sol:11",
        "version": {
          "withMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71",
          "withoutMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71",
          "linkedWithoutMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71"
        },
        "inherit": [
          "IERC165"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155",
              "label": "balances",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/library/ERC1155.sol:25"
            },
            {
              "contract": "ERC1155",
              "label": "operators",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts/library/ERC1155.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155Metadata": {
        "src": "contracts/library/ERC1155Metadata.sol:9",
        "version": {
          "withMetadata": "9f4ac3045c6d47f7902357b737f9b36eb6d74a6144b8f5ff47ba6041be851533",
          "withoutMetadata": "9f4ac3045c6d47f7902357b737f9b36eb6d74a6144b8f5ff47ba6041be851533",
          "linkedWithoutMetadata": "9f4ac3045c6d47f7902357b737f9b36eb6d74a6144b8f5ff47ba6041be851533"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155Metadata",
              "label": "baseMetadataURI",
              "type": "t_string_storage",
              "src": "contracts/library/ERC1155Metadata.sol:12"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155MintBurn": {
        "src": "contracts/library/ERC1155MintBurn.sol:9",
        "version": {
          "withMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71",
          "withoutMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71",
          "linkedWithoutMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71"
        },
        "inherit": [
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155TokenReceiver": {
        "src": "contracts/library/IERC1155TokenReceiver.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BiddingContractMock": {
        "src": "contracts/mock/BiddingContractMock.sol:7",
        "version": {
          "withMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a",
          "withoutMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a",
          "linkedWithoutMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "bid(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BiddingContractMock",
            "src": "contracts/mock/BiddingContractMock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BiddingContractMock",
              "label": "auctionContract",
              "type": "t_contract(FantomAuction)8374",
              "src": "contracts/mock/BiddingContractMock.sol:8"
            }
          ],
          "types": {
            "t_contract(FantomAuction)8374": {
              "label": "contract FantomAuction"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuctionMock": {
        "src": "contracts/mock/FantomAuctionMock.sol:7",
        "version": {
          "withMetadata": "7d55c898852b8b1e86d032cef7abd574ffe789a496166c8870c9ef7b97c292ea",
          "withoutMetadata": "7d55c898852b8b1e86d032cef7abd574ffe789a496166c8870c9ef7b97c292ea",
          "linkedWithoutMetadata": "7d55c898852b8b1e86d032cef7abd574ffe789a496166c8870c9ef7b97c292ea"
        },
        "inherit": [
          "FantomAuction",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "setNowOverride(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuctionMock",
              "label": "nowOverride",
              "type": "t_uint256",
              "src": "contracts/mock/FantomAuctionMock.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts/mock/MockERC20.sol:7",
        "version": {
          "withMetadata": "b73d87e4c8cacbaaea189aec044e8ddaf418db412bc65c27d4f610aa1ed782c7",
          "withoutMetadata": "b73d87e4c8cacbaaea189aec044e8ddaf418db412bc65c27d4f610aa1ed782c7",
          "linkedWithoutMetadata": "b73d87e4c8cacbaaea189aec044e8ddaf418db412bc65c27d4f610aa1ed782c7"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/mock/MockERC20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeabilityProxy": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:340",
        "version": {
          "withMetadata": "6184a0af4a56fb938a6cc1f6462f82a3147609974e9293133dc6422daa64b07e",
          "withoutMetadata": "6184a0af4a56fb938a6cc1f6462f82a3147609974e9293133dc6422daa64b07e",
          "linkedWithoutMetadata": "6184a0af4a56fb938a6cc1f6462f82a3147609974e9293133dc6422daa64b07e"
        },
        "inherit": [
          "UpgradeabilityProxy",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AdminUpgradeabilityProxy",
            "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:350"
          },
          {
            "kind": "delegatecall",
            "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:428"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:46",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UpgradeabilityProxy": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:264",
        "version": {
          "withMetadata": "bc5e99dea4fadec8c7c638d90ce7a1426a108080773e4f267388941123b4e42e",
          "withoutMetadata": "bc5e99dea4fadec8c7c638d90ce7a1426a108080773e4f267388941123b4e42e",
          "linkedWithoutMetadata": "bc5e99dea4fadec8c7c638d90ce7a1426a108080773e4f267388941123b4e42e"
        },
        "inherit": [
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeabilityProxy",
            "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:273"
          },
          {
            "kind": "delegatecall",
            "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:277"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyAdmin": {
        "src": "contracts/proxy/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "3305751fab7d99ff0661e547aca203a151c84f44f5d8c4da9e0b927b0467e8d6",
          "withoutMetadata": "3305751fab7d99ff0661e547aca203a151c84f44f5d8c4da9e0b927b0467e8d6",
          "linkedWithoutMetadata": "3305751fab7d99ff0661e547aca203a151c84f44f5d8c4da9e0b927b0467e8d6"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "@openzeppelin/contracts/math/SafeMath.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/introspection/ERC165.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165",
            "src": "@openzeppelin/contracts/introspection/ERC165.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC165",
              "label": "_supportedInterfaces",
              "type": "t_mapping(t_bytes4,t_bool)",
              "src": "@openzeppelin/contracts/introspection/ERC165.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "contracts/library/IERC165.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155": {
        "src": "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "allowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:21",
        "version": {
          "withMetadata": "c619b06be359c76da907e91cb7d261294d4e83a005a7c2395a5ca5913295475d",
          "withoutMetadata": "c619b06be359c76da907e91cb7d261294d4e83a005a7c2395a5ca5913295475d",
          "linkedWithoutMetadata": "c619b06be359c76da907e91cb7d261294d4e83a005a7c2395a5ca5913295475d"
        },
        "inherit": [
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address",
          "EnumerableSet",
          "EnumerableMap",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "baseURI()",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:93"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_holderTokens",
              "type": "t_mapping(t_address,t_struct(UintSet)4582_storage)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenOwners",
              "type": "t_struct(UintToAddressMap)3959_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:42"
            },
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:45"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:48"
            },
            {
              "contract": "ERC721",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:51"
            },
            {
              "contract": "ERC721",
              "label": "_baseURI",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(UintSet)4582_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UintSet)4582_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4196_storage"
                }
              ]
            },
            "t_struct(Set)4196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(UintToAddressMap)3959_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)3641_storage"
                }
              ]
            },
            "t_struct(Map)3641_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)3633_storage)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_struct(MapEntry)3633_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]"
            },
            "t_struct(MapEntry)3633_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:118",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableMap": {
        "src": "@openzeppelin/contracts/utils/EnumerableMap.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomAddressRegistry": {
        "src": "contracts/FantomAddressRegistry.sol:8",
        "version": {
          "withMetadata": "01210ef5a113adaade232d13a6ed6aa0103f2b25eafeceefe296975e29df66cb",
          "withoutMetadata": "01210ef5a113adaade232d13a6ed6aa0103f2b25eafeceefe296975e29df66cb",
          "linkedWithoutMetadata": "01210ef5a113adaade232d13a6ed6aa0103f2b25eafeceefe296975e29df66cb"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "updateArtion(address)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateNFTFactory(address)",
          "updateNFTFactoryPrivate(address)",
          "updateArtFactory(address)",
          "updateArtFactoryPrivate(address)",
          "updateTokenRegistry(address)",
          "updatePriceFeed(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAddressRegistry",
              "label": "artion",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:12"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:15"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:18"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:21"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:24"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateFactory",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:27"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "artFactory",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:30"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateArtFactory",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:33"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "tokenRegistry",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:36"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "priceFeed",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactory": {
        "src": "contracts/FantomArtFactory.sol:8",
        "version": {
          "withMetadata": "9df27e05e44575e70daa8898410ab03720347f72f29e1ec84ce8d2fdf14b534f",
          "withoutMetadata": "9df27e05e44575e70daa8898410ab03720347f72f29e1ec84ce8d2fdf14b534f",
          "linkedWithoutMetadata": "9df27e05e44575e70daa8898410ab03720347f72f29e1ec84ce8d2fdf14b534f"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactory",
            "src": "contracts/FantomArtFactory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomArtFactory.sol:14"
            },
            {
              "contract": "FantomArtFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomArtFactory.sol:17"
            },
            {
              "contract": "FantomArtFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtFactory.sol:20"
            },
            {
              "contract": "FantomArtFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtFactory.sol:23"
            },
            {
              "contract": "FantomArtFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtFactory.sol:26"
            },
            {
              "contract": "FantomArtFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomArtFactory.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactoryPrivate": {
        "src": "contracts/FantomArtFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "298a11e97a6c209f78207f6e6f2bbb1472158735ca002b411e4061af0a58c75a",
          "withoutMetadata": "298a11e97a6c209f78207f6e6f2bbb1472158735ca002b411e4061af0a58c75a",
          "linkedWithoutMetadata": "298a11e97a6c209f78207f6e6f2bbb1472158735ca002b411e4061af0a58c75a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactoryPrivate",
            "src": "contracts/FantomArtFactoryPrivate.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomArtFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomArtFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomArtFactoryPrivate.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradable": {
        "src": "contracts/FantomArtTradable.sol:22",
        "version": {
          "withMetadata": "073fe51513c158c095357630028d8a0956ecb69b5d37aef8e14b7ebd12b802cd",
          "withoutMetadata": "073fe51513c158c095357630028d8a0956ecb69b5d37aef8e14b7ebd12b802cd",
          "linkedWithoutMetadata": "073fe51513c158c095357630028d8a0956ecb69b5d37aef8e14b7ebd12b802cd"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradable",
            "src": "contracts/FantomArtTradable.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts/FantomArtTradable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradable",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts/FantomArtTradable.sol:28"
            },
            {
              "contract": "FantomArtTradable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts/FantomArtTradable.sol:31"
            },
            {
              "contract": "FantomArtTradable",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/FantomArtTradable.sol:33"
            },
            {
              "contract": "FantomArtTradable",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/FantomArtTradable.sol:34"
            },
            {
              "contract": "FantomArtTradable",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/FantomArtTradable.sol:37"
            },
            {
              "contract": "FantomArtTradable",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/FantomArtTradable.sol:39"
            },
            {
              "contract": "FantomArtTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtTradable.sol:41"
            },
            {
              "contract": "FantomArtTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtTradable.sol:43"
            },
            {
              "contract": "FantomArtTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomArtTradable.sol:45"
            },
            {
              "contract": "FantomArtTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomArtTradable.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "OwnableDelegateProxy": {
        "src": "contracts/FantomArtTradablePrivate.sol:10",
        "version": {
          "withMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "withoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "linkedWithoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyRegistry": {
        "src": "contracts/FantomArtTradablePrivate.sol:12",
        "version": {
          "withMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9",
          "withoutMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9",
          "linkedWithoutMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ProxyRegistry",
              "label": "proxies",
              "type": "t_mapping(t_address,t_contract(OwnableDelegateProxy)5826)",
              "src": "contracts/FantomArtTradablePrivate.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_contract(OwnableDelegateProxy)5826)": {
              "label": "mapping(address => contract OwnableDelegateProxy)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(OwnableDelegateProxy)5826": {
              "label": "contract OwnableDelegateProxy"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradablePrivate": {
        "src": "contracts/FantomArtTradablePrivate.sol:22",
        "version": {
          "withMetadata": "73c5ea2128ac23354b4437cd46710a957269f6a5e10d6f2eb8955d0f7811fd0b",
          "withoutMetadata": "73c5ea2128ac23354b4437cd46710a957269f6a5e10d6f2eb8955d0f7811fd0b",
          "linkedWithoutMetadata": "73c5ea2128ac23354b4437cd46710a957269f6a5e10d6f2eb8955d0f7811fd0b"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradablePrivate",
            "src": "contracts/FantomArtTradablePrivate.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts/FantomArtTradablePrivate.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts/FantomArtTradablePrivate.sol:28"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts/FantomArtTradablePrivate.sol:31"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/FantomArtTradablePrivate.sol:33"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/FantomArtTradablePrivate.sol:34"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/FantomArtTradablePrivate.sol:37"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/FantomArtTradablePrivate.sol:39"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtTradablePrivate.sol:41"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtTradablePrivate.sol:43"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomArtTradablePrivate.sol:45"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomArtTradablePrivate.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Artion": {
        "src": "contracts/FantomArtion.sol:9",
        "version": {
          "withMetadata": "0906a2a64eab674cc5697e3478fbc1983e5279f62af94e495fcfd58500fb6a8f",
          "withoutMetadata": "0906a2a64eab674cc5697e3478fbc1983e5279f62af94e495fcfd58500fb6a8f",
          "linkedWithoutMetadata": "0906a2a64eab674cc5697e3478fbc1983e5279f62af94e495fcfd58500fb6a8f"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable,uint256)",
          "mint(address,string)",
          "burn(uint256)",
          "exists(uint256)",
          "isApproved(uint256,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Artion",
            "src": "contracts/FantomArtion.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Artion",
              "label": "tokenIdPointer",
              "type": "t_uint256",
              "src": "contracts/FantomArtion.sol:26"
            },
            {
              "contract": "Artion",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/FantomArtion.sol:29"
            },
            {
              "contract": "Artion",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtion.sol:32"
            },
            {
              "contract": "Artion",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtion.sol:35"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuction": {
        "src": "contracts/FantomAuction.sol:55",
        "version": {
          "withMetadata": "b1d7876a39f761c828455415df736e7122eef51d924f4378a713036d42a59212",
          "withoutMetadata": "b1d7876a39f761c828455415df736e7122eef51d924f4378a713036d42a59212",
          "linkedWithoutMetadata": "b1d7876a39f761c828455415df736e7122eef51d924f4378a713036d42a59212"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable)",
          "createAuction(address,uint256,address,uint256,uint256,bool,uint256)",
          "placeBid(address,uint256)",
          "placeBid(address,uint256,uint256)",
          "withdrawBid(address,uint256)",
          "resultAuction(address,uint256)",
          "cancelAuction(address,uint256)",
          "toggleIsPaused()",
          "updateMinBidIncrement(uint256)",
          "updateBidWithdrawalLockTime(uint256)",
          "updateAuctionReservePrice(address,uint256,uint256)",
          "updateAuctionStartTime(address,uint256,uint256)",
          "updateAuctionEndTime(address,uint256,uint256)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "getAuction(address,uint256)",
          "getHighestBidder(address,uint256)",
          "reclaimERC20(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "minBidIncrement",
            "src": "contracts/FantomAuction.sol:156"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bidWithdrawalLockTime",
            "src": "contracts/FantomAuction.sol:159"
          },
          {
            "kind": "state-variable-assignment",
            "name": "platformFee",
            "src": "contracts/FantomAuction.sol:162"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuction",
              "label": "auctions",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6635_storage))",
              "src": "contracts/FantomAuction.sol:150"
            },
            {
              "contract": "FantomAuction",
              "label": "highestBids",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6642_storage))",
              "src": "contracts/FantomAuction.sol:153"
            },
            {
              "contract": "FantomAuction",
              "label": "minBidIncrement",
              "type": "t_uint256",
              "src": "contracts/FantomAuction.sol:156"
            },
            {
              "contract": "FantomAuction",
              "label": "bidWithdrawalLockTime",
              "type": "t_uint256",
              "src": "contracts/FantomAuction.sol:159"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomAuction.sol:162"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFeeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomAuction.sol:165"
            },
            {
              "contract": "FantomAuction",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)6442",
              "src": "contracts/FantomAuction.sol:168"
            },
            {
              "contract": "FantomAuction",
              "label": "isPaused",
              "type": "t_bool",
              "src": "contracts/FantomAuction.sol:171"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6635_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.Auction))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(Auction)6635_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.Auction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Auction)6635_storage": {
              "label": "struct FantomAuction.Auction",
              "members": [
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "minBid",
                  "type": "t_uint256"
                },
                {
                  "label": "reservePrice",
                  "type": "t_uint256"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256"
                },
                {
                  "label": "resulted",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6642_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.HighestBid))"
            },
            "t_mapping(t_uint256,t_struct(HighestBid)6642_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.HighestBid)"
            },
            "t_struct(HighestBid)6642_storage": {
              "label": "struct FantomAuction.HighestBid",
              "members": [
                {
                  "label": "bidder",
                  "type": "t_address_payable"
                },
                {
                  "label": "bid",
                  "type": "t_uint256"
                },
                {
                  "label": "lastBidTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)6442": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAddressRegistry": {
        "src": "contracts/FantomPriceFeed.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenRegistry()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomBundleMarketplace": {
        "src": "contracts/FantomMarketplace.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomMarketplace": {
        "src": "contracts/FantomBundleMarketplace.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,address,address)",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomTokenRegistry": {
        "src": "contracts/FantomPriceFeed.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enabled(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomBundleMarketplace": {
        "src": "contracts/FantomBundleMarketplace.sol:39",
        "version": {
          "withMetadata": "29c855f5efc12cfad575f1a5a2d63c8a5dc755cbef6dca449c8d74b30fa68a1e",
          "withoutMetadata": "29c855f5efc12cfad575f1a5a2d63c8a5dc755cbef6dca449c8d74b30fa68a1e",
          "linkedWithoutMetadata": "29c855f5efc12cfad575f1a5a2d63c8a5dc755cbef6dca449c8d74b30fa68a1e"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20",
          "EnumerableSet"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "getListing(address,string)",
          "listItem(string,address[],uint256[],uint256[],address,uint256,uint256)",
          "cancelListing(string)",
          "updateListing(string,address,uint256)",
          "buyItem(string)",
          "buyItem(string,address)",
          "createOffer(string,address,uint256,uint256)",
          "cancelOffer(string)",
          "acceptOffer(string,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomBundleMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8539_storage))",
              "src": "contracts/FantomBundleMarketplace.sol:106"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "owners",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/FantomBundleMarketplace.sol:109"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIdsPerItem",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4376_storage))",
              "src": "contracts/FantomBundleMarketplace.sol:111"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "nftIndexes",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))",
              "src": "contracts/FantomBundleMarketplace.sol:113"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIds",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "src": "contracts/FantomBundleMarketplace.sol:115"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "offers",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8546_storage))",
              "src": "contracts/FantomBundleMarketplace.sol:118"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomBundleMarketplace.sol:121"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomBundleMarketplace.sol:124"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)8402",
              "src": "contracts/FantomBundleMarketplace.sol:127"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8539_storage))": {
              "label": "mapping(address => mapping(bytes32 => struct FantomBundleMarketplace.Listing))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_struct(Listing)8539_storage)": {
              "label": "mapping(bytes32 => struct FantomBundleMarketplace.Listing)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Listing)8539_storage": {
              "label": "struct FantomBundleMarketplace.Listing",
              "members": [
                {
                  "label": "nfts",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "tokenIds",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "quantities",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4376_storage))": {
              "label": "mapping(address => mapping(uint256 => struct EnumerableSet.Bytes32Set))"
            },
            "t_mapping(t_uint256,t_struct(Bytes32Set)4376_storage)": {
              "label": "mapping(uint256 => struct EnumerableSet.Bytes32Set)"
            },
            "t_struct(Bytes32Set)4376_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4196_storage"
                }
              ]
            },
            "t_struct(Set)4196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
              "label": "mapping(bytes32 => mapping(address => mapping(uint256 => uint256)))"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8546_storage))": {
              "label": "mapping(bytes32 => mapping(address => struct FantomBundleMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)8546_storage)": {
              "label": "mapping(address => struct FantomBundleMarketplace.Offer)"
            },
            "t_struct(Offer)8546_storage": {
              "label": "struct FantomBundleMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)8402": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomMarketplace": {
        "src": "contracts/FantomMarketplace.sol:71",
        "version": {
          "withMetadata": "ec5a89cc91784742f085e45caabc13c7327a2c9c8d2846f9077690f63e45a3a1",
          "withoutMetadata": "ec5a89cc91784742f085e45caabc13c7327a2c9c8d2846f9077690f63e45a3a1",
          "linkedWithoutMetadata": "ec5a89cc91784742f085e45caabc13c7327a2c9c8d2846f9077690f63e45a3a1"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable,uint16)",
          "listItem(address,uint256,uint256,address,uint256,uint256)",
          "cancelListing(address,uint256)",
          "updateListing(address,uint256,address,uint256)",
          "buyItem(address,uint256,address,address)",
          "createOffer(address,uint256,address,uint256,uint256,uint256)",
          "cancelOffer(address,uint256)",
          "acceptOffer(address,uint256,address)",
          "registerRoyalty(address,uint256,uint16)",
          "registerCollectionRoyalty(address,address,uint16,address)",
          "getPrice(address)",
          "updatePlatformFee(uint16)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomMarketplace",
              "label": "minters",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
              "src": "contracts/FantomMarketplace.sol:151"
            },
            {
              "contract": "FantomMarketplace",
              "label": "royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint16))",
              "src": "contracts/FantomMarketplace.sol:154"
            },
            {
              "contract": "FantomMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10743_storage)))",
              "src": "contracts/FantomMarketplace.sol:157"
            },
            {
              "contract": "FantomMarketplace",
              "label": "offers",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10752_storage)))",
              "src": "contracts/FantomMarketplace.sol:161"
            },
            {
              "contract": "FantomMarketplace",
              "label": "platformFee",
              "type": "t_uint16",
              "src": "contracts/FantomMarketplace.sol:165"
            },
            {
              "contract": "FantomMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomMarketplace.sol:168"
            },
            {
              "contract": "FantomMarketplace",
              "label": "collectionRoyalties",
              "type": "t_mapping(t_address,t_struct(CollectionRoyalty)10759_storage)",
              "src": "contracts/FantomMarketplace.sol:171"
            },
            {
              "contract": "FantomMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)10573",
              "src": "contracts/FantomMarketplace.sol:174"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
              "label": "mapping(address => mapping(uint256 => address))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint16))": {
              "label": "mapping(address => mapping(uint256 => uint16))"
            },
            "t_mapping(t_uint256,t_uint16)": {
              "label": "mapping(uint256 => uint16)"
            },
            "t_uint16": {
              "label": "uint16"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10743_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Listing)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10743_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Listing))"
            },
            "t_mapping(t_address,t_struct(Listing)10743_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Listing)"
            },
            "t_struct(Listing)10743_storage": {
              "label": "struct FantomMarketplace.Listing",
              "members": [
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10752_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Offer)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10752_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)10752_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Offer)"
            },
            "t_struct(Offer)10752_storage": {
              "label": "struct FantomMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_struct(CollectionRoyalty)10759_storage)": {
              "label": "mapping(address => struct FantomMarketplace.CollectionRoyalty)"
            },
            "t_struct(CollectionRoyalty)10759_storage": {
              "label": "struct FantomMarketplace.CollectionRoyalty",
              "members": [
                {
                  "label": "royalty",
                  "type": "t_uint16"
                },
                {
                  "label": "creator",
                  "type": "t_address"
                },
                {
                  "label": "feeRecipient",
                  "type": "t_address"
                }
              ]
            },
            "t_contract(IFantomAddressRegistry)10573": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAuction": {
        "src": "contracts/FantomMarketplace.sol:35",
        "inherit": [],
        "libraries": [],
        "methods": [
          "auctions(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomNFTFactory": {
        "src": "contracts/FantomMarketplace.sol:57",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exists(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomPriceFeed": {
        "src": "contracts/FantomMarketplace.sol:65",
        "inherit": [],
        "libraries": [],
        "methods": [
          "wFTM()",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactory": {
        "src": "contracts/FantomNFTFactory.sol:8",
        "version": {
          "withMetadata": "17ef76723026f4b788a995d0124f8a8492c2dfe57584d502edb702429c81bc39",
          "withoutMetadata": "17ef76723026f4b788a995d0124f8a8492c2dfe57584d502edb702429c81bc39",
          "linkedWithoutMetadata": "17ef76723026f4b788a995d0124f8a8492c2dfe57584d502edb702429c81bc39"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactory",
            "src": "contracts/FantomNFTFactory.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactory",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomNFTFactory.sol:14"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTFactory.sol:17"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTFactory.sol:20"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTFactory.sol:23"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTFactory.sol:26"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomNFTFactory.sol:29"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomNFTFactory.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactoryPrivate": {
        "src": "contracts/FantomNFTFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "4f4729172eb48c9b6893ee2cd3ccd8b0dfd21e910625f8334d8e175dd52f68d9",
          "withoutMetadata": "4f4729172eb48c9b6893ee2cd3ccd8b0dfd21e910625f8334d8e175dd52f68d9",
          "linkedWithoutMetadata": "4f4729172eb48c9b6893ee2cd3ccd8b0dfd21e910625f8334d8e175dd52f68d9"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactoryPrivate",
            "src": "contracts/FantomNFTFactoryPrivate.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomNFTFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomNFTFactoryPrivate.sol:29"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomNFTFactoryPrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradable": {
        "src": "contracts/FantomNFTTradable.sol:12",
        "version": {
          "withMetadata": "b548345b464c1226826ee298ea9e7aec75c11de1702496f8ae977a40d0d4ddfc",
          "withoutMetadata": "b548345b464c1226826ee298ea9e7aec75c11de1702496f8ae977a40d0d4ddfc",
          "linkedWithoutMetadata": "b548345b464c1226826ee298ea9e7aec75c11de1702496f8ae977a40d0d4ddfc"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradable",
            "src": "contracts/FantomNFTTradable.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts/FantomNFTTradable.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradable",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomNFTTradable.sol:27"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTTradable.sol:28"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTTradable.sol:29"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts/FantomNFTTradable.sol:30"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTTradable.sol:33"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomNFTTradable.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradablePrivate": {
        "src": "contracts/FantomNFTTradablePrivate.sol:12",
        "version": {
          "withMetadata": "9195fbad1a671ba81fa3dbeda90a1d2b33d90780263738fea126802d5353c000",
          "withoutMetadata": "9195fbad1a671ba81fa3dbeda90a1d2b33d90780263738fea126802d5353c000",
          "linkedWithoutMetadata": "9195fbad1a671ba81fa3dbeda90a1d2b33d90780263738fea126802d5353c000"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradablePrivate",
            "src": "contracts/FantomNFTTradablePrivate.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts/FantomNFTTradablePrivate.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomNFTTradablePrivate.sol:27"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTTradablePrivate.sol:28"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTTradablePrivate.sol:29"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts/FantomNFTTradablePrivate.sol:30"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTTradablePrivate.sol:33"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomNFTTradablePrivate.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomPriceFeed": {
        "src": "contracts/FantomPriceFeed.sol:21",
        "version": {
          "withMetadata": "c3486acea602badcee713e0d4a167bc6e4167f4ebe58ea0974294fe748fcd396",
          "withoutMetadata": "c3486acea602badcee713e0d4a167bc6e4167f4ebe58ea0974294fe748fcd396",
          "linkedWithoutMetadata": "c3486acea602badcee713e0d4a167bc6e4167f4ebe58ea0974294fe748fcd396"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerOracle(address,address)",
          "updateOracle(address,address)",
          "getPrice(address)",
          "updateAddressRegistry(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomPriceFeed",
            "src": "contracts/FantomPriceFeed.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomPriceFeed",
              "label": "oracles",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FantomPriceFeed.sol:23"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "addressRegistry",
              "type": "t_address",
              "src": "contracts/FantomPriceFeed.sol:26"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "wFTM",
              "type": "t_address",
              "src": "contracts/FantomPriceFeed.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IOracle": {
        "src": "contracts/FantomPriceFeed.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestAnswer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomTokenRegistry": {
        "src": "contracts/FantomTokenRegistry.sol:7",
        "version": {
          "withMetadata": "15e092d3ba18f8b0b09cf3a08319d468dc9c698c094acc12a625b236ffdfe0d2",
          "withoutMetadata": "15e092d3ba18f8b0b09cf3a08319d468dc9c698c094acc12a625b236ffdfe0d2",
          "linkedWithoutMetadata": "15e092d3ba18f8b0b09cf3a08319d468dc9c698c094acc12a625b236ffdfe0d2"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "add(address)",
          "remove(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomTokenRegistry",
              "label": "enabled",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomTokenRegistry.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155": {
        "src": "contracts/library/ERC1155.sol:11",
        "version": {
          "withMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71",
          "withoutMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71",
          "linkedWithoutMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71"
        },
        "inherit": [
          "IERC165"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155",
              "label": "balances",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/library/ERC1155.sol:25"
            },
            {
              "contract": "ERC1155",
              "label": "operators",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts/library/ERC1155.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155Metadata": {
        "src": "contracts/library/ERC1155Metadata.sol:9",
        "version": {
          "withMetadata": "9f4ac3045c6d47f7902357b737f9b36eb6d74a6144b8f5ff47ba6041be851533",
          "withoutMetadata": "9f4ac3045c6d47f7902357b737f9b36eb6d74a6144b8f5ff47ba6041be851533",
          "linkedWithoutMetadata": "9f4ac3045c6d47f7902357b737f9b36eb6d74a6144b8f5ff47ba6041be851533"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155Metadata",
              "label": "baseMetadataURI",
              "type": "t_string_storage",
              "src": "contracts/library/ERC1155Metadata.sol:12"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155MintBurn": {
        "src": "contracts/library/ERC1155MintBurn.sol:9",
        "version": {
          "withMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71",
          "withoutMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71",
          "linkedWithoutMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71"
        },
        "inherit": [
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155TokenReceiver": {
        "src": "contracts/library/IERC1155TokenReceiver.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BiddingContractMock": {
        "src": "contracts/mock/BiddingContractMock.sol:7",
        "version": {
          "withMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a",
          "withoutMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a",
          "linkedWithoutMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "bid(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BiddingContractMock",
            "src": "contracts/mock/BiddingContractMock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BiddingContractMock",
              "label": "auctionContract",
              "type": "t_contract(FantomAuction)8374",
              "src": "contracts/mock/BiddingContractMock.sol:8"
            }
          ],
          "types": {
            "t_contract(FantomAuction)8374": {
              "label": "contract FantomAuction"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuctionMock": {
        "src": "contracts/mock/FantomAuctionMock.sol:7",
        "version": {
          "withMetadata": "7d55c898852b8b1e86d032cef7abd574ffe789a496166c8870c9ef7b97c292ea",
          "withoutMetadata": "7d55c898852b8b1e86d032cef7abd574ffe789a496166c8870c9ef7b97c292ea",
          "linkedWithoutMetadata": "7d55c898852b8b1e86d032cef7abd574ffe789a496166c8870c9ef7b97c292ea"
        },
        "inherit": [
          "FantomAuction",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "setNowOverride(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuctionMock",
              "label": "nowOverride",
              "type": "t_uint256",
              "src": "contracts/mock/FantomAuctionMock.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts/mock/MockERC20.sol:7",
        "version": {
          "withMetadata": "b73d87e4c8cacbaaea189aec044e8ddaf418db412bc65c27d4f610aa1ed782c7",
          "withoutMetadata": "b73d87e4c8cacbaaea189aec044e8ddaf418db412bc65c27d4f610aa1ed782c7",
          "linkedWithoutMetadata": "b73d87e4c8cacbaaea189aec044e8ddaf418db412bc65c27d4f610aa1ed782c7"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/mock/MockERC20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeabilityProxy": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:340",
        "version": {
          "withMetadata": "6184a0af4a56fb938a6cc1f6462f82a3147609974e9293133dc6422daa64b07e",
          "withoutMetadata": "6184a0af4a56fb938a6cc1f6462f82a3147609974e9293133dc6422daa64b07e",
          "linkedWithoutMetadata": "6184a0af4a56fb938a6cc1f6462f82a3147609974e9293133dc6422daa64b07e"
        },
        "inherit": [
          "UpgradeabilityProxy",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AdminUpgradeabilityProxy",
            "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:350"
          },
          {
            "kind": "delegatecall",
            "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:428"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:46",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UpgradeabilityProxy": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:264",
        "version": {
          "withMetadata": "bc5e99dea4fadec8c7c638d90ce7a1426a108080773e4f267388941123b4e42e",
          "withoutMetadata": "bc5e99dea4fadec8c7c638d90ce7a1426a108080773e4f267388941123b4e42e",
          "linkedWithoutMetadata": "bc5e99dea4fadec8c7c638d90ce7a1426a108080773e4f267388941123b4e42e"
        },
        "inherit": [
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeabilityProxy",
            "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:273"
          },
          {
            "kind": "delegatecall",
            "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:277"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyAdmin": {
        "src": "contracts/proxy/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "3305751fab7d99ff0661e547aca203a151c84f44f5d8c4da9e0b927b0467e8d6",
          "withoutMetadata": "3305751fab7d99ff0661e547aca203a151c84f44f5d8c4da9e0b927b0467e8d6",
          "linkedWithoutMetadata": "3305751fab7d99ff0661e547aca203a151c84f44f5d8c4da9e0b927b0467e8d6"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "@openzeppelin/contracts/math/SafeMath.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/introspection/ERC165.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165",
            "src": "@openzeppelin/contracts/introspection/ERC165.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC165",
              "label": "_supportedInterfaces",
              "type": "t_mapping(t_bytes4,t_bool)",
              "src": "@openzeppelin/contracts/introspection/ERC165.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "contracts/library/IERC165.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155": {
        "src": "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "allowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:21",
        "version": {
          "withMetadata": "a631615329fcd084d60cf63c44c2d1f186e1b06dd024a0a63f7ba77a7a56bef7",
          "withoutMetadata": "a631615329fcd084d60cf63c44c2d1f186e1b06dd024a0a63f7ba77a7a56bef7",
          "linkedWithoutMetadata": "a631615329fcd084d60cf63c44c2d1f186e1b06dd024a0a63f7ba77a7a56bef7"
        },
        "inherit": [
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address",
          "EnumerableSet",
          "EnumerableMap",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "baseURI()",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:93"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_holderTokens",
              "type": "t_mapping(t_address,t_struct(UintSet)4604_storage)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenOwners",
              "type": "t_struct(UintToAddressMap)3981_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:42"
            },
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:45"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:48"
            },
            {
              "contract": "ERC721",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:51"
            },
            {
              "contract": "ERC721",
              "label": "_baseURI",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(UintSet)4604_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UintSet)4604_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4218_storage"
                }
              ]
            },
            "t_struct(Set)4218_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(UintToAddressMap)3981_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)3663_storage"
                }
              ]
            },
            "t_struct(Map)3663_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)3655_storage)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_struct(MapEntry)3655_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]"
            },
            "t_struct(MapEntry)3655_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:118",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableMap": {
        "src": "@openzeppelin/contracts/utils/EnumerableMap.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomAddressRegistry": {
        "src": "contracts/FantomAddressRegistry.sol:8",
        "version": {
          "withMetadata": "01210ef5a113adaade232d13a6ed6aa0103f2b25eafeceefe296975e29df66cb",
          "withoutMetadata": "01210ef5a113adaade232d13a6ed6aa0103f2b25eafeceefe296975e29df66cb",
          "linkedWithoutMetadata": "01210ef5a113adaade232d13a6ed6aa0103f2b25eafeceefe296975e29df66cb"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "updateArtion(address)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateNFTFactory(address)",
          "updateNFTFactoryPrivate(address)",
          "updateArtFactory(address)",
          "updateArtFactoryPrivate(address)",
          "updateTokenRegistry(address)",
          "updatePriceFeed(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAddressRegistry",
              "label": "artion",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:12"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:15"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:18"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:21"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:24"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateFactory",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:27"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "artFactory",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:30"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateArtFactory",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:33"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "tokenRegistry",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:36"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "priceFeed",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactory": {
        "src": "contracts/FantomArtFactory.sol:8",
        "version": {
          "withMetadata": "9df27e05e44575e70daa8898410ab03720347f72f29e1ec84ce8d2fdf14b534f",
          "withoutMetadata": "9df27e05e44575e70daa8898410ab03720347f72f29e1ec84ce8d2fdf14b534f",
          "linkedWithoutMetadata": "9df27e05e44575e70daa8898410ab03720347f72f29e1ec84ce8d2fdf14b534f"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactory",
            "src": "contracts/FantomArtFactory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomArtFactory.sol:14"
            },
            {
              "contract": "FantomArtFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomArtFactory.sol:17"
            },
            {
              "contract": "FantomArtFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtFactory.sol:20"
            },
            {
              "contract": "FantomArtFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtFactory.sol:23"
            },
            {
              "contract": "FantomArtFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtFactory.sol:26"
            },
            {
              "contract": "FantomArtFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomArtFactory.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactoryPrivate": {
        "src": "contracts/FantomArtFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "298a11e97a6c209f78207f6e6f2bbb1472158735ca002b411e4061af0a58c75a",
          "withoutMetadata": "298a11e97a6c209f78207f6e6f2bbb1472158735ca002b411e4061af0a58c75a",
          "linkedWithoutMetadata": "298a11e97a6c209f78207f6e6f2bbb1472158735ca002b411e4061af0a58c75a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactoryPrivate",
            "src": "contracts/FantomArtFactoryPrivate.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomArtFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomArtFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomArtFactoryPrivate.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradable": {
        "src": "contracts/FantomArtTradable.sol:22",
        "version": {
          "withMetadata": "073fe51513c158c095357630028d8a0956ecb69b5d37aef8e14b7ebd12b802cd",
          "withoutMetadata": "073fe51513c158c095357630028d8a0956ecb69b5d37aef8e14b7ebd12b802cd",
          "linkedWithoutMetadata": "073fe51513c158c095357630028d8a0956ecb69b5d37aef8e14b7ebd12b802cd"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradable",
            "src": "contracts/FantomArtTradable.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts/FantomArtTradable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradable",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts/FantomArtTradable.sol:28"
            },
            {
              "contract": "FantomArtTradable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts/FantomArtTradable.sol:31"
            },
            {
              "contract": "FantomArtTradable",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/FantomArtTradable.sol:33"
            },
            {
              "contract": "FantomArtTradable",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/FantomArtTradable.sol:34"
            },
            {
              "contract": "FantomArtTradable",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/FantomArtTradable.sol:37"
            },
            {
              "contract": "FantomArtTradable",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/FantomArtTradable.sol:39"
            },
            {
              "contract": "FantomArtTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtTradable.sol:41"
            },
            {
              "contract": "FantomArtTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtTradable.sol:43"
            },
            {
              "contract": "FantomArtTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomArtTradable.sol:45"
            },
            {
              "contract": "FantomArtTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomArtTradable.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "OwnableDelegateProxy": {
        "src": "contracts/FantomArtTradablePrivate.sol:10",
        "version": {
          "withMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "withoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "linkedWithoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyRegistry": {
        "src": "contracts/FantomArtTradablePrivate.sol:12",
        "version": {
          "withMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9",
          "withoutMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9",
          "linkedWithoutMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ProxyRegistry",
              "label": "proxies",
              "type": "t_mapping(t_address,t_contract(OwnableDelegateProxy)5848)",
              "src": "contracts/FantomArtTradablePrivate.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_contract(OwnableDelegateProxy)5848)": {
              "label": "mapping(address => contract OwnableDelegateProxy)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(OwnableDelegateProxy)5848": {
              "label": "contract OwnableDelegateProxy"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradablePrivate": {
        "src": "contracts/FantomArtTradablePrivate.sol:22",
        "version": {
          "withMetadata": "73c5ea2128ac23354b4437cd46710a957269f6a5e10d6f2eb8955d0f7811fd0b",
          "withoutMetadata": "73c5ea2128ac23354b4437cd46710a957269f6a5e10d6f2eb8955d0f7811fd0b",
          "linkedWithoutMetadata": "73c5ea2128ac23354b4437cd46710a957269f6a5e10d6f2eb8955d0f7811fd0b"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradablePrivate",
            "src": "contracts/FantomArtTradablePrivate.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts/FantomArtTradablePrivate.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts/FantomArtTradablePrivate.sol:28"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts/FantomArtTradablePrivate.sol:31"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/FantomArtTradablePrivate.sol:33"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/FantomArtTradablePrivate.sol:34"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/FantomArtTradablePrivate.sol:37"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/FantomArtTradablePrivate.sol:39"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtTradablePrivate.sol:41"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtTradablePrivate.sol:43"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomArtTradablePrivate.sol:45"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomArtTradablePrivate.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Artion": {
        "src": "contracts/FantomArtion.sol:9",
        "version": {
          "withMetadata": "40b1862beee83190b1b046ad8984596bebf3533a5abe22ad83e1a236df1785dd",
          "withoutMetadata": "40b1862beee83190b1b046ad8984596bebf3533a5abe22ad83e1a236df1785dd",
          "linkedWithoutMetadata": "40b1862beee83190b1b046ad8984596bebf3533a5abe22ad83e1a236df1785dd"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable,uint256)",
          "mint(address,string)",
          "burn(uint256)",
          "exists(uint256)",
          "isApproved(uint256,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Artion",
            "src": "contracts/FantomArtion.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Artion",
              "label": "tokenIdPointer",
              "type": "t_uint256",
              "src": "contracts/FantomArtion.sol:26"
            },
            {
              "contract": "Artion",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/FantomArtion.sol:29"
            },
            {
              "contract": "Artion",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtion.sol:32"
            },
            {
              "contract": "Artion",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtion.sol:35"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuction": {
        "src": "contracts/FantomAuction.sol:55",
        "version": {
          "withMetadata": "b1d7876a39f761c828455415df736e7122eef51d924f4378a713036d42a59212",
          "withoutMetadata": "b1d7876a39f761c828455415df736e7122eef51d924f4378a713036d42a59212",
          "linkedWithoutMetadata": "b1d7876a39f761c828455415df736e7122eef51d924f4378a713036d42a59212"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable)",
          "createAuction(address,uint256,address,uint256,uint256,bool,uint256)",
          "placeBid(address,uint256)",
          "placeBid(address,uint256,uint256)",
          "withdrawBid(address,uint256)",
          "resultAuction(address,uint256)",
          "cancelAuction(address,uint256)",
          "toggleIsPaused()",
          "updateMinBidIncrement(uint256)",
          "updateBidWithdrawalLockTime(uint256)",
          "updateAuctionReservePrice(address,uint256,uint256)",
          "updateAuctionStartTime(address,uint256,uint256)",
          "updateAuctionEndTime(address,uint256,uint256)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "getAuction(address,uint256)",
          "getHighestBidder(address,uint256)",
          "reclaimERC20(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "minBidIncrement",
            "src": "contracts/FantomAuction.sol:156"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bidWithdrawalLockTime",
            "src": "contracts/FantomAuction.sol:159"
          },
          {
            "kind": "state-variable-assignment",
            "name": "platformFee",
            "src": "contracts/FantomAuction.sol:162"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuction",
              "label": "auctions",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6657_storage))",
              "src": "contracts/FantomAuction.sol:150"
            },
            {
              "contract": "FantomAuction",
              "label": "highestBids",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6664_storage))",
              "src": "contracts/FantomAuction.sol:153"
            },
            {
              "contract": "FantomAuction",
              "label": "minBidIncrement",
              "type": "t_uint256",
              "src": "contracts/FantomAuction.sol:156"
            },
            {
              "contract": "FantomAuction",
              "label": "bidWithdrawalLockTime",
              "type": "t_uint256",
              "src": "contracts/FantomAuction.sol:159"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomAuction.sol:162"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFeeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomAuction.sol:165"
            },
            {
              "contract": "FantomAuction",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)6464",
              "src": "contracts/FantomAuction.sol:168"
            },
            {
              "contract": "FantomAuction",
              "label": "isPaused",
              "type": "t_bool",
              "src": "contracts/FantomAuction.sol:171"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6657_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.Auction))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(Auction)6657_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.Auction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Auction)6657_storage": {
              "label": "struct FantomAuction.Auction",
              "members": [
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "minBid",
                  "type": "t_uint256"
                },
                {
                  "label": "reservePrice",
                  "type": "t_uint256"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256"
                },
                {
                  "label": "resulted",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6664_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.HighestBid))"
            },
            "t_mapping(t_uint256,t_struct(HighestBid)6664_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.HighestBid)"
            },
            "t_struct(HighestBid)6664_storage": {
              "label": "struct FantomAuction.HighestBid",
              "members": [
                {
                  "label": "bidder",
                  "type": "t_address_payable"
                },
                {
                  "label": "bid",
                  "type": "t_uint256"
                },
                {
                  "label": "lastBidTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)6464": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAddressRegistry": {
        "src": "contracts/FantomPriceFeed.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenRegistry()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomBundleMarketplace": {
        "src": "contracts/FantomMarketplace.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomMarketplace": {
        "src": "contracts/FantomBundleMarketplace.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,address,address)",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomTokenRegistry": {
        "src": "contracts/FantomPriceFeed.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enabled(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomBundleMarketplace": {
        "src": "contracts/FantomBundleMarketplace.sol:39",
        "version": {
          "withMetadata": "3e4274037f4e967c65aae57d7b549a41440f2e6e097739205afa6c55891452e4",
          "withoutMetadata": "3e4274037f4e967c65aae57d7b549a41440f2e6e097739205afa6c55891452e4",
          "linkedWithoutMetadata": "3e4274037f4e967c65aae57d7b549a41440f2e6e097739205afa6c55891452e4"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20",
          "EnumerableSet"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "getListing(address,string)",
          "listItem(string,address[],uint256[],uint256[],address,uint256,uint256)",
          "cancelListing(string)",
          "updateListing(string,address,uint256)",
          "buyItem(string)",
          "buyItem(string,address)",
          "createOffer(string,address,uint256,uint256)",
          "cancelOffer(string)",
          "acceptOffer(string,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomBundleMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8561_storage))",
              "src": "contracts/FantomBundleMarketplace.sol:106"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "owners",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/FantomBundleMarketplace.sol:109"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIdsPerItem",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4398_storage))",
              "src": "contracts/FantomBundleMarketplace.sol:111"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "nftIndexes",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))",
              "src": "contracts/FantomBundleMarketplace.sol:113"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIds",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "src": "contracts/FantomBundleMarketplace.sol:115"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "offers",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8568_storage))",
              "src": "contracts/FantomBundleMarketplace.sol:118"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomBundleMarketplace.sol:121"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomBundleMarketplace.sol:124"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)8424",
              "src": "contracts/FantomBundleMarketplace.sol:127"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8561_storage))": {
              "label": "mapping(address => mapping(bytes32 => struct FantomBundleMarketplace.Listing))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_struct(Listing)8561_storage)": {
              "label": "mapping(bytes32 => struct FantomBundleMarketplace.Listing)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Listing)8561_storage": {
              "label": "struct FantomBundleMarketplace.Listing",
              "members": [
                {
                  "label": "nfts",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "tokenIds",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "quantities",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4398_storage))": {
              "label": "mapping(address => mapping(uint256 => struct EnumerableSet.Bytes32Set))"
            },
            "t_mapping(t_uint256,t_struct(Bytes32Set)4398_storage)": {
              "label": "mapping(uint256 => struct EnumerableSet.Bytes32Set)"
            },
            "t_struct(Bytes32Set)4398_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4218_storage"
                }
              ]
            },
            "t_struct(Set)4218_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
              "label": "mapping(bytes32 => mapping(address => mapping(uint256 => uint256)))"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8568_storage))": {
              "label": "mapping(bytes32 => mapping(address => struct FantomBundleMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)8568_storage)": {
              "label": "mapping(address => struct FantomBundleMarketplace.Offer)"
            },
            "t_struct(Offer)8568_storage": {
              "label": "struct FantomBundleMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)8424": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomMarketplace": {
        "src": "contracts/FantomMarketplace.sol:71",
        "version": {
          "withMetadata": "9d7ef0a2e6635b34b3408a1b5b1d893090b54496a24b1d1cbb74d32f9d00748e",
          "withoutMetadata": "9d7ef0a2e6635b34b3408a1b5b1d893090b54496a24b1d1cbb74d32f9d00748e",
          "linkedWithoutMetadata": "9d7ef0a2e6635b34b3408a1b5b1d893090b54496a24b1d1cbb74d32f9d00748e"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable,uint16)",
          "listItem(address,uint256,uint256,address,uint256,uint256)",
          "cancelListing(address,uint256)",
          "updateListing(address,uint256,address,uint256)",
          "buyItem(address,uint256,address,address)",
          "createOffer(address,uint256,address,uint256,uint256,uint256)",
          "cancelOffer(address,uint256)",
          "acceptOffer(address,uint256,address)",
          "registerRoyalty(address,uint256,uint16)",
          "registerCollectionRoyalty(address,address,uint16,address)",
          "getPrice(address)",
          "updatePlatformFee(uint16)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomMarketplace",
              "label": "minters",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
              "src": "contracts/FantomMarketplace.sol:151"
            },
            {
              "contract": "FantomMarketplace",
              "label": "royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint16))",
              "src": "contracts/FantomMarketplace.sol:154"
            },
            {
              "contract": "FantomMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10765_storage)))",
              "src": "contracts/FantomMarketplace.sol:157"
            },
            {
              "contract": "FantomMarketplace",
              "label": "offers",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10774_storage)))",
              "src": "contracts/FantomMarketplace.sol:161"
            },
            {
              "contract": "FantomMarketplace",
              "label": "platformFee",
              "type": "t_uint16",
              "src": "contracts/FantomMarketplace.sol:165"
            },
            {
              "contract": "FantomMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomMarketplace.sol:168"
            },
            {
              "contract": "FantomMarketplace",
              "label": "collectionRoyalties",
              "type": "t_mapping(t_address,t_struct(CollectionRoyalty)10781_storage)",
              "src": "contracts/FantomMarketplace.sol:171"
            },
            {
              "contract": "FantomMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)10595",
              "src": "contracts/FantomMarketplace.sol:174"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
              "label": "mapping(address => mapping(uint256 => address))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint16))": {
              "label": "mapping(address => mapping(uint256 => uint16))"
            },
            "t_mapping(t_uint256,t_uint16)": {
              "label": "mapping(uint256 => uint16)"
            },
            "t_uint16": {
              "label": "uint16"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10765_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Listing)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10765_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Listing))"
            },
            "t_mapping(t_address,t_struct(Listing)10765_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Listing)"
            },
            "t_struct(Listing)10765_storage": {
              "label": "struct FantomMarketplace.Listing",
              "members": [
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10774_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Offer)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10774_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)10774_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Offer)"
            },
            "t_struct(Offer)10774_storage": {
              "label": "struct FantomMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_struct(CollectionRoyalty)10781_storage)": {
              "label": "mapping(address => struct FantomMarketplace.CollectionRoyalty)"
            },
            "t_struct(CollectionRoyalty)10781_storage": {
              "label": "struct FantomMarketplace.CollectionRoyalty",
              "members": [
                {
                  "label": "royalty",
                  "type": "t_uint16"
                },
                {
                  "label": "creator",
                  "type": "t_address"
                },
                {
                  "label": "feeRecipient",
                  "type": "t_address"
                }
              ]
            },
            "t_contract(IFantomAddressRegistry)10595": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAuction": {
        "src": "contracts/FantomMarketplace.sol:35",
        "inherit": [],
        "libraries": [],
        "methods": [
          "auctions(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomNFTFactory": {
        "src": "contracts/FantomMarketplace.sol:57",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exists(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomPriceFeed": {
        "src": "contracts/FantomMarketplace.sol:65",
        "inherit": [],
        "libraries": [],
        "methods": [
          "wFTM()",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactory": {
        "src": "contracts/FantomNFTFactory.sol:8",
        "version": {
          "withMetadata": "297086c2e4fad8f91eddbf7415fbd45d7e5b8e62e037cdc004e7e07e9da53c1d",
          "withoutMetadata": "297086c2e4fad8f91eddbf7415fbd45d7e5b8e62e037cdc004e7e07e9da53c1d",
          "linkedWithoutMetadata": "297086c2e4fad8f91eddbf7415fbd45d7e5b8e62e037cdc004e7e07e9da53c1d"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactory",
            "src": "contracts/FantomNFTFactory.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactory",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomNFTFactory.sol:14"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTFactory.sol:17"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTFactory.sol:20"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTFactory.sol:23"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTFactory.sol:26"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomNFTFactory.sol:29"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomNFTFactory.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactoryPrivate": {
        "src": "contracts/FantomNFTFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "8fc2cf553f2ca3b33ae3fdd3a7057255eea9d82d7ed74fc6f9a3afd5e3a47ed8",
          "withoutMetadata": "8fc2cf553f2ca3b33ae3fdd3a7057255eea9d82d7ed74fc6f9a3afd5e3a47ed8",
          "linkedWithoutMetadata": "8fc2cf553f2ca3b33ae3fdd3a7057255eea9d82d7ed74fc6f9a3afd5e3a47ed8"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactoryPrivate",
            "src": "contracts/FantomNFTFactoryPrivate.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomNFTFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomNFTFactoryPrivate.sol:29"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomNFTFactoryPrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradable": {
        "src": "contracts/FantomNFTTradable.sol:12",
        "version": {
          "withMetadata": "6ecb344ebc1f3fdf9bed259dd074a86d5115ecaad8cf02c36b9ea89da3bd90e1",
          "withoutMetadata": "6ecb344ebc1f3fdf9bed259dd074a86d5115ecaad8cf02c36b9ea89da3bd90e1",
          "linkedWithoutMetadata": "6ecb344ebc1f3fdf9bed259dd074a86d5115ecaad8cf02c36b9ea89da3bd90e1"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradable",
            "src": "contracts/FantomNFTTradable.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts/FantomNFTTradable.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradable",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomNFTTradable.sol:27"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTTradable.sol:28"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTTradable.sol:29"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts/FantomNFTTradable.sol:30"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTTradable.sol:33"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomNFTTradable.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradablePrivate": {
        "src": "contracts/FantomNFTTradablePrivate.sol:12",
        "version": {
          "withMetadata": "94350944ae77321f28b1654fc23df9b40b5871f70f38648bc82f8ea4a97f1aa3",
          "withoutMetadata": "94350944ae77321f28b1654fc23df9b40b5871f70f38648bc82f8ea4a97f1aa3",
          "linkedWithoutMetadata": "94350944ae77321f28b1654fc23df9b40b5871f70f38648bc82f8ea4a97f1aa3"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradablePrivate",
            "src": "contracts/FantomNFTTradablePrivate.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts/FantomNFTTradablePrivate.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomNFTTradablePrivate.sol:27"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTTradablePrivate.sol:28"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTTradablePrivate.sol:29"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts/FantomNFTTradablePrivate.sol:30"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTTradablePrivate.sol:33"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomNFTTradablePrivate.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomPriceFeed": {
        "src": "contracts/FantomPriceFeed.sol:21",
        "version": {
          "withMetadata": "c3486acea602badcee713e0d4a167bc6e4167f4ebe58ea0974294fe748fcd396",
          "withoutMetadata": "c3486acea602badcee713e0d4a167bc6e4167f4ebe58ea0974294fe748fcd396",
          "linkedWithoutMetadata": "c3486acea602badcee713e0d4a167bc6e4167f4ebe58ea0974294fe748fcd396"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerOracle(address,address)",
          "updateOracle(address,address)",
          "getPrice(address)",
          "updateAddressRegistry(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomPriceFeed",
            "src": "contracts/FantomPriceFeed.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomPriceFeed",
              "label": "oracles",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FantomPriceFeed.sol:23"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "addressRegistry",
              "type": "t_address",
              "src": "contracts/FantomPriceFeed.sol:26"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "wFTM",
              "type": "t_address",
              "src": "contracts/FantomPriceFeed.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IOracle": {
        "src": "contracts/FantomPriceFeed.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestAnswer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomTokenRegistry": {
        "src": "contracts/FantomTokenRegistry.sol:7",
        "version": {
          "withMetadata": "15e092d3ba18f8b0b09cf3a08319d468dc9c698c094acc12a625b236ffdfe0d2",
          "withoutMetadata": "15e092d3ba18f8b0b09cf3a08319d468dc9c698c094acc12a625b236ffdfe0d2",
          "linkedWithoutMetadata": "15e092d3ba18f8b0b09cf3a08319d468dc9c698c094acc12a625b236ffdfe0d2"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "add(address)",
          "remove(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomTokenRegistry",
              "label": "enabled",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomTokenRegistry.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155": {
        "src": "contracts/library/ERC1155.sol:11",
        "version": {
          "withMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71",
          "withoutMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71",
          "linkedWithoutMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71"
        },
        "inherit": [
          "IERC165"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155",
              "label": "balances",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/library/ERC1155.sol:25"
            },
            {
              "contract": "ERC1155",
              "label": "operators",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts/library/ERC1155.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155Metadata": {
        "src": "contracts/library/ERC1155Metadata.sol:9",
        "version": {
          "withMetadata": "9f4ac3045c6d47f7902357b737f9b36eb6d74a6144b8f5ff47ba6041be851533",
          "withoutMetadata": "9f4ac3045c6d47f7902357b737f9b36eb6d74a6144b8f5ff47ba6041be851533",
          "linkedWithoutMetadata": "9f4ac3045c6d47f7902357b737f9b36eb6d74a6144b8f5ff47ba6041be851533"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155Metadata",
              "label": "baseMetadataURI",
              "type": "t_string_storage",
              "src": "contracts/library/ERC1155Metadata.sol:12"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155MintBurn": {
        "src": "contracts/library/ERC1155MintBurn.sol:9",
        "version": {
          "withMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71",
          "withoutMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71",
          "linkedWithoutMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71"
        },
        "inherit": [
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155TokenReceiver": {
        "src": "contracts/library/IERC1155TokenReceiver.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BiddingContractMock": {
        "src": "contracts/mock/BiddingContractMock.sol:7",
        "version": {
          "withMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a",
          "withoutMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a",
          "linkedWithoutMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "bid(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BiddingContractMock",
            "src": "contracts/mock/BiddingContractMock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BiddingContractMock",
              "label": "auctionContract",
              "type": "t_contract(FantomAuction)8396",
              "src": "contracts/mock/BiddingContractMock.sol:8"
            }
          ],
          "types": {
            "t_contract(FantomAuction)8396": {
              "label": "contract FantomAuction"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuctionMock": {
        "src": "contracts/mock/FantomAuctionMock.sol:7",
        "version": {
          "withMetadata": "7d55c898852b8b1e86d032cef7abd574ffe789a496166c8870c9ef7b97c292ea",
          "withoutMetadata": "7d55c898852b8b1e86d032cef7abd574ffe789a496166c8870c9ef7b97c292ea",
          "linkedWithoutMetadata": "7d55c898852b8b1e86d032cef7abd574ffe789a496166c8870c9ef7b97c292ea"
        },
        "inherit": [
          "FantomAuction",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "setNowOverride(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuctionMock",
              "label": "nowOverride",
              "type": "t_uint256",
              "src": "contracts/mock/FantomAuctionMock.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts/mock/MockERC20.sol:7",
        "version": {
          "withMetadata": "b73d87e4c8cacbaaea189aec044e8ddaf418db412bc65c27d4f610aa1ed782c7",
          "withoutMetadata": "b73d87e4c8cacbaaea189aec044e8ddaf418db412bc65c27d4f610aa1ed782c7",
          "linkedWithoutMetadata": "b73d87e4c8cacbaaea189aec044e8ddaf418db412bc65c27d4f610aa1ed782c7"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/mock/MockERC20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeabilityProxy": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:340",
        "version": {
          "withMetadata": "6184a0af4a56fb938a6cc1f6462f82a3147609974e9293133dc6422daa64b07e",
          "withoutMetadata": "6184a0af4a56fb938a6cc1f6462f82a3147609974e9293133dc6422daa64b07e",
          "linkedWithoutMetadata": "6184a0af4a56fb938a6cc1f6462f82a3147609974e9293133dc6422daa64b07e"
        },
        "inherit": [
          "UpgradeabilityProxy",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AdminUpgradeabilityProxy",
            "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:350"
          },
          {
            "kind": "delegatecall",
            "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:428"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:46",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UpgradeabilityProxy": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:264",
        "version": {
          "withMetadata": "bc5e99dea4fadec8c7c638d90ce7a1426a108080773e4f267388941123b4e42e",
          "withoutMetadata": "bc5e99dea4fadec8c7c638d90ce7a1426a108080773e4f267388941123b4e42e",
          "linkedWithoutMetadata": "bc5e99dea4fadec8c7c638d90ce7a1426a108080773e4f267388941123b4e42e"
        },
        "inherit": [
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeabilityProxy",
            "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:273"
          },
          {
            "kind": "delegatecall",
            "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:277"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyAdmin": {
        "src": "contracts/proxy/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "3305751fab7d99ff0661e547aca203a151c84f44f5d8c4da9e0b927b0467e8d6",
          "withoutMetadata": "3305751fab7d99ff0661e547aca203a151c84f44f5d8c4da9e0b927b0467e8d6",
          "linkedWithoutMetadata": "3305751fab7d99ff0661e547aca203a151c84f44f5d8c4da9e0b927b0467e8d6"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "@openzeppelin/contracts/math/SafeMath.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/introspection/ERC165.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165",
            "src": "@openzeppelin/contracts/introspection/ERC165.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC165",
              "label": "_supportedInterfaces",
              "type": "t_mapping(t_bytes4,t_bool)",
              "src": "@openzeppelin/contracts/introspection/ERC165.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "contracts/library/IERC165.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155": {
        "src": "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "986f8107106b85862016dc41bb664d3c143e597a0fe65b4792ebd800172b5833",
          "withoutMetadata": "986f8107106b85862016dc41bb664d3c143e597a0fe65b4792ebd800172b5833",
          "linkedWithoutMetadata": "986f8107106b85862016dc41bb664d3c143e597a0fe65b4792ebd800172b5833"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:21",
        "version": {
          "withMetadata": "a631615329fcd084d60cf63c44c2d1f186e1b06dd024a0a63f7ba77a7a56bef7",
          "withoutMetadata": "a631615329fcd084d60cf63c44c2d1f186e1b06dd024a0a63f7ba77a7a56bef7",
          "linkedWithoutMetadata": "a631615329fcd084d60cf63c44c2d1f186e1b06dd024a0a63f7ba77a7a56bef7"
        },
        "inherit": [
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address",
          "EnumerableSet",
          "EnumerableMap",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "baseURI()",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:93"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_holderTokens",
              "type": "t_mapping(t_address,t_struct(UintSet)4604_storage)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenOwners",
              "type": "t_struct(UintToAddressMap)3981_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:42"
            },
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:45"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:48"
            },
            {
              "contract": "ERC721",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:51"
            },
            {
              "contract": "ERC721",
              "label": "_baseURI",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(UintSet)4604_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UintSet)4604_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4218_storage"
                }
              ]
            },
            "t_struct(Set)4218_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(UintToAddressMap)3981_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)3663_storage"
                }
              ]
            },
            "t_struct(Map)3663_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)3655_storage)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_struct(MapEntry)3655_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]"
            },
            "t_struct(MapEntry)3655_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:84",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableMap": {
        "src": "@openzeppelin/contracts/utils/EnumerableMap.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomAddressRegistry": {
        "src": "contracts/FantomAddressRegistry.sol:8",
        "version": {
          "withMetadata": "01210ef5a113adaade232d13a6ed6aa0103f2b25eafeceefe296975e29df66cb",
          "withoutMetadata": "01210ef5a113adaade232d13a6ed6aa0103f2b25eafeceefe296975e29df66cb",
          "linkedWithoutMetadata": "01210ef5a113adaade232d13a6ed6aa0103f2b25eafeceefe296975e29df66cb"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "updateArtion(address)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateNFTFactory(address)",
          "updateNFTFactoryPrivate(address)",
          "updateArtFactory(address)",
          "updateArtFactoryPrivate(address)",
          "updateTokenRegistry(address)",
          "updatePriceFeed(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAddressRegistry",
              "label": "artion",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:12"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:15"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:18"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:21"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:24"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateFactory",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:27"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "artFactory",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:30"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateArtFactory",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:33"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "tokenRegistry",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:36"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "priceFeed",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactory": {
        "src": "contracts/FantomArtFactory.sol:8",
        "version": {
          "withMetadata": "9df27e05e44575e70daa8898410ab03720347f72f29e1ec84ce8d2fdf14b534f",
          "withoutMetadata": "9df27e05e44575e70daa8898410ab03720347f72f29e1ec84ce8d2fdf14b534f",
          "linkedWithoutMetadata": "9df27e05e44575e70daa8898410ab03720347f72f29e1ec84ce8d2fdf14b534f"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactory",
            "src": "contracts/FantomArtFactory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomArtFactory.sol:14"
            },
            {
              "contract": "FantomArtFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomArtFactory.sol:17"
            },
            {
              "contract": "FantomArtFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtFactory.sol:20"
            },
            {
              "contract": "FantomArtFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtFactory.sol:23"
            },
            {
              "contract": "FantomArtFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtFactory.sol:26"
            },
            {
              "contract": "FantomArtFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomArtFactory.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactoryPrivate": {
        "src": "contracts/FantomArtFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "298a11e97a6c209f78207f6e6f2bbb1472158735ca002b411e4061af0a58c75a",
          "withoutMetadata": "298a11e97a6c209f78207f6e6f2bbb1472158735ca002b411e4061af0a58c75a",
          "linkedWithoutMetadata": "298a11e97a6c209f78207f6e6f2bbb1472158735ca002b411e4061af0a58c75a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactoryPrivate",
            "src": "contracts/FantomArtFactoryPrivate.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomArtFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomArtFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomArtFactoryPrivate.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradable": {
        "src": "contracts/FantomArtTradable.sol:22",
        "version": {
          "withMetadata": "073fe51513c158c095357630028d8a0956ecb69b5d37aef8e14b7ebd12b802cd",
          "withoutMetadata": "073fe51513c158c095357630028d8a0956ecb69b5d37aef8e14b7ebd12b802cd",
          "linkedWithoutMetadata": "073fe51513c158c095357630028d8a0956ecb69b5d37aef8e14b7ebd12b802cd"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradable",
            "src": "contracts/FantomArtTradable.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts/FantomArtTradable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradable",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts/FantomArtTradable.sol:28"
            },
            {
              "contract": "FantomArtTradable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts/FantomArtTradable.sol:31"
            },
            {
              "contract": "FantomArtTradable",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/FantomArtTradable.sol:33"
            },
            {
              "contract": "FantomArtTradable",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/FantomArtTradable.sol:34"
            },
            {
              "contract": "FantomArtTradable",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/FantomArtTradable.sol:37"
            },
            {
              "contract": "FantomArtTradable",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/FantomArtTradable.sol:39"
            },
            {
              "contract": "FantomArtTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtTradable.sol:41"
            },
            {
              "contract": "FantomArtTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtTradable.sol:43"
            },
            {
              "contract": "FantomArtTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomArtTradable.sol:45"
            },
            {
              "contract": "FantomArtTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomArtTradable.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "OwnableDelegateProxy": {
        "src": "contracts/FantomArtTradablePrivate.sol:10",
        "version": {
          "withMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "withoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "linkedWithoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyRegistry": {
        "src": "contracts/FantomArtTradablePrivate.sol:12",
        "version": {
          "withMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9",
          "withoutMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9",
          "linkedWithoutMetadata": "f9afd8a822138af8ee69fa66e05f4b175ef0a26d4aaa3d6af5290f33d85068f9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ProxyRegistry",
              "label": "proxies",
              "type": "t_mapping(t_address,t_contract(OwnableDelegateProxy)5848)",
              "src": "contracts/FantomArtTradablePrivate.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_contract(OwnableDelegateProxy)5848)": {
              "label": "mapping(address => contract OwnableDelegateProxy)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(OwnableDelegateProxy)5848": {
              "label": "contract OwnableDelegateProxy"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradablePrivate": {
        "src": "contracts/FantomArtTradablePrivate.sol:22",
        "version": {
          "withMetadata": "73c5ea2128ac23354b4437cd46710a957269f6a5e10d6f2eb8955d0f7811fd0b",
          "withoutMetadata": "73c5ea2128ac23354b4437cd46710a957269f6a5e10d6f2eb8955d0f7811fd0b",
          "linkedWithoutMetadata": "73c5ea2128ac23354b4437cd46710a957269f6a5e10d6f2eb8955d0f7811fd0b"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradablePrivate",
            "src": "contracts/FantomArtTradablePrivate.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts/FantomArtTradablePrivate.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts/FantomArtTradablePrivate.sol:28"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts/FantomArtTradablePrivate.sol:31"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/FantomArtTradablePrivate.sol:33"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/FantomArtTradablePrivate.sol:34"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/FantomArtTradablePrivate.sol:37"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/FantomArtTradablePrivate.sol:39"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtTradablePrivate.sol:41"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtTradablePrivate.sol:43"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomArtTradablePrivate.sol:45"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomArtTradablePrivate.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Artion": {
        "src": "contracts/FantomArtion.sol:9",
        "version": {
          "withMetadata": "40b1862beee83190b1b046ad8984596bebf3533a5abe22ad83e1a236df1785dd",
          "withoutMetadata": "40b1862beee83190b1b046ad8984596bebf3533a5abe22ad83e1a236df1785dd",
          "linkedWithoutMetadata": "40b1862beee83190b1b046ad8984596bebf3533a5abe22ad83e1a236df1785dd"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable,uint256)",
          "mint(address,string)",
          "burn(uint256)",
          "exists(uint256)",
          "isApproved(uint256,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Artion",
            "src": "contracts/FantomArtion.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Artion",
              "label": "tokenIdPointer",
              "type": "t_uint256",
              "src": "contracts/FantomArtion.sol:26"
            },
            {
              "contract": "Artion",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/FantomArtion.sol:29"
            },
            {
              "contract": "Artion",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtion.sol:32"
            },
            {
              "contract": "Artion",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtion.sol:35"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuction": {
        "src": "contracts/FantomAuction.sol:55",
        "version": {
          "withMetadata": "b1d7876a39f761c828455415df736e7122eef51d924f4378a713036d42a59212",
          "withoutMetadata": "b1d7876a39f761c828455415df736e7122eef51d924f4378a713036d42a59212",
          "linkedWithoutMetadata": "b1d7876a39f761c828455415df736e7122eef51d924f4378a713036d42a59212"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable)",
          "createAuction(address,uint256,address,uint256,uint256,bool,uint256)",
          "placeBid(address,uint256)",
          "placeBid(address,uint256,uint256)",
          "withdrawBid(address,uint256)",
          "resultAuction(address,uint256)",
          "cancelAuction(address,uint256)",
          "toggleIsPaused()",
          "updateMinBidIncrement(uint256)",
          "updateBidWithdrawalLockTime(uint256)",
          "updateAuctionReservePrice(address,uint256,uint256)",
          "updateAuctionStartTime(address,uint256,uint256)",
          "updateAuctionEndTime(address,uint256,uint256)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "getAuction(address,uint256)",
          "getHighestBidder(address,uint256)",
          "reclaimERC20(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "minBidIncrement",
            "src": "contracts/FantomAuction.sol:156"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bidWithdrawalLockTime",
            "src": "contracts/FantomAuction.sol:159"
          },
          {
            "kind": "state-variable-assignment",
            "name": "platformFee",
            "src": "contracts/FantomAuction.sol:162"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuction",
              "label": "auctions",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6657_storage))",
              "src": "contracts/FantomAuction.sol:150"
            },
            {
              "contract": "FantomAuction",
              "label": "highestBids",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6664_storage))",
              "src": "contracts/FantomAuction.sol:153"
            },
            {
              "contract": "FantomAuction",
              "label": "minBidIncrement",
              "type": "t_uint256",
              "src": "contracts/FantomAuction.sol:156"
            },
            {
              "contract": "FantomAuction",
              "label": "bidWithdrawalLockTime",
              "type": "t_uint256",
              "src": "contracts/FantomAuction.sol:159"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomAuction.sol:162"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFeeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomAuction.sol:165"
            },
            {
              "contract": "FantomAuction",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)6464",
              "src": "contracts/FantomAuction.sol:168"
            },
            {
              "contract": "FantomAuction",
              "label": "isPaused",
              "type": "t_bool",
              "src": "contracts/FantomAuction.sol:171"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6657_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.Auction))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(Auction)6657_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.Auction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Auction)6657_storage": {
              "label": "struct FantomAuction.Auction",
              "members": [
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "minBid",
                  "type": "t_uint256"
                },
                {
                  "label": "reservePrice",
                  "type": "t_uint256"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256"
                },
                {
                  "label": "resulted",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6664_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.HighestBid))"
            },
            "t_mapping(t_uint256,t_struct(HighestBid)6664_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.HighestBid)"
            },
            "t_struct(HighestBid)6664_storage": {
              "label": "struct FantomAuction.HighestBid",
              "members": [
                {
                  "label": "bidder",
                  "type": "t_address_payable"
                },
                {
                  "label": "bid",
                  "type": "t_uint256"
                },
                {
                  "label": "lastBidTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)6464": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAddressRegistry": {
        "src": "contracts/FantomPriceFeed.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenRegistry()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomBundleMarketplace": {
        "src": "contracts/FantomMarketplace.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomMarketplace": {
        "src": "contracts/FantomBundleMarketplace.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,address,address)",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomTokenRegistry": {
        "src": "contracts/FantomPriceFeed.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enabled(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomBundleMarketplace": {
        "src": "contracts/FantomBundleMarketplace.sol:39",
        "version": {
          "withMetadata": "3e4274037f4e967c65aae57d7b549a41440f2e6e097739205afa6c55891452e4",
          "withoutMetadata": "3e4274037f4e967c65aae57d7b549a41440f2e6e097739205afa6c55891452e4",
          "linkedWithoutMetadata": "3e4274037f4e967c65aae57d7b549a41440f2e6e097739205afa6c55891452e4"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20",
          "EnumerableSet"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "getListing(address,string)",
          "listItem(string,address[],uint256[],uint256[],address,uint256,uint256)",
          "cancelListing(string)",
          "updateListing(string,address,uint256)",
          "buyItem(string)",
          "buyItem(string,address)",
          "createOffer(string,address,uint256,uint256)",
          "cancelOffer(string)",
          "acceptOffer(string,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomBundleMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8561_storage))",
              "src": "contracts/FantomBundleMarketplace.sol:106"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "owners",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/FantomBundleMarketplace.sol:109"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIdsPerItem",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4398_storage))",
              "src": "contracts/FantomBundleMarketplace.sol:111"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "nftIndexes",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))",
              "src": "contracts/FantomBundleMarketplace.sol:113"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIds",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "src": "contracts/FantomBundleMarketplace.sol:115"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "offers",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8568_storage))",
              "src": "contracts/FantomBundleMarketplace.sol:118"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomBundleMarketplace.sol:121"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomBundleMarketplace.sol:124"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)8424",
              "src": "contracts/FantomBundleMarketplace.sol:127"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8561_storage))": {
              "label": "mapping(address => mapping(bytes32 => struct FantomBundleMarketplace.Listing))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_struct(Listing)8561_storage)": {
              "label": "mapping(bytes32 => struct FantomBundleMarketplace.Listing)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Listing)8561_storage": {
              "label": "struct FantomBundleMarketplace.Listing",
              "members": [
                {
                  "label": "nfts",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "tokenIds",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "quantities",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4398_storage))": {
              "label": "mapping(address => mapping(uint256 => struct EnumerableSet.Bytes32Set))"
            },
            "t_mapping(t_uint256,t_struct(Bytes32Set)4398_storage)": {
              "label": "mapping(uint256 => struct EnumerableSet.Bytes32Set)"
            },
            "t_struct(Bytes32Set)4398_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4218_storage"
                }
              ]
            },
            "t_struct(Set)4218_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
              "label": "mapping(bytes32 => mapping(address => mapping(uint256 => uint256)))"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8568_storage))": {
              "label": "mapping(bytes32 => mapping(address => struct FantomBundleMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)8568_storage)": {
              "label": "mapping(address => struct FantomBundleMarketplace.Offer)"
            },
            "t_struct(Offer)8568_storage": {
              "label": "struct FantomBundleMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)8424": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomMarketplace": {
        "src": "contracts/FantomMarketplace.sol:71",
        "version": {
          "withMetadata": "9d7ef0a2e6635b34b3408a1b5b1d893090b54496a24b1d1cbb74d32f9d00748e",
          "withoutMetadata": "9d7ef0a2e6635b34b3408a1b5b1d893090b54496a24b1d1cbb74d32f9d00748e",
          "linkedWithoutMetadata": "9d7ef0a2e6635b34b3408a1b5b1d893090b54496a24b1d1cbb74d32f9d00748e"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable,uint16)",
          "listItem(address,uint256,uint256,address,uint256,uint256)",
          "cancelListing(address,uint256)",
          "updateListing(address,uint256,address,uint256)",
          "buyItem(address,uint256,address,address)",
          "createOffer(address,uint256,address,uint256,uint256,uint256)",
          "cancelOffer(address,uint256)",
          "acceptOffer(address,uint256,address)",
          "registerRoyalty(address,uint256,uint16)",
          "registerCollectionRoyalty(address,address,uint16,address)",
          "getPrice(address)",
          "updatePlatformFee(uint16)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomMarketplace",
              "label": "minters",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
              "src": "contracts/FantomMarketplace.sol:151"
            },
            {
              "contract": "FantomMarketplace",
              "label": "royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint16))",
              "src": "contracts/FantomMarketplace.sol:154"
            },
            {
              "contract": "FantomMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10765_storage)))",
              "src": "contracts/FantomMarketplace.sol:157"
            },
            {
              "contract": "FantomMarketplace",
              "label": "offers",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10774_storage)))",
              "src": "contracts/FantomMarketplace.sol:161"
            },
            {
              "contract": "FantomMarketplace",
              "label": "platformFee",
              "type": "t_uint16",
              "src": "contracts/FantomMarketplace.sol:165"
            },
            {
              "contract": "FantomMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomMarketplace.sol:168"
            },
            {
              "contract": "FantomMarketplace",
              "label": "collectionRoyalties",
              "type": "t_mapping(t_address,t_struct(CollectionRoyalty)10781_storage)",
              "src": "contracts/FantomMarketplace.sol:171"
            },
            {
              "contract": "FantomMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)10595",
              "src": "contracts/FantomMarketplace.sol:174"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
              "label": "mapping(address => mapping(uint256 => address))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint16))": {
              "label": "mapping(address => mapping(uint256 => uint16))"
            },
            "t_mapping(t_uint256,t_uint16)": {
              "label": "mapping(uint256 => uint16)"
            },
            "t_uint16": {
              "label": "uint16"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10765_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Listing)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10765_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Listing))"
            },
            "t_mapping(t_address,t_struct(Listing)10765_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Listing)"
            },
            "t_struct(Listing)10765_storage": {
              "label": "struct FantomMarketplace.Listing",
              "members": [
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10774_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Offer)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10774_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)10774_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Offer)"
            },
            "t_struct(Offer)10774_storage": {
              "label": "struct FantomMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_struct(CollectionRoyalty)10781_storage)": {
              "label": "mapping(address => struct FantomMarketplace.CollectionRoyalty)"
            },
            "t_struct(CollectionRoyalty)10781_storage": {
              "label": "struct FantomMarketplace.CollectionRoyalty",
              "members": [
                {
                  "label": "royalty",
                  "type": "t_uint16"
                },
                {
                  "label": "creator",
                  "type": "t_address"
                },
                {
                  "label": "feeRecipient",
                  "type": "t_address"
                }
              ]
            },
            "t_contract(IFantomAddressRegistry)10595": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAuction": {
        "src": "contracts/FantomMarketplace.sol:35",
        "inherit": [],
        "libraries": [],
        "methods": [
          "auctions(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomNFTFactory": {
        "src": "contracts/FantomMarketplace.sol:57",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exists(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomPriceFeed": {
        "src": "contracts/FantomMarketplace.sol:65",
        "inherit": [],
        "libraries": [],
        "methods": [
          "wFTM()",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactory": {
        "src": "contracts/FantomNFTFactory.sol:8",
        "version": {
          "withMetadata": "297086c2e4fad8f91eddbf7415fbd45d7e5b8e62e037cdc004e7e07e9da53c1d",
          "withoutMetadata": "297086c2e4fad8f91eddbf7415fbd45d7e5b8e62e037cdc004e7e07e9da53c1d",
          "linkedWithoutMetadata": "297086c2e4fad8f91eddbf7415fbd45d7e5b8e62e037cdc004e7e07e9da53c1d"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactory",
            "src": "contracts/FantomNFTFactory.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactory",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomNFTFactory.sol:14"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTFactory.sol:17"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTFactory.sol:20"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTFactory.sol:23"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTFactory.sol:26"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomNFTFactory.sol:29"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomNFTFactory.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactoryPrivate": {
        "src": "contracts/FantomNFTFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "8fc2cf553f2ca3b33ae3fdd3a7057255eea9d82d7ed74fc6f9a3afd5e3a47ed8",
          "withoutMetadata": "8fc2cf553f2ca3b33ae3fdd3a7057255eea9d82d7ed74fc6f9a3afd5e3a47ed8",
          "linkedWithoutMetadata": "8fc2cf553f2ca3b33ae3fdd3a7057255eea9d82d7ed74fc6f9a3afd5e3a47ed8"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactoryPrivate",
            "src": "contracts/FantomNFTFactoryPrivate.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomNFTFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomNFTFactoryPrivate.sol:29"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomNFTFactoryPrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradable": {
        "src": "contracts/FantomNFTTradable.sol:12",
        "version": {
          "withMetadata": "6ecb344ebc1f3fdf9bed259dd074a86d5115ecaad8cf02c36b9ea89da3bd90e1",
          "withoutMetadata": "6ecb344ebc1f3fdf9bed259dd074a86d5115ecaad8cf02c36b9ea89da3bd90e1",
          "linkedWithoutMetadata": "6ecb344ebc1f3fdf9bed259dd074a86d5115ecaad8cf02c36b9ea89da3bd90e1"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradable",
            "src": "contracts/FantomNFTTradable.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts/FantomNFTTradable.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradable",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomNFTTradable.sol:27"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTTradable.sol:28"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTTradable.sol:29"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts/FantomNFTTradable.sol:30"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTTradable.sol:33"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomNFTTradable.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradablePrivate": {
        "src": "contracts/FantomNFTTradablePrivate.sol:12",
        "version": {
          "withMetadata": "94350944ae77321f28b1654fc23df9b40b5871f70f38648bc82f8ea4a97f1aa3",
          "withoutMetadata": "94350944ae77321f28b1654fc23df9b40b5871f70f38648bc82f8ea4a97f1aa3",
          "linkedWithoutMetadata": "94350944ae77321f28b1654fc23df9b40b5871f70f38648bc82f8ea4a97f1aa3"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradablePrivate",
            "src": "contracts/FantomNFTTradablePrivate.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts/FantomNFTTradablePrivate.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomNFTTradablePrivate.sol:27"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTTradablePrivate.sol:28"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTTradablePrivate.sol:29"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts/FantomNFTTradablePrivate.sol:30"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTTradablePrivate.sol:33"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomNFTTradablePrivate.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomPriceFeed": {
        "src": "contracts/FantomPriceFeed.sol:21",
        "version": {
          "withMetadata": "c3486acea602badcee713e0d4a167bc6e4167f4ebe58ea0974294fe748fcd396",
          "withoutMetadata": "c3486acea602badcee713e0d4a167bc6e4167f4ebe58ea0974294fe748fcd396",
          "linkedWithoutMetadata": "c3486acea602badcee713e0d4a167bc6e4167f4ebe58ea0974294fe748fcd396"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerOracle(address,address)",
          "updateOracle(address,address)",
          "getPrice(address)",
          "updateAddressRegistry(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomPriceFeed",
            "src": "contracts/FantomPriceFeed.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomPriceFeed",
              "label": "oracles",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FantomPriceFeed.sol:23"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "addressRegistry",
              "type": "t_address",
              "src": "contracts/FantomPriceFeed.sol:26"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "wFTM",
              "type": "t_address",
              "src": "contracts/FantomPriceFeed.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IOracle": {
        "src": "contracts/FantomPriceFeed.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestAnswer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomTokenRegistry": {
        "src": "contracts/FantomTokenRegistry.sol:7",
        "version": {
          "withMetadata": "15e092d3ba18f8b0b09cf3a08319d468dc9c698c094acc12a625b236ffdfe0d2",
          "withoutMetadata": "15e092d3ba18f8b0b09cf3a08319d468dc9c698c094acc12a625b236ffdfe0d2",
          "linkedWithoutMetadata": "15e092d3ba18f8b0b09cf3a08319d468dc9c698c094acc12a625b236ffdfe0d2"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "add(address)",
          "remove(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomTokenRegistry",
              "label": "enabled",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomTokenRegistry.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155": {
        "src": "contracts/library/ERC1155.sol:11",
        "version": {
          "withMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71",
          "withoutMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71",
          "linkedWithoutMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71"
        },
        "inherit": [
          "IERC165"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155",
              "label": "balances",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/library/ERC1155.sol:25"
            },
            {
              "contract": "ERC1155",
              "label": "operators",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts/library/ERC1155.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155Metadata": {
        "src": "contracts/library/ERC1155Metadata.sol:9",
        "version": {
          "withMetadata": "9f4ac3045c6d47f7902357b737f9b36eb6d74a6144b8f5ff47ba6041be851533",
          "withoutMetadata": "9f4ac3045c6d47f7902357b737f9b36eb6d74a6144b8f5ff47ba6041be851533",
          "linkedWithoutMetadata": "9f4ac3045c6d47f7902357b737f9b36eb6d74a6144b8f5ff47ba6041be851533"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155Metadata",
              "label": "baseMetadataURI",
              "type": "t_string_storage",
              "src": "contracts/library/ERC1155Metadata.sol:12"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155MintBurn": {
        "src": "contracts/library/ERC1155MintBurn.sol:9",
        "version": {
          "withMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71",
          "withoutMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71",
          "linkedWithoutMetadata": "2a5acaa9bb9d72a388e99161c7eb274fcd03f5d8a2dded0f9ebfe5b7333b8b71"
        },
        "inherit": [
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155TokenReceiver": {
        "src": "contracts/library/IERC1155TokenReceiver.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BiddingContractMock": {
        "src": "contracts/mock/BiddingContractMock.sol:7",
        "version": {
          "withMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a",
          "withoutMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a",
          "linkedWithoutMetadata": "788ce96abbc3f52c02226f2258a5ad612950c1a09585cbc22b6d6ed943e6444a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "bid(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BiddingContractMock",
            "src": "contracts/mock/BiddingContractMock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BiddingContractMock",
              "label": "auctionContract",
              "type": "t_contract(FantomAuction)8396",
              "src": "contracts/mock/BiddingContractMock.sol:8"
            }
          ],
          "types": {
            "t_contract(FantomAuction)8396": {
              "label": "contract FantomAuction"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuctionMock": {
        "src": "contracts/mock/FantomAuctionMock.sol:7",
        "version": {
          "withMetadata": "7d55c898852b8b1e86d032cef7abd574ffe789a496166c8870c9ef7b97c292ea",
          "withoutMetadata": "7d55c898852b8b1e86d032cef7abd574ffe789a496166c8870c9ef7b97c292ea",
          "linkedWithoutMetadata": "7d55c898852b8b1e86d032cef7abd574ffe789a496166c8870c9ef7b97c292ea"
        },
        "inherit": [
          "FantomAuction",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "setNowOverride(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuctionMock",
              "label": "nowOverride",
              "type": "t_uint256",
              "src": "contracts/mock/FantomAuctionMock.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts/mock/MockERC20.sol:7",
        "version": {
          "withMetadata": "b73d87e4c8cacbaaea189aec044e8ddaf418db412bc65c27d4f610aa1ed782c7",
          "withoutMetadata": "b73d87e4c8cacbaaea189aec044e8ddaf418db412bc65c27d4f610aa1ed782c7",
          "linkedWithoutMetadata": "b73d87e4c8cacbaaea189aec044e8ddaf418db412bc65c27d4f610aa1ed782c7"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/mock/MockERC20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeabilityProxy": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:304",
        "version": {
          "withMetadata": "6184a0af4a56fb938a6cc1f6462f82a3147609974e9293133dc6422daa64b07e",
          "withoutMetadata": "6184a0af4a56fb938a6cc1f6462f82a3147609974e9293133dc6422daa64b07e",
          "linkedWithoutMetadata": "6184a0af4a56fb938a6cc1f6462f82a3147609974e9293133dc6422daa64b07e"
        },
        "inherit": [
          "UpgradeabilityProxy",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AdminUpgradeabilityProxy",
            "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:314"
          },
          {
            "kind": "delegatecall",
            "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:392"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UpgradeabilityProxy": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:228",
        "version": {
          "withMetadata": "bc5e99dea4fadec8c7c638d90ce7a1426a108080773e4f267388941123b4e42e",
          "withoutMetadata": "bc5e99dea4fadec8c7c638d90ce7a1426a108080773e4f267388941123b4e42e",
          "linkedWithoutMetadata": "bc5e99dea4fadec8c7c638d90ce7a1426a108080773e4f267388941123b4e42e"
        },
        "inherit": [
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeabilityProxy",
            "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:237"
          },
          {
            "kind": "delegatecall",
            "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:241"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyAdmin": {
        "src": "contracts/proxy/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "3305751fab7d99ff0661e547aca203a151c84f44f5d8c4da9e0b927b0467e8d6",
          "withoutMetadata": "3305751fab7d99ff0661e547aca203a151c84f44f5d8c4da9e0b927b0467e8d6",
          "linkedWithoutMetadata": "3305751fab7d99ff0661e547aca203a151c84f44f5d8c4da9e0b927b0467e8d6"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "@openzeppelin/contracts/math/SafeMath.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/introspection/ERC165.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165",
            "src": "@openzeppelin/contracts/introspection/ERC165.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC165",
              "label": "_supportedInterfaces",
              "type": "t_mapping(t_bytes4,t_bool)",
              "src": "@openzeppelin/contracts/introspection/ERC165.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "contracts/library/IERC165.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155": {
        "src": "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "ce5d9482dc8438c2f6b7431b6e04286a27a7fcfb97a842fb22410473017be125",
          "withoutMetadata": "ce5d9482dc8438c2f6b7431b6e04286a27a7fcfb97a842fb22410473017be125",
          "linkedWithoutMetadata": "ce5d9482dc8438c2f6b7431b6e04286a27a7fcfb97a842fb22410473017be125"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:21",
        "version": {
          "withMetadata": "87173a545bd593675bfa46ee5cc7e9bef3d9f4bbcaf9a512726ceb783fc0c099",
          "withoutMetadata": "87173a545bd593675bfa46ee5cc7e9bef3d9f4bbcaf9a512726ceb783fc0c099",
          "linkedWithoutMetadata": "87173a545bd593675bfa46ee5cc7e9bef3d9f4bbcaf9a512726ceb783fc0c099"
        },
        "inherit": [
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address",
          "EnumerableSet",
          "EnumerableMap",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "baseURI()",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:93"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_holderTokens",
              "type": "t_mapping(t_address,t_struct(UintSet)4604_storage)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenOwners",
              "type": "t_struct(UintToAddressMap)3981_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:42"
            },
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:45"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:48"
            },
            {
              "contract": "ERC721",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:51"
            },
            {
              "contract": "ERC721",
              "label": "_baseURI",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(UintSet)4604_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UintSet)4604_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4218_storage"
                }
              ]
            },
            "t_struct(Set)4218_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(UintToAddressMap)3981_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)3663_storage"
                }
              ]
            },
            "t_struct(Map)3663_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)3655_storage)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_struct(MapEntry)3655_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]"
            },
            "t_struct(MapEntry)3655_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:84",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableMap": {
        "src": "@openzeppelin/contracts/utils/EnumerableMap.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomAddressRegistry": {
        "src": "contracts/FantomAddressRegistry.sol:8",
        "version": {
          "withMetadata": "d23406c4699cceaff85a21398efbe280eff819a264d72e8c82a514e4ff9d0075",
          "withoutMetadata": "d23406c4699cceaff85a21398efbe280eff819a264d72e8c82a514e4ff9d0075",
          "linkedWithoutMetadata": "d23406c4699cceaff85a21398efbe280eff819a264d72e8c82a514e4ff9d0075"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "updateArtion(address)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateNFTFactory(address)",
          "updateNFTFactoryPrivate(address)",
          "updateArtFactory(address)",
          "updateArtFactoryPrivate(address)",
          "updateTokenRegistry(address)",
          "updatePriceFeed(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAddressRegistry",
              "label": "artion",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:12"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:15"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:18"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:21"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:24"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateFactory",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:27"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "artFactory",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:30"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateArtFactory",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:33"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "tokenRegistry",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:36"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "priceFeed",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactory": {
        "src": "contracts/FantomArtFactory.sol:8",
        "version": {
          "withMetadata": "fdacce07180257517dfa324303f347daa7c51e886fd11c1a516b7a18f28a44a7",
          "withoutMetadata": "fdacce07180257517dfa324303f347daa7c51e886fd11c1a516b7a18f28a44a7",
          "linkedWithoutMetadata": "fdacce07180257517dfa324303f347daa7c51e886fd11c1a516b7a18f28a44a7"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactory",
            "src": "contracts/FantomArtFactory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomArtFactory.sol:14"
            },
            {
              "contract": "FantomArtFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomArtFactory.sol:17"
            },
            {
              "contract": "FantomArtFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtFactory.sol:20"
            },
            {
              "contract": "FantomArtFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtFactory.sol:23"
            },
            {
              "contract": "FantomArtFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtFactory.sol:26"
            },
            {
              "contract": "FantomArtFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomArtFactory.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactoryPrivate": {
        "src": "contracts/FantomArtFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "1ef61cb6bf2cb44ed6e06796af734c60cce33f7045f700bb08313d0ca89103dd",
          "withoutMetadata": "1ef61cb6bf2cb44ed6e06796af734c60cce33f7045f700bb08313d0ca89103dd",
          "linkedWithoutMetadata": "1ef61cb6bf2cb44ed6e06796af734c60cce33f7045f700bb08313d0ca89103dd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactoryPrivate",
            "src": "contracts/FantomArtFactoryPrivate.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomArtFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomArtFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomArtFactoryPrivate.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradable": {
        "src": "contracts/FantomArtTradable.sol:22",
        "version": {
          "withMetadata": "9f5c186e1920edd4378a698c60cffa1b151a3189d98179024a820498ffe8d869",
          "withoutMetadata": "9f5c186e1920edd4378a698c60cffa1b151a3189d98179024a820498ffe8d869",
          "linkedWithoutMetadata": "9f5c186e1920edd4378a698c60cffa1b151a3189d98179024a820498ffe8d869"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradable",
            "src": "contracts/FantomArtTradable.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts/FantomArtTradable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradable",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts/FantomArtTradable.sol:28"
            },
            {
              "contract": "FantomArtTradable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts/FantomArtTradable.sol:31"
            },
            {
              "contract": "FantomArtTradable",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/FantomArtTradable.sol:33"
            },
            {
              "contract": "FantomArtTradable",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/FantomArtTradable.sol:34"
            },
            {
              "contract": "FantomArtTradable",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/FantomArtTradable.sol:37"
            },
            {
              "contract": "FantomArtTradable",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/FantomArtTradable.sol:39"
            },
            {
              "contract": "FantomArtTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtTradable.sol:41"
            },
            {
              "contract": "FantomArtTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtTradable.sol:43"
            },
            {
              "contract": "FantomArtTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomArtTradable.sol:45"
            },
            {
              "contract": "FantomArtTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomArtTradable.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "OwnableDelegateProxy": {
        "src": "contracts/FantomArtTradablePrivate.sol:10",
        "version": {
          "withMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "withoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "linkedWithoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyRegistry": {
        "src": "contracts/FantomArtTradablePrivate.sol:12",
        "version": {
          "withMetadata": "496481b621290956e068d441f49002df4ea1614c5c7d25dc01f4f856ed5446bb",
          "withoutMetadata": "496481b621290956e068d441f49002df4ea1614c5c7d25dc01f4f856ed5446bb",
          "linkedWithoutMetadata": "496481b621290956e068d441f49002df4ea1614c5c7d25dc01f4f856ed5446bb"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ProxyRegistry",
              "label": "proxies",
              "type": "t_mapping(t_address,t_contract(OwnableDelegateProxy)5848)",
              "src": "contracts/FantomArtTradablePrivate.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_contract(OwnableDelegateProxy)5848)": {
              "label": "mapping(address => contract OwnableDelegateProxy)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(OwnableDelegateProxy)5848": {
              "label": "contract OwnableDelegateProxy"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradablePrivate": {
        "src": "contracts/FantomArtTradablePrivate.sol:22",
        "version": {
          "withMetadata": "32239ceed7f4530a8c5537fb8258fa3f0263d049eed5bb7a884b5daa9f005044",
          "withoutMetadata": "32239ceed7f4530a8c5537fb8258fa3f0263d049eed5bb7a884b5daa9f005044",
          "linkedWithoutMetadata": "32239ceed7f4530a8c5537fb8258fa3f0263d049eed5bb7a884b5daa9f005044"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradablePrivate",
            "src": "contracts/FantomArtTradablePrivate.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts/FantomArtTradablePrivate.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts/FantomArtTradablePrivate.sol:28"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts/FantomArtTradablePrivate.sol:31"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/FantomArtTradablePrivate.sol:33"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/FantomArtTradablePrivate.sol:34"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/FantomArtTradablePrivate.sol:37"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/FantomArtTradablePrivate.sol:39"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtTradablePrivate.sol:41"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtTradablePrivate.sol:43"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomArtTradablePrivate.sol:45"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomArtTradablePrivate.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Artion": {
        "src": "contracts/FantomArtion.sol:9",
        "version": {
          "withMetadata": "b56d4894f23855611ab8c51c39113b538c902f68755a337f3519ce128b26b62b",
          "withoutMetadata": "b56d4894f23855611ab8c51c39113b538c902f68755a337f3519ce128b26b62b",
          "linkedWithoutMetadata": "b56d4894f23855611ab8c51c39113b538c902f68755a337f3519ce128b26b62b"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable,uint256)",
          "mint(address,string)",
          "burn(uint256)",
          "exists(uint256)",
          "isApproved(uint256,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Artion",
            "src": "contracts/FantomArtion.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Artion",
              "label": "tokenIdPointer",
              "type": "t_uint256",
              "src": "contracts/FantomArtion.sol:26"
            },
            {
              "contract": "Artion",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/FantomArtion.sol:29"
            },
            {
              "contract": "Artion",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtion.sol:32"
            },
            {
              "contract": "Artion",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtion.sol:35"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuction": {
        "src": "contracts/FantomAuction.sol:55",
        "version": {
          "withMetadata": "f7ba83fb3ba6d0b20387b695a512e8ec1a5a8df39ad69741c140e2877433b937",
          "withoutMetadata": "f7ba83fb3ba6d0b20387b695a512e8ec1a5a8df39ad69741c140e2877433b937",
          "linkedWithoutMetadata": "f7ba83fb3ba6d0b20387b695a512e8ec1a5a8df39ad69741c140e2877433b937"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable)",
          "createAuction(address,uint256,address,uint256,uint256,bool,uint256)",
          "placeBid(address,uint256)",
          "placeBid(address,uint256,uint256)",
          "withdrawBid(address,uint256)",
          "resultAuction(address,uint256)",
          "cancelAuction(address,uint256)",
          "toggleIsPaused()",
          "updateMinBidIncrement(uint256)",
          "updateBidWithdrawalLockTime(uint256)",
          "updateAuctionReservePrice(address,uint256,uint256)",
          "updateAuctionStartTime(address,uint256,uint256)",
          "updateAuctionEndTime(address,uint256,uint256)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "getAuction(address,uint256)",
          "getHighestBidder(address,uint256)",
          "reclaimERC20(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "minBidIncrement",
            "src": "contracts/FantomAuction.sol:156"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bidWithdrawalLockTime",
            "src": "contracts/FantomAuction.sol:159"
          },
          {
            "kind": "state-variable-assignment",
            "name": "platformFee",
            "src": "contracts/FantomAuction.sol:162"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuction",
              "label": "auctions",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6657_storage))",
              "src": "contracts/FantomAuction.sol:150"
            },
            {
              "contract": "FantomAuction",
              "label": "highestBids",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6664_storage))",
              "src": "contracts/FantomAuction.sol:153"
            },
            {
              "contract": "FantomAuction",
              "label": "minBidIncrement",
              "type": "t_uint256",
              "src": "contracts/FantomAuction.sol:156"
            },
            {
              "contract": "FantomAuction",
              "label": "bidWithdrawalLockTime",
              "type": "t_uint256",
              "src": "contracts/FantomAuction.sol:159"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomAuction.sol:162"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFeeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomAuction.sol:165"
            },
            {
              "contract": "FantomAuction",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)6464",
              "src": "contracts/FantomAuction.sol:168"
            },
            {
              "contract": "FantomAuction",
              "label": "isPaused",
              "type": "t_bool",
              "src": "contracts/FantomAuction.sol:171"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6657_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.Auction))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(Auction)6657_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.Auction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Auction)6657_storage": {
              "label": "struct FantomAuction.Auction",
              "members": [
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "minBid",
                  "type": "t_uint256"
                },
                {
                  "label": "reservePrice",
                  "type": "t_uint256"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256"
                },
                {
                  "label": "resulted",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6664_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.HighestBid))"
            },
            "t_mapping(t_uint256,t_struct(HighestBid)6664_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.HighestBid)"
            },
            "t_struct(HighestBid)6664_storage": {
              "label": "struct FantomAuction.HighestBid",
              "members": [
                {
                  "label": "bidder",
                  "type": "t_address_payable"
                },
                {
                  "label": "bid",
                  "type": "t_uint256"
                },
                {
                  "label": "lastBidTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)6464": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAddressRegistry": {
        "src": "contracts/FantomPriceFeed.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenRegistry()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomBundleMarketplace": {
        "src": "contracts/FantomMarketplace.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomMarketplace": {
        "src": "contracts/FantomBundleMarketplace.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,address,address)",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomTokenRegistry": {
        "src": "contracts/FantomPriceFeed.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enabled(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomBundleMarketplace": {
        "src": "contracts/FantomBundleMarketplace.sol:39",
        "version": {
          "withMetadata": "94f6504f41d6c0a710e19b9107b2a1bd96eec924862ea4f4b3cced06cf4b4ff9",
          "withoutMetadata": "94f6504f41d6c0a710e19b9107b2a1bd96eec924862ea4f4b3cced06cf4b4ff9",
          "linkedWithoutMetadata": "94f6504f41d6c0a710e19b9107b2a1bd96eec924862ea4f4b3cced06cf4b4ff9"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20",
          "EnumerableSet"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "getListing(address,string)",
          "listItem(string,address[],uint256[],uint256[],address,uint256,uint256)",
          "cancelListing(string)",
          "updateListing(string,address,uint256)",
          "buyItem(string)",
          "buyItem(string,address)",
          "createOffer(string,address,uint256,uint256)",
          "cancelOffer(string)",
          "acceptOffer(string,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomBundleMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8561_storage))",
              "src": "contracts/FantomBundleMarketplace.sol:106"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "owners",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/FantomBundleMarketplace.sol:109"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIdsPerItem",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4398_storage))",
              "src": "contracts/FantomBundleMarketplace.sol:111"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "nftIndexes",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))",
              "src": "contracts/FantomBundleMarketplace.sol:113"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIds",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "src": "contracts/FantomBundleMarketplace.sol:115"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "offers",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8568_storage))",
              "src": "contracts/FantomBundleMarketplace.sol:118"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomBundleMarketplace.sol:121"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomBundleMarketplace.sol:124"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)8424",
              "src": "contracts/FantomBundleMarketplace.sol:127"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8561_storage))": {
              "label": "mapping(address => mapping(bytes32 => struct FantomBundleMarketplace.Listing))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_struct(Listing)8561_storage)": {
              "label": "mapping(bytes32 => struct FantomBundleMarketplace.Listing)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Listing)8561_storage": {
              "label": "struct FantomBundleMarketplace.Listing",
              "members": [
                {
                  "label": "nfts",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "tokenIds",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "quantities",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4398_storage))": {
              "label": "mapping(address => mapping(uint256 => struct EnumerableSet.Bytes32Set))"
            },
            "t_mapping(t_uint256,t_struct(Bytes32Set)4398_storage)": {
              "label": "mapping(uint256 => struct EnumerableSet.Bytes32Set)"
            },
            "t_struct(Bytes32Set)4398_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4218_storage"
                }
              ]
            },
            "t_struct(Set)4218_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
              "label": "mapping(bytes32 => mapping(address => mapping(uint256 => uint256)))"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8568_storage))": {
              "label": "mapping(bytes32 => mapping(address => struct FantomBundleMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)8568_storage)": {
              "label": "mapping(address => struct FantomBundleMarketplace.Offer)"
            },
            "t_struct(Offer)8568_storage": {
              "label": "struct FantomBundleMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)8424": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomMarketplace": {
        "src": "contracts/FantomMarketplace.sol:71",
        "version": {
          "withMetadata": "6775c4113184c0e0b22bfe5d9bf96f21067c5c91348535046cd85c788afa69d1",
          "withoutMetadata": "6775c4113184c0e0b22bfe5d9bf96f21067c5c91348535046cd85c788afa69d1",
          "linkedWithoutMetadata": "6775c4113184c0e0b22bfe5d9bf96f21067c5c91348535046cd85c788afa69d1"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable,uint16)",
          "listItem(address,uint256,uint256,address,uint256,uint256)",
          "cancelListing(address,uint256)",
          "updateListing(address,uint256,address,uint256)",
          "buyItem(address,uint256,address,address)",
          "createOffer(address,uint256,address,uint256,uint256,uint256)",
          "cancelOffer(address,uint256)",
          "acceptOffer(address,uint256,address)",
          "registerRoyalty(address,uint256,uint16)",
          "registerCollectionRoyalty(address,address,uint16,address)",
          "getPrice(address)",
          "updatePlatformFee(uint16)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomMarketplace",
              "label": "minters",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
              "src": "contracts/FantomMarketplace.sol:151"
            },
            {
              "contract": "FantomMarketplace",
              "label": "royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint16))",
              "src": "contracts/FantomMarketplace.sol:154"
            },
            {
              "contract": "FantomMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10765_storage)))",
              "src": "contracts/FantomMarketplace.sol:157"
            },
            {
              "contract": "FantomMarketplace",
              "label": "offers",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10774_storage)))",
              "src": "contracts/FantomMarketplace.sol:161"
            },
            {
              "contract": "FantomMarketplace",
              "label": "platformFee",
              "type": "t_uint16",
              "src": "contracts/FantomMarketplace.sol:165"
            },
            {
              "contract": "FantomMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomMarketplace.sol:168"
            },
            {
              "contract": "FantomMarketplace",
              "label": "collectionRoyalties",
              "type": "t_mapping(t_address,t_struct(CollectionRoyalty)10781_storage)",
              "src": "contracts/FantomMarketplace.sol:171"
            },
            {
              "contract": "FantomMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)10595",
              "src": "contracts/FantomMarketplace.sol:174"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
              "label": "mapping(address => mapping(uint256 => address))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint16))": {
              "label": "mapping(address => mapping(uint256 => uint16))"
            },
            "t_mapping(t_uint256,t_uint16)": {
              "label": "mapping(uint256 => uint16)"
            },
            "t_uint16": {
              "label": "uint16"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10765_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Listing)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10765_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Listing))"
            },
            "t_mapping(t_address,t_struct(Listing)10765_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Listing)"
            },
            "t_struct(Listing)10765_storage": {
              "label": "struct FantomMarketplace.Listing",
              "members": [
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10774_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Offer)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10774_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)10774_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Offer)"
            },
            "t_struct(Offer)10774_storage": {
              "label": "struct FantomMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_struct(CollectionRoyalty)10781_storage)": {
              "label": "mapping(address => struct FantomMarketplace.CollectionRoyalty)"
            },
            "t_struct(CollectionRoyalty)10781_storage": {
              "label": "struct FantomMarketplace.CollectionRoyalty",
              "members": [
                {
                  "label": "royalty",
                  "type": "t_uint16"
                },
                {
                  "label": "creator",
                  "type": "t_address"
                },
                {
                  "label": "feeRecipient",
                  "type": "t_address"
                }
              ]
            },
            "t_contract(IFantomAddressRegistry)10595": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAuction": {
        "src": "contracts/FantomMarketplace.sol:35",
        "inherit": [],
        "libraries": [],
        "methods": [
          "auctions(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomNFTFactory": {
        "src": "contracts/FantomMarketplace.sol:57",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exists(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomPriceFeed": {
        "src": "contracts/FantomMarketplace.sol:65",
        "inherit": [],
        "libraries": [],
        "methods": [
          "wFTM()",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactory": {
        "src": "contracts/FantomNFTFactory.sol:8",
        "version": {
          "withMetadata": "c9b713ba182d3d6a089d2e5bf653de3fd7dc20728d0797e765f736c34c83224c",
          "withoutMetadata": "c9b713ba182d3d6a089d2e5bf653de3fd7dc20728d0797e765f736c34c83224c",
          "linkedWithoutMetadata": "c9b713ba182d3d6a089d2e5bf653de3fd7dc20728d0797e765f736c34c83224c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactory",
            "src": "contracts/FantomNFTFactory.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactory",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomNFTFactory.sol:14"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTFactory.sol:17"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTFactory.sol:20"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTFactory.sol:23"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTFactory.sol:26"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomNFTFactory.sol:29"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomNFTFactory.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactoryPrivate": {
        "src": "contracts/FantomNFTFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "fce06b91b4c55b8f2925e4922f14200cdc1365da81cd1c6b7f75225af90b1ba0",
          "withoutMetadata": "fce06b91b4c55b8f2925e4922f14200cdc1365da81cd1c6b7f75225af90b1ba0",
          "linkedWithoutMetadata": "fce06b91b4c55b8f2925e4922f14200cdc1365da81cd1c6b7f75225af90b1ba0"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactoryPrivate",
            "src": "contracts/FantomNFTFactoryPrivate.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomNFTFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomNFTFactoryPrivate.sol:29"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomNFTFactoryPrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradable": {
        "src": "contracts/FantomNFTTradable.sol:12",
        "version": {
          "withMetadata": "5a619de3f31ec41d62334380cbbad94d6027c38257d5ed4d33534edcb08dbc2a",
          "withoutMetadata": "5a619de3f31ec41d62334380cbbad94d6027c38257d5ed4d33534edcb08dbc2a",
          "linkedWithoutMetadata": "5a619de3f31ec41d62334380cbbad94d6027c38257d5ed4d33534edcb08dbc2a"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradable",
            "src": "contracts/FantomNFTTradable.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts/FantomNFTTradable.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradable",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomNFTTradable.sol:27"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTTradable.sol:28"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTTradable.sol:29"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts/FantomNFTTradable.sol:30"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTTradable.sol:33"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomNFTTradable.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradablePrivate": {
        "src": "contracts/FantomNFTTradablePrivate.sol:12",
        "version": {
          "withMetadata": "018cbcd6c61ce157f5bf6230f990c56073c5f341d0b367e4143cb4c441d3471b",
          "withoutMetadata": "018cbcd6c61ce157f5bf6230f990c56073c5f341d0b367e4143cb4c441d3471b",
          "linkedWithoutMetadata": "018cbcd6c61ce157f5bf6230f990c56073c5f341d0b367e4143cb4c441d3471b"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradablePrivate",
            "src": "contracts/FantomNFTTradablePrivate.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts/FantomNFTTradablePrivate.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomNFTTradablePrivate.sol:27"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTTradablePrivate.sol:28"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTTradablePrivate.sol:29"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts/FantomNFTTradablePrivate.sol:30"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTTradablePrivate.sol:33"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomNFTTradablePrivate.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomPriceFeed": {
        "src": "contracts/FantomPriceFeed.sol:21",
        "version": {
          "withMetadata": "2d65dfe9470ea40318a0482146378a98d2e9b222c0fc6ce52c37c27c2755d093",
          "withoutMetadata": "2d65dfe9470ea40318a0482146378a98d2e9b222c0fc6ce52c37c27c2755d093",
          "linkedWithoutMetadata": "2d65dfe9470ea40318a0482146378a98d2e9b222c0fc6ce52c37c27c2755d093"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerOracle(address,address)",
          "updateOracle(address,address)",
          "getPrice(address)",
          "updateAddressRegistry(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomPriceFeed",
            "src": "contracts/FantomPriceFeed.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomPriceFeed",
              "label": "oracles",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FantomPriceFeed.sol:23"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "addressRegistry",
              "type": "t_address",
              "src": "contracts/FantomPriceFeed.sol:26"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "wFTM",
              "type": "t_address",
              "src": "contracts/FantomPriceFeed.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IOracle": {
        "src": "contracts/FantomPriceFeed.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestAnswer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomTokenRegistry": {
        "src": "contracts/FantomTokenRegistry.sol:7",
        "version": {
          "withMetadata": "e59039458ed222674cc78044885e3bd96f2d30fdcfad6a4fa62be5eac732f0c5",
          "withoutMetadata": "e59039458ed222674cc78044885e3bd96f2d30fdcfad6a4fa62be5eac732f0c5",
          "linkedWithoutMetadata": "e59039458ed222674cc78044885e3bd96f2d30fdcfad6a4fa62be5eac732f0c5"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "add(address)",
          "remove(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomTokenRegistry",
              "label": "enabled",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomTokenRegistry.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155": {
        "src": "contracts/library/ERC1155.sol:11",
        "version": {
          "withMetadata": "995a047f9dda8ade35bcfd1fa5dfdf101c590c81b97aba45432a2bb4e820908b",
          "withoutMetadata": "995a047f9dda8ade35bcfd1fa5dfdf101c590c81b97aba45432a2bb4e820908b",
          "linkedWithoutMetadata": "995a047f9dda8ade35bcfd1fa5dfdf101c590c81b97aba45432a2bb4e820908b"
        },
        "inherit": [
          "IERC165"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155",
              "label": "balances",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/library/ERC1155.sol:25"
            },
            {
              "contract": "ERC1155",
              "label": "operators",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts/library/ERC1155.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155Metadata": {
        "src": "contracts/library/ERC1155Metadata.sol:9",
        "version": {
          "withMetadata": "9f18277c4f0c56d6425e805d167ac8bd797f350c71c4dee00d67817c9737862a",
          "withoutMetadata": "9f18277c4f0c56d6425e805d167ac8bd797f350c71c4dee00d67817c9737862a",
          "linkedWithoutMetadata": "9f18277c4f0c56d6425e805d167ac8bd797f350c71c4dee00d67817c9737862a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155Metadata",
              "label": "baseMetadataURI",
              "type": "t_string_storage",
              "src": "contracts/library/ERC1155Metadata.sol:12"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155MintBurn": {
        "src": "contracts/library/ERC1155MintBurn.sol:9",
        "version": {
          "withMetadata": "995a047f9dda8ade35bcfd1fa5dfdf101c590c81b97aba45432a2bb4e820908b",
          "withoutMetadata": "995a047f9dda8ade35bcfd1fa5dfdf101c590c81b97aba45432a2bb4e820908b",
          "linkedWithoutMetadata": "995a047f9dda8ade35bcfd1fa5dfdf101c590c81b97aba45432a2bb4e820908b"
        },
        "inherit": [
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155TokenReceiver": {
        "src": "contracts/library/IERC1155TokenReceiver.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BiddingContractMock": {
        "src": "contracts/mock/BiddingContractMock.sol:7",
        "version": {
          "withMetadata": "fc746d5ee23051a8f8db60ca378222d92512beb28f7e4c1900a346162fca59d3",
          "withoutMetadata": "fc746d5ee23051a8f8db60ca378222d92512beb28f7e4c1900a346162fca59d3",
          "linkedWithoutMetadata": "fc746d5ee23051a8f8db60ca378222d92512beb28f7e4c1900a346162fca59d3"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "bid(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BiddingContractMock",
            "src": "contracts/mock/BiddingContractMock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BiddingContractMock",
              "label": "auctionContract",
              "type": "t_contract(FantomAuction)8396",
              "src": "contracts/mock/BiddingContractMock.sol:8"
            }
          ],
          "types": {
            "t_contract(FantomAuction)8396": {
              "label": "contract FantomAuction"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuctionMock": {
        "src": "contracts/mock/FantomAuctionMock.sol:7",
        "version": {
          "withMetadata": "4b08c56cc9cca764b84e668fddf4cf0c89805975aa72aeaabf17b3644cf4ce5b",
          "withoutMetadata": "4b08c56cc9cca764b84e668fddf4cf0c89805975aa72aeaabf17b3644cf4ce5b",
          "linkedWithoutMetadata": "4b08c56cc9cca764b84e668fddf4cf0c89805975aa72aeaabf17b3644cf4ce5b"
        },
        "inherit": [
          "FantomAuction",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "setNowOverride(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuctionMock",
              "label": "nowOverride",
              "type": "t_uint256",
              "src": "contracts/mock/FantomAuctionMock.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts/mock/MockERC20.sol:7",
        "version": {
          "withMetadata": "8c362bddfb6a2b9e4f122df8cefefc53ff51d8be2d9ab2b0359ea50009c846db",
          "withoutMetadata": "8c362bddfb6a2b9e4f122df8cefefc53ff51d8be2d9ab2b0359ea50009c846db",
          "linkedWithoutMetadata": "8c362bddfb6a2b9e4f122df8cefefc53ff51d8be2d9ab2b0359ea50009c846db"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/mock/MockERC20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeabilityProxy": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:304",
        "version": {
          "withMetadata": "2ec22032678b6377d6419e4593a57697919e05ff08acfef40ea76dbd9944d3d7",
          "withoutMetadata": "2ec22032678b6377d6419e4593a57697919e05ff08acfef40ea76dbd9944d3d7",
          "linkedWithoutMetadata": "2ec22032678b6377d6419e4593a57697919e05ff08acfef40ea76dbd9944d3d7"
        },
        "inherit": [
          "UpgradeabilityProxy",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AdminUpgradeabilityProxy",
            "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:314"
          },
          {
            "kind": "delegatecall",
            "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:392"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UpgradeabilityProxy": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:228",
        "version": {
          "withMetadata": "bc5e99dea4fadec8c7c638d90ce7a1426a108080773e4f267388941123b4e42e",
          "withoutMetadata": "bc5e99dea4fadec8c7c638d90ce7a1426a108080773e4f267388941123b4e42e",
          "linkedWithoutMetadata": "bc5e99dea4fadec8c7c638d90ce7a1426a108080773e4f267388941123b4e42e"
        },
        "inherit": [
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeabilityProxy",
            "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:237"
          },
          {
            "kind": "delegatecall",
            "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:241"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyAdmin": {
        "src": "contracts/proxy/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "88b413bea706521fb86a7f6e901c6436e59849f7072000ac925b72225a9d4d20",
          "withoutMetadata": "88b413bea706521fb86a7f6e901c6436e59849f7072000ac925b72225a9d4d20",
          "linkedWithoutMetadata": "88b413bea706521fb86a7f6e901c6436e59849f7072000ac925b72225a9d4d20"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "@openzeppelin/contracts/math/SafeMath.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/introspection/ERC165.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165",
            "src": "@openzeppelin/contracts/introspection/ERC165.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC165",
              "label": "_supportedInterfaces",
              "type": "t_mapping(t_bytes4,t_bool)",
              "src": "@openzeppelin/contracts/introspection/ERC165.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "contracts/library/IERC165.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155": {
        "src": "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "ce5d9482dc8438c2f6b7431b6e04286a27a7fcfb97a842fb22410473017be125",
          "withoutMetadata": "ce5d9482dc8438c2f6b7431b6e04286a27a7fcfb97a842fb22410473017be125",
          "linkedWithoutMetadata": "ce5d9482dc8438c2f6b7431b6e04286a27a7fcfb97a842fb22410473017be125"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol:18",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:21",
        "version": {
          "withMetadata": "87173a545bd593675bfa46ee5cc7e9bef3d9f4bbcaf9a512726ceb783fc0c099",
          "withoutMetadata": "87173a545bd593675bfa46ee5cc7e9bef3d9f4bbcaf9a512726ceb783fc0c099",
          "linkedWithoutMetadata": "87173a545bd593675bfa46ee5cc7e9bef3d9f4bbcaf9a512726ceb783fc0c099"
        },
        "inherit": [
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address",
          "EnumerableSet",
          "EnumerableMap",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "baseURI()",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:93"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_holderTokens",
              "type": "t_mapping(t_address,t_struct(UintSet)4604_storage)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenOwners",
              "type": "t_struct(UintToAddressMap)3981_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:42"
            },
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:45"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:48"
            },
            {
              "contract": "ERC721",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:51"
            },
            {
              "contract": "ERC721",
              "label": "_baseURI",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(UintSet)4604_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UintSet)4604_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4218_storage"
                }
              ]
            },
            "t_struct(Set)4218_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(UintToAddressMap)3981_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)3663_storage"
                }
              ]
            },
            "t_struct(Map)3663_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)3655_storage)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_struct(MapEntry)3655_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]"
            },
            "t_struct(MapEntry)3655_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:84",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableMap": {
        "src": "@openzeppelin/contracts/utils/EnumerableMap.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "withoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc",
          "linkedWithoutMetadata": "d50209fe8707c673a3f02d05762551bd106064605e403ac5312bb0606242f9fc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomAddressRegistry": {
        "src": "contracts/FantomAddressRegistry.sol:8",
        "version": {
          "withMetadata": "d23406c4699cceaff85a21398efbe280eff819a264d72e8c82a514e4ff9d0075",
          "withoutMetadata": "d23406c4699cceaff85a21398efbe280eff819a264d72e8c82a514e4ff9d0075",
          "linkedWithoutMetadata": "d23406c4699cceaff85a21398efbe280eff819a264d72e8c82a514e4ff9d0075"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "updateArtion(address)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateNFTFactory(address)",
          "updateNFTFactoryPrivate(address)",
          "updateArtFactory(address)",
          "updateArtFactoryPrivate(address)",
          "updateTokenRegistry(address)",
          "updatePriceFeed(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAddressRegistry",
              "label": "artion",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:12"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:15"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:18"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:21"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:24"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateFactory",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:27"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "artFactory",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:30"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "privateArtFactory",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:33"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "tokenRegistry",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:36"
            },
            {
              "contract": "FantomAddressRegistry",
              "label": "priceFeed",
              "type": "t_address",
              "src": "contracts/FantomAddressRegistry.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactory": {
        "src": "contracts/FantomArtFactory.sol:8",
        "version": {
          "withMetadata": "fdacce07180257517dfa324303f347daa7c51e886fd11c1a516b7a18f28a44a7",
          "withoutMetadata": "fdacce07180257517dfa324303f347daa7c51e886fd11c1a516b7a18f28a44a7",
          "linkedWithoutMetadata": "fdacce07180257517dfa324303f347daa7c51e886fd11c1a516b7a18f28a44a7"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactory",
            "src": "contracts/FantomArtFactory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomArtFactory.sol:14"
            },
            {
              "contract": "FantomArtFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomArtFactory.sol:17"
            },
            {
              "contract": "FantomArtFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtFactory.sol:20"
            },
            {
              "contract": "FantomArtFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtFactory.sol:23"
            },
            {
              "contract": "FantomArtFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtFactory.sol:26"
            },
            {
              "contract": "FantomArtFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomArtFactory.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtFactoryPrivate": {
        "src": "contracts/FantomArtFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "1ef61cb6bf2cb44ed6e06796af734c60cce33f7045f700bb08313d0ca89103dd",
          "withoutMetadata": "1ef61cb6bf2cb44ed6e06796af734c60cce33f7045f700bb08313d0ca89103dd",
          "linkedWithoutMetadata": "1ef61cb6bf2cb44ed6e06796af734c60cce33f7045f700bb08313d0ca89103dd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,address payable,uint256)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtFactoryPrivate",
            "src": "contracts/FantomArtFactoryPrivate.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomArtFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomArtFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomArtFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomArtFactoryPrivate.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradable": {
        "src": "contracts/FantomArtTradable.sol:22",
        "version": {
          "withMetadata": "9f5c186e1920edd4378a698c60cffa1b151a3189d98179024a820498ffe8d869",
          "withoutMetadata": "9f5c186e1920edd4378a698c60cffa1b151a3189d98179024a820498ffe8d869",
          "linkedWithoutMetadata": "9f5c186e1920edd4378a698c60cffa1b151a3189d98179024a820498ffe8d869"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradable",
            "src": "contracts/FantomArtTradable.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts/FantomArtTradable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradable",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts/FantomArtTradable.sol:28"
            },
            {
              "contract": "FantomArtTradable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts/FantomArtTradable.sol:31"
            },
            {
              "contract": "FantomArtTradable",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/FantomArtTradable.sol:33"
            },
            {
              "contract": "FantomArtTradable",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/FantomArtTradable.sol:34"
            },
            {
              "contract": "FantomArtTradable",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/FantomArtTradable.sol:37"
            },
            {
              "contract": "FantomArtTradable",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/FantomArtTradable.sol:39"
            },
            {
              "contract": "FantomArtTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtTradable.sol:41"
            },
            {
              "contract": "FantomArtTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtTradable.sol:43"
            },
            {
              "contract": "FantomArtTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomArtTradable.sol:45"
            },
            {
              "contract": "FantomArtTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomArtTradable.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "OwnableDelegateProxy": {
        "src": "contracts/FantomArtTradablePrivate.sol:10",
        "version": {
          "withMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "withoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c",
          "linkedWithoutMetadata": "95dcf8683cbe6679482837c888814c890fdff45df2557b0345ff5021e9d03f5c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyRegistry": {
        "src": "contracts/FantomArtTradablePrivate.sol:12",
        "version": {
          "withMetadata": "496481b621290956e068d441f49002df4ea1614c5c7d25dc01f4f856ed5446bb",
          "withoutMetadata": "496481b621290956e068d441f49002df4ea1614c5c7d25dc01f4f856ed5446bb",
          "linkedWithoutMetadata": "496481b621290956e068d441f49002df4ea1614c5c7d25dc01f4f856ed5446bb"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ProxyRegistry",
              "label": "proxies",
              "type": "t_mapping(t_address,t_contract(OwnableDelegateProxy)5848)",
              "src": "contracts/FantomArtTradablePrivate.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_contract(OwnableDelegateProxy)5848)": {
              "label": "mapping(address => contract OwnableDelegateProxy)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(OwnableDelegateProxy)5848": {
              "label": "contract OwnableDelegateProxy"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomArtTradablePrivate": {
        "src": "contracts/FantomArtTradablePrivate.sol:22",
        "version": {
          "withMetadata": "32239ceed7f4530a8c5537fb8258fa3f0263d049eed5bb7a884b5daa9f005044",
          "withoutMetadata": "32239ceed7f4530a8c5537fb8258fa3f0263d049eed5bb7a884b5daa9f005044",
          "linkedWithoutMetadata": "32239ceed7f4530a8c5537fb8258fa3f0263d049eed5bb7a884b5daa9f005044"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ERC1155Metadata",
          "ERC1155MintBurn",
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address payable,address,address)",
          "uri(uint256)",
          "totalSupply(uint256)",
          "mint(address,uint256,string)",
          "getCurrentTokenID()",
          "isApprovedForAll(address,address)",
          "_exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomArtTradablePrivate",
            "src": "contracts/FantomArtTradablePrivate.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenID",
            "src": "contracts/FantomArtTradablePrivate.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_currentTokenID",
              "type": "t_uint256",
              "src": "contracts/FantomArtTradablePrivate.sol:28"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts/FantomArtTradablePrivate.sol:31"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/FantomArtTradablePrivate.sol:33"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "tokenSupply",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/FantomArtTradablePrivate.sol:34"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/FantomArtTradablePrivate.sol:37"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/FantomArtTradablePrivate.sol:39"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtTradablePrivate.sol:41"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtTradablePrivate.sol:43"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomArtTradablePrivate.sol:45"
            },
            {
              "contract": "FantomArtTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomArtTradablePrivate.sol:47"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Artion": {
        "src": "contracts/FantomArtion.sol:9",
        "version": {
          "withMetadata": "b56d4894f23855611ab8c51c39113b538c902f68755a337f3519ce128b26b62b",
          "withoutMetadata": "b56d4894f23855611ab8c51c39113b538c902f68755a337f3519ce128b26b62b",
          "linkedWithoutMetadata": "b56d4894f23855611ab8c51c39113b538c902f68755a337f3519ce128b26b62b"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable,uint256)",
          "mint(address,string)",
          "burn(uint256)",
          "exists(uint256)",
          "isApproved(uint256,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Artion",
            "src": "contracts/FantomArtion.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Artion",
              "label": "tokenIdPointer",
              "type": "t_uint256",
              "src": "contracts/FantomArtion.sol:26"
            },
            {
              "contract": "Artion",
              "label": "creators",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/FantomArtion.sol:29"
            },
            {
              "contract": "Artion",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomArtion.sol:32"
            },
            {
              "contract": "Artion",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomArtion.sol:35"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuction": {
        "src": "contracts/FantomAuction.sol:55",
        "version": {
          "withMetadata": "f7ba83fb3ba6d0b20387b695a512e8ec1a5a8df39ad69741c140e2877433b937",
          "withoutMetadata": "f7ba83fb3ba6d0b20387b695a512e8ec1a5a8df39ad69741c140e2877433b937",
          "linkedWithoutMetadata": "f7ba83fb3ba6d0b20387b695a512e8ec1a5a8df39ad69741c140e2877433b937"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable)",
          "createAuction(address,uint256,address,uint256,uint256,bool,uint256)",
          "placeBid(address,uint256)",
          "placeBid(address,uint256,uint256)",
          "withdrawBid(address,uint256)",
          "resultAuction(address,uint256)",
          "cancelAuction(address,uint256)",
          "toggleIsPaused()",
          "updateMinBidIncrement(uint256)",
          "updateBidWithdrawalLockTime(uint256)",
          "updateAuctionReservePrice(address,uint256,uint256)",
          "updateAuctionStartTime(address,uint256,uint256)",
          "updateAuctionEndTime(address,uint256,uint256)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "getAuction(address,uint256)",
          "getHighestBidder(address,uint256)",
          "reclaimERC20(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "minBidIncrement",
            "src": "contracts/FantomAuction.sol:156"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bidWithdrawalLockTime",
            "src": "contracts/FantomAuction.sol:159"
          },
          {
            "kind": "state-variable-assignment",
            "name": "platformFee",
            "src": "contracts/FantomAuction.sol:162"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuction",
              "label": "auctions",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6657_storage))",
              "src": "contracts/FantomAuction.sol:150"
            },
            {
              "contract": "FantomAuction",
              "label": "highestBids",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6664_storage))",
              "src": "contracts/FantomAuction.sol:153"
            },
            {
              "contract": "FantomAuction",
              "label": "minBidIncrement",
              "type": "t_uint256",
              "src": "contracts/FantomAuction.sol:156"
            },
            {
              "contract": "FantomAuction",
              "label": "bidWithdrawalLockTime",
              "type": "t_uint256",
              "src": "contracts/FantomAuction.sol:159"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomAuction.sol:162"
            },
            {
              "contract": "FantomAuction",
              "label": "platformFeeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomAuction.sol:165"
            },
            {
              "contract": "FantomAuction",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)6464",
              "src": "contracts/FantomAuction.sol:168"
            },
            {
              "contract": "FantomAuction",
              "label": "isPaused",
              "type": "t_bool",
              "src": "contracts/FantomAuction.sol:171"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)6657_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.Auction))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(Auction)6657_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.Auction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Auction)6657_storage": {
              "label": "struct FantomAuction.Auction",
              "members": [
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "minBid",
                  "type": "t_uint256"
                },
                {
                  "label": "reservePrice",
                  "type": "t_uint256"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256"
                },
                {
                  "label": "resulted",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(HighestBid)6664_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FantomAuction.HighestBid))"
            },
            "t_mapping(t_uint256,t_struct(HighestBid)6664_storage)": {
              "label": "mapping(uint256 => struct FantomAuction.HighestBid)"
            },
            "t_struct(HighestBid)6664_storage": {
              "label": "struct FantomAuction.HighestBid",
              "members": [
                {
                  "label": "bidder",
                  "type": "t_address_payable"
                },
                {
                  "label": "bid",
                  "type": "t_uint256"
                },
                {
                  "label": "lastBidTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)6464": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAddressRegistry": {
        "src": "contracts/FantomPriceFeed.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenRegistry()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomBundleMarketplace": {
        "src": "contracts/FantomMarketplace.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomMarketplace": {
        "src": "contracts/FantomBundleMarketplace.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validateItemSold(address,uint256,address,address)",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomTokenRegistry": {
        "src": "contracts/FantomPriceFeed.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enabled(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomBundleMarketplace": {
        "src": "contracts/FantomBundleMarketplace.sol:39",
        "version": {
          "withMetadata": "94f6504f41d6c0a710e19b9107b2a1bd96eec924862ea4f4b3cced06cf4b4ff9",
          "withoutMetadata": "94f6504f41d6c0a710e19b9107b2a1bd96eec924862ea4f4b3cced06cf4b4ff9",
          "linkedWithoutMetadata": "94f6504f41d6c0a710e19b9107b2a1bd96eec924862ea4f4b3cced06cf4b4ff9"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20",
          "EnumerableSet"
        ],
        "methods": [
          "initialize(address payable,uint256)",
          "getListing(address,string)",
          "listItem(string,address[],uint256[],uint256[],address,uint256,uint256)",
          "cancelListing(string)",
          "updateListing(string,address,uint256)",
          "buyItem(string)",
          "buyItem(string,address)",
          "createOffer(string,address,uint256,uint256)",
          "cancelOffer(string)",
          "acceptOffer(string,address)",
          "updatePlatformFee(uint256)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomBundleMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8561_storage))",
              "src": "contracts/FantomBundleMarketplace.sol:106"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "owners",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/FantomBundleMarketplace.sol:109"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIdsPerItem",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4398_storage))",
              "src": "contracts/FantomBundleMarketplace.sol:111"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "nftIndexes",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))",
              "src": "contracts/FantomBundleMarketplace.sol:113"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "bundleIds",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "src": "contracts/FantomBundleMarketplace.sol:115"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "offers",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8568_storage))",
              "src": "contracts/FantomBundleMarketplace.sol:118"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomBundleMarketplace.sol:121"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomBundleMarketplace.sol:124"
            },
            {
              "contract": "FantomBundleMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)8424",
              "src": "contracts/FantomBundleMarketplace.sol:127"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Listing)8561_storage))": {
              "label": "mapping(address => mapping(bytes32 => struct FantomBundleMarketplace.Listing))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_struct(Listing)8561_storage)": {
              "label": "mapping(bytes32 => struct FantomBundleMarketplace.Listing)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Listing)8561_storage": {
              "label": "struct FantomBundleMarketplace.Listing",
              "members": [
                {
                  "label": "nfts",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "tokenIds",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "quantities",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)4398_storage))": {
              "label": "mapping(address => mapping(uint256 => struct EnumerableSet.Bytes32Set))"
            },
            "t_mapping(t_uint256,t_struct(Bytes32Set)4398_storage)": {
              "label": "mapping(uint256 => struct EnumerableSet.Bytes32Set)"
            },
            "t_struct(Bytes32Set)4398_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4218_storage"
                }
              ]
            },
            "t_struct(Set)4218_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
              "label": "mapping(bytes32 => mapping(address => mapping(uint256 => uint256)))"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Offer)8568_storage))": {
              "label": "mapping(bytes32 => mapping(address => struct FantomBundleMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)8568_storage)": {
              "label": "mapping(address => struct FantomBundleMarketplace.Offer)"
            },
            "t_struct(Offer)8568_storage": {
              "label": "struct FantomBundleMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "price",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_contract(IFantomAddressRegistry)8424": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomMarketplace": {
        "src": "contracts/FantomMarketplace.sol:71",
        "version": {
          "withMetadata": "6775c4113184c0e0b22bfe5d9bf96f21067c5c91348535046cd85c788afa69d1",
          "withoutMetadata": "6775c4113184c0e0b22bfe5d9bf96f21067c5c91348535046cd85c788afa69d1",
          "linkedWithoutMetadata": "6775c4113184c0e0b22bfe5d9bf96f21067c5c91348535046cd85c788afa69d1"
        },
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "AddressUpgradeable",
          "SafeERC20"
        ],
        "methods": [
          "initialize(address payable,uint16)",
          "listItem(address,uint256,uint256,address,uint256,uint256)",
          "cancelListing(address,uint256)",
          "updateListing(address,uint256,address,uint256)",
          "buyItem(address,uint256,address,address)",
          "createOffer(address,uint256,address,uint256,uint256,uint256)",
          "cancelOffer(address,uint256)",
          "acceptOffer(address,uint256,address)",
          "registerRoyalty(address,uint256,uint16)",
          "registerCollectionRoyalty(address,address,uint16,address)",
          "getPrice(address)",
          "updatePlatformFee(uint16)",
          "updatePlatformFeeRecipient(address payable)",
          "updateAddressRegistry(address)",
          "validateItemSold(address,uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomMarketplace",
              "label": "minters",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
              "src": "contracts/FantomMarketplace.sol:151"
            },
            {
              "contract": "FantomMarketplace",
              "label": "royalties",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint16))",
              "src": "contracts/FantomMarketplace.sol:154"
            },
            {
              "contract": "FantomMarketplace",
              "label": "listings",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10765_storage)))",
              "src": "contracts/FantomMarketplace.sol:157"
            },
            {
              "contract": "FantomMarketplace",
              "label": "offers",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10774_storage)))",
              "src": "contracts/FantomMarketplace.sol:161"
            },
            {
              "contract": "FantomMarketplace",
              "label": "platformFee",
              "type": "t_uint16",
              "src": "contracts/FantomMarketplace.sol:165"
            },
            {
              "contract": "FantomMarketplace",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomMarketplace.sol:168"
            },
            {
              "contract": "FantomMarketplace",
              "label": "collectionRoyalties",
              "type": "t_mapping(t_address,t_struct(CollectionRoyalty)10781_storage)",
              "src": "contracts/FantomMarketplace.sol:171"
            },
            {
              "contract": "FantomMarketplace",
              "label": "addressRegistry",
              "type": "t_contract(IFantomAddressRegistry)10595",
              "src": "contracts/FantomMarketplace.sol:174"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
              "label": "mapping(address => mapping(uint256 => address))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint16))": {
              "label": "mapping(address => mapping(uint256 => uint16))"
            },
            "t_mapping(t_uint256,t_uint16)": {
              "label": "mapping(uint256 => uint16)"
            },
            "t_uint16": {
              "label": "uint16"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10765_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Listing)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Listing)10765_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Listing))"
            },
            "t_mapping(t_address,t_struct(Listing)10765_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Listing)"
            },
            "t_struct(Listing)10765_storage": {
              "label": "struct FantomMarketplace.Listing",
              "members": [
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "payToken",
                  "type": "t_address"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "startingTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10774_storage)))": {
              "label": "mapping(address => mapping(uint256 => mapping(address => struct FantomMarketplace.Offer)))"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)10774_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FantomMarketplace.Offer))"
            },
            "t_mapping(t_address,t_struct(Offer)10774_storage)": {
              "label": "mapping(address => struct FantomMarketplace.Offer)"
            },
            "t_struct(Offer)10774_storage": {
              "label": "struct FantomMarketplace.Offer",
              "members": [
                {
                  "label": "payToken",
                  "type": "t_contract(IERC20)1979"
                },
                {
                  "label": "quantity",
                  "type": "t_uint256"
                },
                {
                  "label": "pricePerItem",
                  "type": "t_uint256"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1979": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_struct(CollectionRoyalty)10781_storage)": {
              "label": "mapping(address => struct FantomMarketplace.CollectionRoyalty)"
            },
            "t_struct(CollectionRoyalty)10781_storage": {
              "label": "struct FantomMarketplace.CollectionRoyalty",
              "members": [
                {
                  "label": "royalty",
                  "type": "t_uint16"
                },
                {
                  "label": "creator",
                  "type": "t_address"
                },
                {
                  "label": "feeRecipient",
                  "type": "t_address"
                }
              ]
            },
            "t_contract(IFantomAddressRegistry)10595": {
              "label": "contract IFantomAddressRegistry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFantomAuction": {
        "src": "contracts/FantomMarketplace.sol:35",
        "inherit": [],
        "libraries": [],
        "methods": [
          "auctions(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomNFTFactory": {
        "src": "contracts/FantomMarketplace.sol:57",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exists(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFantomPriceFeed": {
        "src": "contracts/FantomMarketplace.sol:65",
        "inherit": [],
        "libraries": [],
        "methods": [
          "wFTM()",
          "getPrice(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactory": {
        "src": "contracts/FantomNFTFactory.sol:8",
        "version": {
          "withMetadata": "c9b713ba182d3d6a089d2e5bf653de3fd7dc20728d0797e765f736c34c83224c",
          "withoutMetadata": "c9b713ba182d3d6a089d2e5bf653de3fd7dc20728d0797e765f736c34c83224c",
          "linkedWithoutMetadata": "c9b713ba182d3d6a089d2e5bf653de3fd7dc20728d0797e765f736c34c83224c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactory",
            "src": "contracts/FantomNFTFactory.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactory",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomNFTFactory.sol:14"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTFactory.sol:17"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTFactory.sol:20"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTFactory.sol:23"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTFactory.sol:26"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomNFTFactory.sol:29"
            },
            {
              "contract": "FantomNFTFactory",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomNFTFactory.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTFactoryPrivate": {
        "src": "contracts/FantomNFTFactoryPrivate.sol:8",
        "version": {
          "withMetadata": "fce06b91b4c55b8f2925e4922f14200cdc1365da81cd1c6b7f75225af90b1ba0",
          "withoutMetadata": "fce06b91b4c55b8f2925e4922f14200cdc1365da81cd1c6b7f75225af90b1ba0",
          "linkedWithoutMetadata": "fce06b91b4c55b8f2925e4922f14200cdc1365da81cd1c6b7f75225af90b1ba0"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,address payable,uint256)",
          "updateAuction(address)",
          "updateMarketplace(address)",
          "updateBundleMarketplace(address)",
          "updateMintFee(uint256)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "createNFTContract(string,string)",
          "registerTokenContract(address)",
          "disableTokenContract(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTFactoryPrivate",
            "src": "contracts/FantomNFTFactoryPrivate.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomNFTFactoryPrivate.sol:14"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTFactoryPrivate.sol:17"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTFactoryPrivate.sol:20"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "mintFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTFactoryPrivate.sol:23"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTFactoryPrivate.sol:26"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "feeRecipient",
              "type": "t_address_payable",
              "src": "contracts/FantomNFTFactoryPrivate.sol:29"
            },
            {
              "contract": "FantomNFTFactoryPrivate",
              "label": "exists",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomNFTFactoryPrivate.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradable": {
        "src": "contracts/FantomNFTTradable.sol:12",
        "version": {
          "withMetadata": "5a619de3f31ec41d62334380cbbad94d6027c38257d5ed4d33534edcb08dbc2a",
          "withoutMetadata": "5a619de3f31ec41d62334380cbbad94d6027c38257d5ed4d33534edcb08dbc2a",
          "linkedWithoutMetadata": "5a619de3f31ec41d62334380cbbad94d6027c38257d5ed4d33534edcb08dbc2a"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradable",
            "src": "contracts/FantomNFTTradable.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts/FantomNFTTradable.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradable",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomNFTTradable.sol:27"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTTradable.sol:28"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTTradable.sol:29"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts/FantomNFTTradable.sol:30"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTTradable.sol:33"
            },
            {
              "contract": "FantomNFTTradable",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomNFTTradable.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomNFTTradablePrivate": {
        "src": "contracts/FantomNFTTradablePrivate.sol:12",
        "version": {
          "withMetadata": "018cbcd6c61ce157f5bf6230f990c56073c5f341d0b367e4143cb4c441d3471b",
          "withoutMetadata": "018cbcd6c61ce157f5bf6230f990c56073c5f341d0b367e4143cb4c441d3471b",
          "linkedWithoutMetadata": "018cbcd6c61ce157f5bf6230f990c56073c5f341d0b367e4143cb4c441d3471b"
        },
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,address,address,uint256,address payable)",
          "updatePlatformFee(uint256)",
          "updateFeeRecipient(address payable)",
          "mint(address,string)",
          "burn(uint256)",
          "isApproved(uint256,address)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomNFTTradablePrivate",
            "src": "contracts/FantomNFTTradablePrivate.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_currentTokenId",
            "src": "contracts/FantomNFTTradablePrivate.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "auction",
              "type": "t_address",
              "src": "contracts/FantomNFTTradablePrivate.sol:27"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "marketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTTradablePrivate.sol:28"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "bundleMarketplace",
              "type": "t_address",
              "src": "contracts/FantomNFTTradablePrivate.sol:29"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "_currentTokenId",
              "type": "t_uint256",
              "src": "contracts/FantomNFTTradablePrivate.sol:30"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "platformFee",
              "type": "t_uint256",
              "src": "contracts/FantomNFTTradablePrivate.sol:33"
            },
            {
              "contract": "FantomNFTTradablePrivate",
              "label": "feeReceipient",
              "type": "t_address_payable",
              "src": "contracts/FantomNFTTradablePrivate.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomPriceFeed": {
        "src": "contracts/FantomPriceFeed.sol:21",
        "version": {
          "withMetadata": "2d65dfe9470ea40318a0482146378a98d2e9b222c0fc6ce52c37c27c2755d093",
          "withoutMetadata": "2d65dfe9470ea40318a0482146378a98d2e9b222c0fc6ce52c37c27c2755d093",
          "linkedWithoutMetadata": "2d65dfe9470ea40318a0482146378a98d2e9b222c0fc6ce52c37c27c2755d093"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "registerOracle(address,address)",
          "updateOracle(address,address)",
          "getPrice(address)",
          "updateAddressRegistry(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FantomPriceFeed",
            "src": "contracts/FantomPriceFeed.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FantomPriceFeed",
              "label": "oracles",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FantomPriceFeed.sol:23"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "addressRegistry",
              "type": "t_address",
              "src": "contracts/FantomPriceFeed.sol:26"
            },
            {
              "contract": "FantomPriceFeed",
              "label": "wFTM",
              "type": "t_address",
              "src": "contracts/FantomPriceFeed.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IOracle": {
        "src": "contracts/FantomPriceFeed.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestAnswer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FantomTokenRegistry": {
        "src": "contracts/FantomTokenRegistry.sol:7",
        "version": {
          "withMetadata": "e59039458ed222674cc78044885e3bd96f2d30fdcfad6a4fa62be5eac732f0c5",
          "withoutMetadata": "e59039458ed222674cc78044885e3bd96f2d30fdcfad6a4fa62be5eac732f0c5",
          "linkedWithoutMetadata": "e59039458ed222674cc78044885e3bd96f2d30fdcfad6a4fa62be5eac732f0c5"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "add(address)",
          "remove(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomTokenRegistry",
              "label": "enabled",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FantomTokenRegistry.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155": {
        "src": "contracts/library/ERC1155.sol:11",
        "version": {
          "withMetadata": "995a047f9dda8ade35bcfd1fa5dfdf101c590c81b97aba45432a2bb4e820908b",
          "withoutMetadata": "995a047f9dda8ade35bcfd1fa5dfdf101c590c81b97aba45432a2bb4e820908b",
          "linkedWithoutMetadata": "995a047f9dda8ade35bcfd1fa5dfdf101c590c81b97aba45432a2bb4e820908b"
        },
        "inherit": [
          "IERC165"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155",
              "label": "balances",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/library/ERC1155.sol:25"
            },
            {
              "contract": "ERC1155",
              "label": "operators",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts/library/ERC1155.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155Metadata": {
        "src": "contracts/library/ERC1155Metadata.sol:9",
        "version": {
          "withMetadata": "9f18277c4f0c56d6425e805d167ac8bd797f350c71c4dee00d67817c9737862a",
          "withoutMetadata": "9f18277c4f0c56d6425e805d167ac8bd797f350c71c4dee00d67817c9737862a",
          "linkedWithoutMetadata": "9f18277c4f0c56d6425e805d167ac8bd797f350c71c4dee00d67817c9737862a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155Metadata",
              "label": "baseMetadataURI",
              "type": "t_string_storage",
              "src": "contracts/library/ERC1155Metadata.sol:12"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155MintBurn": {
        "src": "contracts/library/ERC1155MintBurn.sol:9",
        "version": {
          "withMetadata": "995a047f9dda8ade35bcfd1fa5dfdf101c590c81b97aba45432a2bb4e820908b",
          "withoutMetadata": "995a047f9dda8ade35bcfd1fa5dfdf101c590c81b97aba45432a2bb4e820908b",
          "linkedWithoutMetadata": "995a047f9dda8ade35bcfd1fa5dfdf101c590c81b97aba45432a2bb4e820908b"
        },
        "inherit": [
          "ERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155TokenReceiver": {
        "src": "contracts/library/IERC1155TokenReceiver.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BiddingContractMock": {
        "src": "contracts/mock/BiddingContractMock.sol:7",
        "version": {
          "withMetadata": "fc746d5ee23051a8f8db60ca378222d92512beb28f7e4c1900a346162fca59d3",
          "withoutMetadata": "fc746d5ee23051a8f8db60ca378222d92512beb28f7e4c1900a346162fca59d3",
          "linkedWithoutMetadata": "fc746d5ee23051a8f8db60ca378222d92512beb28f7e4c1900a346162fca59d3"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "bid(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BiddingContractMock",
            "src": "contracts/mock/BiddingContractMock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BiddingContractMock",
              "label": "auctionContract",
              "type": "t_contract(FantomAuction)8396",
              "src": "contracts/mock/BiddingContractMock.sol:8"
            }
          ],
          "types": {
            "t_contract(FantomAuction)8396": {
              "label": "contract FantomAuction"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FantomAuctionMock": {
        "src": "contracts/mock/FantomAuctionMock.sol:7",
        "version": {
          "withMetadata": "4b08c56cc9cca764b84e668fddf4cf0c89805975aa72aeaabf17b3644cf4ce5b",
          "withoutMetadata": "4b08c56cc9cca764b84e668fddf4cf0c89805975aa72aeaabf17b3644cf4ce5b",
          "linkedWithoutMetadata": "4b08c56cc9cca764b84e668fddf4cf0c89805975aa72aeaabf17b3644cf4ce5b"
        },
        "inherit": [
          "FantomAuction",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "setNowOverride(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FantomAuctionMock",
              "label": "nowOverride",
              "type": "t_uint256",
              "src": "contracts/mock/FantomAuctionMock.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts/mock/MockERC20.sol:7",
        "version": {
          "withMetadata": "8c362bddfb6a2b9e4f122df8cefefc53ff51d8be2d9ab2b0359ea50009c846db",
          "withoutMetadata": "8c362bddfb6a2b9e4f122df8cefefc53ff51d8be2d9ab2b0359ea50009c846db",
          "linkedWithoutMetadata": "8c362bddfb6a2b9e4f122df8cefefc53ff51d8be2d9ab2b0359ea50009c846db"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/mock/MockERC20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AdminUpgradeabilityProxy": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:304",
        "version": {
          "withMetadata": "2ec22032678b6377d6419e4593a57697919e05ff08acfef40ea76dbd9944d3d7",
          "withoutMetadata": "2ec22032678b6377d6419e4593a57697919e05ff08acfef40ea76dbd9944d3d7",
          "linkedWithoutMetadata": "2ec22032678b6377d6419e4593a57697919e05ff08acfef40ea76dbd9944d3d7"
        },
        "inherit": [
          "UpgradeabilityProxy",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AdminUpgradeabilityProxy",
            "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:314"
          },
          {
            "kind": "delegatecall",
            "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:392"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UpgradeabilityProxy": {
        "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:228",
        "version": {
          "withMetadata": "bc5e99dea4fadec8c7c638d90ce7a1426a108080773e4f267388941123b4e42e",
          "withoutMetadata": "bc5e99dea4fadec8c7c638d90ce7a1426a108080773e4f267388941123b4e42e",
          "linkedWithoutMetadata": "bc5e99dea4fadec8c7c638d90ce7a1426a108080773e4f267388941123b4e42e"
        },
        "inherit": [
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeabilityProxy",
            "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:237"
          },
          {
            "kind": "delegatecall",
            "src": "contracts/proxy/AdminUpgradeabilityProxy.sol:241"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ProxyAdmin": {
        "src": "contracts/proxy/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "88b413bea706521fb86a7f6e901c6436e59849f7072000ac925b72225a9d4d20",
          "withoutMetadata": "88b413bea706521fb86a7f6e901c6436e59849f7072000ac925b72225a9d4d20",
          "linkedWithoutMetadata": "88b413bea706521fb86a7f6e901c6436e59849f7072000ac925b72225a9d4d20"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    }
  ]
}